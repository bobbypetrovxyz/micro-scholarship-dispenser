{
	"id": "7bd63515eba6202f207b130b2c043a30",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/",
				"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
				"@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/"
			]
		},
		"sources": {
			"src/ScholarshipFactory.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.28;\n\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ScholarshipDispenser} from \"./ScholarshipDispenser.sol\";\n\ncontract ScholarshipFactory is Ownable {\n    using Clones for address;\n\n    address public immutable dispenserImplementation;\n    address[] public dispensers;\n    address public director;\n\n    event DispenserCreated(\n        address indexed dispenserAddress,\n        uint256 usdStipendAmount\n    );\n\n    error InvalidImplementationAddress();\n    error InvalidAdminAddress();\n    error InvalidPriceFeedAddress();\n    error InvalidMerkleRoot();\n    error StipendAmountMustBeGreaterThanZero();\n    error InvalidDirectorAddress();\n    error OnlyDirectorCanCreateDispenser();\n\n    constructor(\n        address _dispenserImplementation,\n        address _admin,\n        address _director\n    ) Ownable(_admin) {\n        require(\n            _dispenserImplementation != address(0),\n            InvalidImplementationAddress()\n        );\n        require(_admin != address(0), InvalidAdminAddress());\n        require(_director != address(0), InvalidDirectorAddress());\n\n        dispenserImplementation = _dispenserImplementation;\n        director = _director;\n    }\n\n    /**\n     * @notice Director creates a new ScholarshipDispenser clone with the specified parameters\n     * @param _merkleRoot The Merkle root for stipend eligibility verification\n     * @param _usdStipendAmount The stipend amount in USD cents (e.g., 1000 for $10.00)\n     * @param _priceFeed The address of the Chainlink price feed contract for USD to ETH conversion\n     * @return The address of the newly created Payroll clone\n     *\n     * @dev The Merkle root is used to verify if a student is eligible for the stipend\n     * @dev The Merkle root must be a valid bytes32 value\n     * @dev The stipend amount must be greater than zero\n     * @dev The price feed is used to convert the stipend amount from USD to ETH\n     * @dev Emits a DispenserCreated event upon successful creation of the dispenser\n     */\n    function createDispenser(\n        bytes32 _merkleRoot,\n        uint256 _usdStipendAmount,\n        address _priceFeed\n    ) external returns (address) {\n        require(msg.sender == director, OnlyDirectorCanCreateDispenser());\n        require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero());\n        require(_priceFeed != address(0), InvalidPriceFeedAddress());\n        require(_merkleRoot != bytes32(0), InvalidMerkleRoot());\n\n        address dispenserClone = dispenserImplementation.clone();\n        ScholarshipDispenser(payable(dispenserClone)).initialize(\n            director,\n            _usdStipendAmount,\n            _priceFeed,\n            _merkleRoot\n        );\n\n        dispensers.push(dispenserClone);\n\n        emit DispenserCreated(dispenserClone, _usdStipendAmount);\n\n        return dispenserClone;\n    }\n\n    /**\n     * @notice Only the admin can update the director address\n     * @param newDirector The new director address to be set\n     */\n    function updateDirector(address newDirector) external onlyOwner {\n        require(newDirector != address(0), InvalidDirectorAddress());\n        director = newDirector;\n    }\n}\n"
			},
			"src/ScholarshipDispenser.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.28;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract ScholarshipDispenser is OwnableUpgradeable {\n    uint256 public usdStipendAmount; // in cents, e.g. 1000 for $10.00\n    AggregatorV3Interface public priceFeed;\n    bytes32 public merkleRoot;\n    mapping(address => bool) public claimedStipends;\n\n    event StipendClaimed(\n        address indexed student,\n        uint256 usdAmount,\n        uint256 ethAmount\n    );\n    event DirectorFundedStipendPayouts(\n        address indexed director,\n        uint256 amount\n    );\n    event Withdrawn(address indexed director, uint256 amount);\n\n    error InvalidDirectorAddress();\n    error InvalidPriceFeedAddress();\n    error InvalidMerkleRoot();\n    error StipendAlreadyClaimed();\n    error InvalidMerkleProof();\n    error StipendAmountMustBeGreaterThanZero();\n    error InvalidPriceFeedData();\n    error InsufficientContractBalance();\n    error ETHTransferFailed();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @custom:oz-upgrades-validate-as-initializer\n    function initialize(\n        address _director,\n        uint256 _usdStipendAmount,\n        address _priceFeed,\n        bytes32 _merkleRoot\n    ) public initializer {\n        require(_director != address(0), InvalidDirectorAddress());\n        require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero());\n        require(_priceFeed != address(0), InvalidPriceFeedAddress());\n        require(_merkleRoot != bytes32(0), InvalidMerkleRoot());\n\n        __Ownable_init(_director);\n\n        usdStipendAmount = _usdStipendAmount;\n        priceFeed = AggregatorV3Interface(_priceFeed);\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * @notice This function allows students to claim their stipend if they are included in the Merkle tree\n     * @param merkleProof The Merkle proof that verifies the student's eligibility\n     */\n    function claimStipend(bytes32[] calldata merkleProof) external {\n        address student = msg.sender;\n        require(!claimedStipends[student], StipendAlreadyClaimed());\n\n        bytes32 leaf = keccak256(abi.encode(student, usdStipendAmount));\n        require(\n            MerkleProof.verify(\n                merkleProof,\n                merkleRoot,\n                keccak256(abi.encodePacked(leaf))\n            ),\n            InvalidMerkleProof()\n        );\n\n        uint256 ethAmount = convertUsdToEth(usdStipendAmount);\n        require(\n            address(this).balance >= ethAmount,\n            InsufficientContractBalance()\n        );\n\n        // set the stipend as claimed before transferring funds\n        // to prevent re-entrancy attacks (Check-Effects-Interactions pattern)\n        claimedStipends[student] = true;\n\n        (bool success, ) = student.call{value: ethAmount}(\"\");\n        require(success, ETHTransferFailed());\n\n        emit StipendClaimed(student, usdStipendAmount, ethAmount);\n    }\n\n    function convertUsdToEth(\n        uint256 usdAmountInCents\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        require(price > 0, InvalidPriceFeedData());\n\n        // USD amount is in cents, price is in USD with 8 decimals\n        return (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price);\n    }\n\n    // director can send ETH to this contract to fund the stipend payouts\n    // director is the owner of the contract\n    receive() external payable onlyOwner {\n        emit DirectorFundedStipendPayouts(msg.sender, msg.value);\n    }\n\n    // director can withdraw contract leftover balance\n    function withdraw() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        (bool success, ) = msg.sender.call{value: contractBalance}(\"\");\n        require(success, ETHTransferFailed());\n\n        emit Withdrawn(msg.sender, contractBalance);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"AggregatorV3Interface": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "description",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint80",
									"name": "_roundId",
									"type": "uint80"
								}
							],
							"name": "getRoundData",
							"outputs": [
								{
									"internalType": "uint80",
									"name": "roundId",
									"type": "uint80"
								},
								{
									"internalType": "int256",
									"name": "answer",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "startedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "updatedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint80",
									"name": "answeredInRound",
									"type": "uint80"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "latestRoundData",
							"outputs": [
								{
									"internalType": "uint80",
									"name": "roundId",
									"type": "uint80"
								},
								{
									"internalType": "int256",
									"name": "answer",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "startedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "updatedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint80",
									"name": "answeredInRound",
									"type": "uint80"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "version",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"description()": "7284e416",
							"getRoundData(uint80)": "9a6fc8f5",
							"latestRoundData()": "feaf968c",
							"version()": "54fd4d50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 563,
								"contract": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
				"Clones": {
					"abi": [
						{
							"inputs": [],
							"name": "CloneArgumentsTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for deploying minimal proxy contracts, also known as \"clones\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":817:11840  library Clones {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":817:11840  library Clones {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa26469706673582212205244c38116fbecdc35b53d01331ed5e30f406aa19f5b8901136329e7fc92801364736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212205244c38116fbecdc35b53d01331ed5e30f406aa19f5b8901136329e7fc92801364736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE PREVRANDAO 0xC3 DUP2 AND 0xFB 0xEC 0xDC CALLDATALOAD 0xB5 RETURNDATASIZE ADD CALLER 0x1E 0xD5 0xE3 0xF BLOCKHASH PUSH11 0xA19F5B8901136329E7FC92 DUP1 SGT PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "817:11023:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;817:11023:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212205244c38116fbecdc35b53d01331ed5e30f406aa19f5b8901136329e7fc92801364736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE PREVRANDAO 0xC3 DUP2 AND 0xFB 0xEC 0xDC CALLDATALOAD 0xB5 RETURNDATASIZE ADD CALLER 0x1E 0xD5 0xE3 0xF BLOCKHASH PUSH11 0xA19F5B8901136329E7FC92 DUP1 SGT PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "817:11023:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_cloneCodeWithImmutableArgs(address,bytes memory)": "infinite",
								"clone(address)": "infinite",
								"clone(address,uint256)": "infinite",
								"cloneDeterministic(address,bytes32)": "infinite",
								"cloneDeterministic(address,bytes32,uint256)": "infinite",
								"cloneDeterministicWithImmutableArgs(address,bytes memory,bytes32)": "infinite",
								"cloneDeterministicWithImmutableArgs(address,bytes memory,bytes32,uint256)": "infinite",
								"cloneWithImmutableArgs(address,bytes memory)": "infinite",
								"cloneWithImmutableArgs(address,bytes memory,uint256)": "infinite",
								"fetchCloneArgs(address)": "infinite",
								"predictDeterministicAddress(address,bytes32)": "infinite",
								"predictDeterministicAddress(address,bytes32,address)": "infinite",
								"predictDeterministicAddressWithImmutableArgs(address,bytes memory,bytes32)": "infinite",
								"predictDeterministicAddressWithImmutableArgs(address,bytes memory,bytes32,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 817,
									"end": 11840,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205244c38116fbecdc35b53d01331ed5e30f406aa19f5b8901136329e7fc92801364736f6c634300081c0033",
									".code": [
										{
											"begin": 817,
											"end": 11840,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 817,
											"end": 11840,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CloneArgumentsTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for deploying minimal proxy contracts, also known as \\\"clones\\\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":\"Clones\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x7162fa3c6971aa6f0a70160fed018edbb8b1db3af9b034ef3f7c224c3bdb7431\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f212d25e8f357209838ad7ce8ebc89de79906d9fe580566962e889ecb090e6b4\",\"dweb:/ipfs/QmdbLuLwX24VB1Gdrabke584WyaUkuJSWuDzzuRgqAMFge\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
				"Create2": {
					"abi": [
						{
							"inputs": [],
							"name": "Create2EmptyBytecode",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
						"errors": {
							"Create2EmptyBytecode()": [
								{
									"details": "There's no code to deploy."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":533:4465  library Create2 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":533:4465  library Create2 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa264697066735822122095cce31f9c94106ca14997382f3b6f500fe81dd14655fe96163e2ee18a5663c764736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122095cce31f9c94106ca14997382f3b6f500fe81dd14655fe96163e2ee18a5663c764736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xCC 0xE3 0x1F SWAP13 SWAP5 LT PUSH13 0xA14997382F3B6F500FE81DD146 SSTORE INVALID SWAP7 AND RETURNDATACOPY 0x2E 0xE1 DUP11 JUMP PUSH4 0xC764736F PUSH13 0x634300081C0033000000000000 ",
							"sourceMap": "533:3932:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;533:3932:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122095cce31f9c94106ca14997382f3b6f500fe81dd14655fe96163e2ee18a5663c764736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xCC 0xE3 0x1F SWAP13 SWAP5 LT PUSH13 0xA14997382F3B6F500FE81DD146 SSTORE INVALID SWAP7 AND RETURNDATACOPY 0x2E 0xE1 DUP11 JUMP PUSH4 0xC764736F PUSH13 0x634300081C0033000000000000 ",
							"sourceMap": "533:3932:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"computeAddress(bytes32,bytes32)": "infinite",
								"computeAddress(bytes32,bytes32,address)": "infinite",
								"deploy(uint256,bytes32,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 533,
									"end": 4465,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095cce31f9c94106ca14997382f3b6f500fe81dd14655fe96163e2ee18a5663c764736f6c634300081c0033",
									".code": [
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 533,
											"end": 4465,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"errors\":{\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "FailedCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedDeployment",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "MissingPrecompile",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._",
						"errors": {
							"FailedCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"FailedDeployment()": [
								{
									"details": "The deployment failed."
								}
							],
							"InsufficientBalance(uint256,uint256)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"MissingPrecompile(address)": [
								{
									"details": "A necessary precompile is missing."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":411:895  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":411:895  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa26469706673582212209d3277422cb34531d0ec458a9726c7411f7ab9fb39bf087c768f9eb718dd3a5864736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212209d3277422cb34531d0ec458a9726c7411f7ab9fb39bf087c768f9eb718dd3a5864736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 ORIGIN PUSH24 0x422CB34531D0EC458A9726C7411F7AB9FB39BF087C768F9E 0xB7 XOR 0xDD GASPRICE PC PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "411:484:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;411:484:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212209d3277422cb34531d0ec458a9726c7411f7ab9fb39bf087c768f9eb718dd3a5864736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 ORIGIN PUSH24 0x422CB34531D0EC458A9726C7411F7AB9FB39BF087C768F9E 0xB7 XOR 0xDD GASPRICE PC PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "411:484:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 411,
									"end": 895,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209d3277422cb34531d0ec458a9726c7411f7ab9fb39bf087c768f9eb718dd3a5864736f6c634300081c0033",
									".code": [
										{
											"begin": 411,
											"end": 895,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 411,
											"end": 895,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 411,
											"end": 895,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 895,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"Hashes": {
					"abi": [],
					"devdoc": {
						"details": "Library of standard hash functions. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 EXP PUSH19 0x6ACE466D15CAB7A33265F931BB2DB52E8D87A7 PUSH11 0x340F0596876E7590456473 PUSH16 0x6C634300081C00330000000000000000 ",
							"sourceMap": "221:811:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:811:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 EXP PUSH19 0x6ACE466D15CAB7A33265F931BB2DB52E8D87A7 PUSH11 0x340F0596876E7590456473 PUSH16 0x6C634300081C00330000000000000000 ",
							"sourceMap": "221:811:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"commutativeKeccak256(bytes32,bytes32)": "infinite",
								"efficientKeccak256(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
									".code": [
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [
						{
							"inputs": [],
							"name": "MerkleProofInvalidMultiproof",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.",
						"errors": {
							"MerkleProofInvalidMultiproof()": [
								{
									"details": "The multiproof provided is not valid."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xE4 0xF9 INVALID 0xD0 SWAP4 0xB0 0xEA SWAP12 0xEA PREVRANDAO 0xA6 CALLDATALOAD 0xC EXP 0xD7 SWAP16 0xA5 0xF7 0xB2 0xCA 0xB0 GAS EQ BASEFEE 0xE1 CALLDATALOAD 0xF8 0xFC 0xCD SWAP15 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "1353:22982:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xE4 0xF9 INVALID 0xD0 SWAP4 0xB0 0xEA SWAP12 0xEA PREVRANDAO 0xA6 CALLDATALOAD 0xC EXP 0xD7 SWAP16 0xA5 0xF7 0xB2 0xCA 0xB0 GAS EQ BASEFEE 0xE1 CALLDATALOAD 0xF8 0xFC 0xCD SWAP15 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "1353:22982:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
									".code": [
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/ScholarshipDispenser.sol": {
				"ScholarshipDispenser": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientContractBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidDirectorAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMerkleProof",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMerkleRoot",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPriceFeedAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPriceFeedData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StipendAlreadyClaimed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StipendAmountMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "director",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "DirectorFundedStipendPayouts",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "student",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								}
							],
							"name": "StipendClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "director",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "claimStipend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "claimedStipends",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_director",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_usdStipendAmount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_priceFeed",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "priceFeed",
							"outputs": [
								{
									"internalType": "contract AggregatorV3Interface",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "usdStipendAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"claimStipend(bytes32[])": {
								"params": {
									"merkleProof": "The Merkle proof that verifies the student's eligibility"
								}
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"initialize(address,uint256,address,bytes32)": {
								"custom:oz-upgrades-validate-as-initializer": ""
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"src/ScholarshipDispenser.sol\":1292:1345  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n    /* \"src/ScholarshipDispenser.sol\":1316:1338  _disableInitializers() */\n  tag_4\n    /* \"src/ScholarshipDispenser.sol\":1316:1336  _disableInitializers */\n  tag_5\n    /* \"src/ScholarshipDispenser.sol\":1316:1338  _disableInitializers() */\n  jump\t// in\ntag_4:\n    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  jump(tag_18)\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7709:8131  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":3147:3213  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00 */\n  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7898:7913  $._initializing */\n  dup1\n  sload\n  0x010000000000000000\n  swap1\n  div\n  0xff\n  and\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7894:7970  if ($._initializing) {... */\n  iszero\n  tag_10\n  jumpi\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7936:7959  InvalidInitialization() */\n  mload(0x40)\n  shl(0xe0, 0xf92ee8a9)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7894:7970  if ($._initializing) {... */\ntag_10:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7983:7997  $._initialized */\n  dup1\n  sload\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  and\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7983:8017  $._initialized != type(uint64).max */\n  eq\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7979:8125  if ($._initialized != type(uint64).max) {... */\n  tag_11\n  jumpi\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8033:8066  $._initialized = type(uint64).max */\n  dup1\n  sload\n  not(sub(shl(0x40, 0x01), 0x01))\n  and\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  mload(0x40)\n    /* \"#utility.yul\":158:208   */\n  swap1\n  dup2\n  mstore\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n  swap1\n    /* \"#utility.yul\":146:148   */\n  0x20\n    /* \"#utility.yul\":131:149   */\n  add\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7979:8125  if ($._initialized != type(uint64).max) {... */\ntag_11:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7758:8131  {... */\n  pop\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7709:8131  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"#utility.yul\":14:214   */\ntag_18:\n    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x741bef1a\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x741bef1a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xe65bf545\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xf32ae7dd\n      eq\n      tag_12\n      jumpi\n      revert(0x00, 0x00)\n    tag_13:\n      dup1\n      0x26317008\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x5f761675\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_7\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_16\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_16:\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      mload(0x40)\n        /* \"src/ScholarshipDispenser.sol\":3836:3845  msg.value */\n      callvalue\n        /* \"#utility.yul\":160:185   */\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":3824:3834  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      0x9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b842\n      swap1\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n      stop\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"src/ScholarshipDispenser.sol\":572:619  mapping(address => bool) public claimedStipends */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_21\n      jumpi\n      revert(0x00, 0x00)\n    tag_21:\n      pop\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_22:\n      mload(0x40)\n        /* \"#utility.yul\":730:744   */\n      swap1\n      iszero\n        /* \"#utility.yul\":723:745   */\n      iszero\n        /* \"#utility.yul\":705:746   */\n      dup2\n      mstore\n        /* \"#utility.yul\":693:695   */\n      0x20\n        /* \"#utility.yul\":678:696   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":572:619  mapping(address => bool) public claimedStipends */\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/ScholarshipDispenser.sol\":541:566  bytes32 public merkleRoot */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_28\n      jumpi\n      revert(0x00, 0x00)\n    tag_28:\n      pop\n      tag_29\n      sload(0x02)\n      dup2\n      jump\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":541:566  bytes32 public merkleRoot */\n      tag_26\n        /* \"#utility.yul\":14:191   */\n      jump\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      revert(0x00, 0x00)\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      stop\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      revert(0x00, 0x00)\n    tag_36:\n      pop\n      tag_34\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_41\n      jumpi\n      revert(0x00, 0x00)\n    tag_41:\n      pop\n      tag_34\n      tag_43\n      jump\t// in\n        /* \"src/ScholarshipDispenser.sol\":497:535  AggregatorV3Interface public priceFeed */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      revert(0x00, 0x00)\n    tag_44:\n      pop\n      sload(0x01)\n      tag_45\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_45:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1533:1565   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1515:1566   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1503:1505   */\n      0x20\n        /* \"#utility.yul\":1488:1506   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":497:535  AggregatorV3Interface public priceFeed */\n      tag_26\n        /* \"#utility.yul\":1341:1572   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      revert(0x00, 0x00)\n    tag_49:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      jump(tag_45)\n        /* \"src/ScholarshipDispenser.sol\":426:457  uint256 public usdStipendAmount */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_54\n      jumpi\n      revert(0x00, 0x00)\n    tag_54:\n      pop\n      tag_29\n      sload(0x00)\n      dup2\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      revert(0x00, 0x00)\n    tag_58:\n      pop\n      tag_34\n      tag_60\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_60:\n      tag_61\n      jump\t// in\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      revert(0x00, 0x00)\n    tag_62:\n      pop\n      tag_34\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_17:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      tag_70\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      and\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_71\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1515:1566   */\n      mstore\n        /* \"#utility.yul\":1488:1506   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n    tag_71:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n    tag_35:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_75\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_75:\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      mload(0x40)\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      selfbalance\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      0x00\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":4039:4049  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      dup4\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      dup4\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":4039:4049  msg.sender */\n      dup8\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_81\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_80)\n    tag_81:\n      0x60\n      swap2\n      pop\n    tag_80:\n      pop\n        /* \"src/ScholarshipDispenser.sol\":4020:4082  (bool success, ) = msg.sender.call{value: contractBalance}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":4100:4107  success */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":4092:4129  require(success, ETHTransferFailed()) */\n      tag_82\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xb12d13eb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_82:\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      dup3\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":4155:4165  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n      swap1\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":3953:4190  {... */\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n    tag_40:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_85\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_86\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_85:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      dup1\n      sload\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0xff\n      shl(0x40, 0x01)\n      dup3\n      div\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0xffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4740  initialized == 0 */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_87\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4744:4758  isTopLevelCall */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n    tag_87:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4704:4758  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4768:4785  bool construction */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4799  initialized */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      0xffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4803:4804  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_88\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4816:4820  this */\n      address\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4833  address(this).code.length */\n      extcodesize\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4838  address(this).code.length == 0 */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n    tag_88:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4768:4838  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4854:4866  initialSetup */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4866  !initialSetup */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_89\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4871:4883  construction */\n      dup1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4870:4883  !construction */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n    tag_89:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      mload(0x40)\n      shl(0xe0, 0xf92ee8a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n    tag_90:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      dup5\n      sload\n      not(0xffffffffffffffff)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4966:4967  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      or\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_91\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5011:5033  $._initializing = true */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      shl(0x40, 0x01)\n      or\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n    tag_91:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":1585:1608  _director != address(0) */\n      dup10\n      and\n        /* \"src/ScholarshipDispenser.sol\":1577:1635  require(_director != address(0), InvalidDirectorAddress()) */\n      tag_93\n      jumpi\n      mload(0x40)\n      shl(0xe3, 0x074f166b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \"src/ScholarshipDispenser.sol\":1673:1674  0 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":1653:1670  _usdStipendAmount */\n      dup9\n        /* \"src/ScholarshipDispenser.sol\":1653:1674  _usdStipendAmount > 0 */\n      gt\n        /* \"src/ScholarshipDispenser.sol\":1645:1713  require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero()) */\n      tag_94\n      jumpi\n      mload(0x40)\n      shl(0xe2, 0x10e41573)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":1731:1755  _priceFeed != address(0) */\n      dup8\n      and\n        /* \"src/ScholarshipDispenser.sol\":1723:1783  require(_priceFeed != address(0), InvalidPriceFeedAddress()) */\n      tag_95\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xe3588063)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_95:\n        /* \"src/ScholarshipDispenser.sol\":1801:1812  _merkleRoot */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":1793:1848  require(_merkleRoot != bytes32(0), InvalidMerkleRoot()) */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x9dd854d3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"src/ScholarshipDispenser.sol\":1859:1884  __Ownable_init(_director) */\n      tag_97\n        /* \"src/ScholarshipDispenser.sol\":1874:1883  _director */\n      dup10\n        /* \"src/ScholarshipDispenser.sol\":1859:1873  __Ownable_init */\n      tag_98\n        /* \"src/ScholarshipDispenser.sol\":1859:1884  __Ownable_init(_director) */\n      jump\t// in\n    tag_97:\n        /* \"src/ScholarshipDispenser.sol\":1895:1911  usdStipendAmount */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":1895:1931  usdStipendAmount = _usdStipendAmount */\n      dup9\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":1941:1950  priceFeed */\n      0x01\n        /* \"src/ScholarshipDispenser.sol\":1941:1986  priceFeed = AggregatorV3Interface(_priceFeed) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup10\n      and\n      or\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":1996:2006  merkleRoot */\n      0x02\n        /* \"src/ScholarshipDispenser.sol\":1996:2020  merkleRoot = _merkleRoot */\n      dup7\n      swap1\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_99\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5098:5121  $._initializing = false */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":2763:2813   */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n      swap1\n        /* \"#utility.yul\":2751:2753   */\n      0x20\n        /* \"#utility.yul\":2736:2754   */\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n    tag_99:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4092:5171  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_43:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_103\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_103:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      tag_71\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3246:3247  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3237  _transferOwnership */\n      tag_106\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_61:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_111\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_113\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3562:3563  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1515:1566   */\n      mstore\n        /* \"#utility.yul\":1488:1506   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      tag_73\n        /* \"#utility.yul\":1341:1572   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_113:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      tag_115\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3604:3612  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3603  _transferOwnership */\n      tag_106\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_115:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n    tag_66:\n        /* \"src/ScholarshipDispenser.sol\":2331:2341  msg.sender */\n      caller\n        /* \"src/ScholarshipDispenser.sol\":2313:2328  address student */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2360:2384  claimedStipends[student] */\n      dup2\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2360:2375  claimedStipends */\n      0x03\n        /* \"src/ScholarshipDispenser.sol\":2360:2384  claimedStipends[student] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"src/ScholarshipDispenser.sol\":2359:2384  !claimedStipends[student] */\n      iszero\n        /* \"src/ScholarshipDispenser.sol\":2351:2410  require(!claimedStipends[student], StipendAlreadyClaimed()) */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x93f5a1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_117:\n        /* \"src/ScholarshipDispenser.sol\":2421:2433  bytes32 leaf */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2466:2482  usdStipendAmount */\n      dup1\n      sload\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3016:3048   */\n      dup6\n      and\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":2998:3049   */\n      mstore\n        /* \"#utility.yul\":3065:3083   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":3058:3092   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2971:2989   */\n      0x60\n      add\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2436:2484  keccak256(abi.encode(student, usdStipendAmount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":2421:2484  bytes32 leaf = keccak256(abi.encode(student, usdStipendAmount)) */\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      tag_120\n        /* \"src/ScholarshipDispenser.sol\":2551:2562  merkleProof */\n      dup5\n      dup5\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2580:2590  merkleRoot */\n      sload(0x02)\n        /* \"src/ScholarshipDispenser.sol\":2618:2640  abi.encodePacked(leaf) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":3232:3251   */\n      dup9\n      swap1\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2580:2590  merkleRoot */\n      swap2\n      swap4\n      pop\n        /* \"#utility.yul\":3267:3279   */\n      add\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2618:2640  abi.encodePacked(leaf) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2608:2641  keccak256(abi.encodePacked(leaf)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":2515:2533  MerkleProof.verify */\n      tag_123\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      jump\t// in\n    tag_120:\n        /* \"src/ScholarshipDispenser.sol\":2494:2699  require(... */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe1, 0x582f497d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"src/ScholarshipDispenser.sol\":2710:2727  uint256 ethAmount */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2730:2763  convertUsdToEth(usdStipendAmount) */\n      tag_125\n        /* \"src/ScholarshipDispenser.sol\":2746:2762  usdStipendAmount */\n      sload(0x00)\n        /* \"src/ScholarshipDispenser.sol\":2730:2745  convertUsdToEth */\n      tag_126\n        /* \"src/ScholarshipDispenser.sol\":2730:2763  convertUsdToEth(usdStipendAmount) */\n      jump\t// in\n    tag_125:\n        /* \"src/ScholarshipDispenser.sol\":2710:2763  uint256 ethAmount = convertUsdToEth(usdStipendAmount) */\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2819:2828  ethAmount */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":2794:2815  address(this).balance */\n      selfbalance\n        /* \"src/ScholarshipDispenser.sol\":2794:2828  address(this).balance >= ethAmount */\n      lt\n      iszero\n        /* \"src/ScholarshipDispenser.sol\":2773:2881  require(... */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x786e0a99)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":3035:3050  claimedStipends */\n      0x03\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":3035:3066  claimedStipends[student] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"src/ScholarshipDispenser.sol\":3062:3066  true */\n      0x01\n        /* \"src/ScholarshipDispenser.sol\":3035:3066  claimedStipends[student] = true */\n      or\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      mload\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      swap1\n      swap2\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3116:3125  ethAmount */\n      dup4\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup4\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3116:3125  ethAmount */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup8\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_131\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_130)\n    tag_131:\n      0x60\n      swap2\n      pop\n    tag_130:\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3077:3130  (bool success, ) = student.call{value: ethAmount}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3148:3155  success */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":3140:3177  require(success, ETHTransferFailed()) */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xb12d13eb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"src/ScholarshipDispenser.sol\":3217:3233  usdStipendAmount */\n      sload(0x00)\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":3464:3489   */\n      swap2\n      dup3\n      mstore\n        /* \"#utility.yul\":3520:3522   */\n      0x20\n        /* \"#utility.yul\":3505:3523   */\n      dup3\n      add\n        /* \"#utility.yul\":3498:3532   */\n      dup5\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      dup7\n      and\n      swap2\n      0x4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a\n      swap2\n        /* \"#utility.yul\":3437:3455   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":2303:3252  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9071:9276  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_86:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9129:9159  InitializableStorage storage $ */\n      0x00\n      dup1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":3147:3213  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00 */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9186:9213  _initializableStorageSlot() */\n    tag_137:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9171:9213  bytes32 slot = _initializableStorageSlot() */\n      swap3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9071:9276  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_98:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_140\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_141\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n    tag_140:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      tag_115\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1954:1966  initialOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1953  __Ownable_init_unchained */\n      tag_144\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_106:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3941:3960  $._owner = newOwner */\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      swap2\n      dup3\n      or\n      dup5\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      swap3\n      and\n      swap2\n      dup3\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3847:3871  OwnableStorage storage $ */\n      0x00\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3837:4022  {... */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n    tag_123:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1993:1997  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2045:2049  root */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      tag_149\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2029:2034  proof */\n      dup6\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2036:2040  leaf */\n      dup5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2028  processProof */\n      tag_150\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      jump\t// in\n    tag_149:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2049  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":3258:3618  function convertUsdToEth(... */\n    tag_126:\n        /* \"src/ScholarshipDispenser.sol\":3346:3353  uint256 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3368:3380  int256 price */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3390:3399  priceFeed */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3390:3415  priceFeed.latestRoundData */\n      and\n      0xfeaf968c\n        /* \"src/ScholarshipDispenser.sol\":3390:3417  priceFeed.latestRoundData() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xa0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_153:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_154\n      swap2\n      swap1\n      tag_155\n      jump\t// in\n    tag_154:\n        /* \"src/ScholarshipDispenser.sol\":3365:3417  (, int256 price, , , ) = priceFeed.latestRoundData() */\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3443:3444  0 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3435:3440  price */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3435:3444  price > 0 */\n      sgt\n        /* \"src/ScholarshipDispenser.sol\":3427:3469  require(price > 0, InvalidPriceFeedData()) */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x96187bd5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_156:\n        /* \"src/ScholarshipDispenser.sol\":3605:3610  price */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":3566:3592  usdAmountInCents * 10 ** 6 */\n      tag_157\n        /* \"src/ScholarshipDispenser.sol\":3566:3582  usdAmountInCents */\n      dup5\n        /* \"src/ScholarshipDispenser.sol\":3585:3592  10 ** 6 */\n      0x0f4240\n        /* \"src/ScholarshipDispenser.sol\":3566:3592  usdAmountInCents * 10 ** 6 */\n      tag_158\n      jump\t// in\n    tag_157:\n        /* \"src/ScholarshipDispenser.sol\":3555:3593  1 ether * (usdAmountInCents * 10 ** 6) */\n      tag_159\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3555:3562  1 ether */\n      0x0de0b6b3a7640000\n        /* \"src/ScholarshipDispenser.sol\":3555:3593  1 ether * (usdAmountInCents * 10 ** 6) */\n      tag_158\n      jump\t// in\n    tag_159:\n        /* \"src/ScholarshipDispenser.sol\":3554:3611  (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price) */\n      tag_160\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"src/ScholarshipDispenser.sol\":3547:3611  return (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price) */\n      swap4\n        /* \"src/ScholarshipDispenser.sol\":3258:3618  function convertUsdToEth(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7082:7223  function _checkInitializing() internal view virtual {... */\n    tag_141:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      tag_164\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7164  _isInitializing */\n      tag_165\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      jump\t// in\n    tag_164:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7144:7217  if (!_isInitializing()) {... */\n      tag_71\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7189:7206  NotInitializing() */\n      mload(0x40)\n      shl(0xe3, 0x1afcd79f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_144:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_111\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_141\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_150:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2540:2547  bytes32 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2582:2586  leaf */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2540:2547  bytes32 */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_174:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2620:2625  proof */\n      dup5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2620:2632  proof.length */\n      mload\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2617  i */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2632  i < proof.length */\n      lt\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_175\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      tag_177\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2696:2708  computedHash */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2710:2715  proof */\n      dup7\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2716:2717  i */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2710:2718  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_179\n      jumpi\n      tag_179\n      tag_180\n      jump\t// in\n    tag_179:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2695  Hashes.commutativeKeccak256 */\n      tag_181\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      jump\t// in\n    tag_177:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2653:2719  computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2634:2637  i++ */\n      0x01\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_174)\n    tag_175:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2746:2758  computedHash */\n      swap4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n    tag_165:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8535:8539  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      tag_183\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8582  _getInitializableStorage */\n      tag_86\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      jump\t// in\n    tag_183:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8598  _getInitializableStorage()._initializing */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xff\n      and\n      swap2\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n    tag_181:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":579:586  bytes32 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":609:610  b */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:606  a */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:610  a < b */\n      lt\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      tag_185\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":864:877  bytes32 value */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":928:943  mstore(0x00, a) */\n      dup3\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":963:967  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":956:971  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":1009:1013  0x40 */\n      0x40\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":993:1014  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      jump(tag_160)\n    tag_185:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":864:877  bytes32 value */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":928:943  mstore(0x00, a) */\n      swap2\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":963:967  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":956:971  mstore(0x20, b) */\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":1009:1013  0x40 */\n      0x40\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":993:1014  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n      jump\t// out\n        /* \"#utility.yul\":196:369   */\n    tag_191:\n        /* \"#utility.yul\":264:284   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":313:344   */\n      dup2\n      and\n        /* \"#utility.yul\":303:345   */\n      dup2\n      eq\n        /* \"#utility.yul\":293:363   */\n      tag_196\n      jumpi\n        /* \"#utility.yul\":359:360   */\n      0x00\n        /* \"#utility.yul\":356:357   */\n      0x00\n        /* \"#utility.yul\":349:361   */\n      revert\n        /* \"#utility.yul\":293:363   */\n    tag_196:\n        /* \"#utility.yul\":196:369   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":374:560   */\n    tag_24:\n        /* \"#utility.yul\":433:439   */\n      0x00\n        /* \"#utility.yul\":486:488   */\n      0x20\n        /* \"#utility.yul\":474:483   */\n      dup3\n        /* \"#utility.yul\":465:472   */\n      dup5\n        /* \"#utility.yul\":461:484   */\n      sub\n        /* \"#utility.yul\":457:489   */\n      slt\n        /* \"#utility.yul\":454:506   */\n      iszero\n      tag_198\n      jumpi\n        /* \"#utility.yul\":502:503   */\n      0x00\n        /* \"#utility.yul\":499:500   */\n      0x00\n        /* \"#utility.yul\":492:504   */\n      revert\n        /* \"#utility.yul\":454:506   */\n    tag_198:\n        /* \"#utility.yul\":525:554   */\n      tag_160\n        /* \"#utility.yul\":544:553   */\n      dup3\n        /* \"#utility.yul\":525:554   */\n      tag_191\n      jump\t// in\n        /* \"#utility.yul\":939:1336   */\n    tag_39:\n        /* \"#utility.yul\":1025:1031   */\n      0x00\n        /* \"#utility.yul\":1033:1039   */\n      0x00\n        /* \"#utility.yul\":1041:1047   */\n      0x00\n        /* \"#utility.yul\":1049:1055   */\n      0x00\n        /* \"#utility.yul\":1102:1105   */\n      0x80\n        /* \"#utility.yul\":1090:1099   */\n      dup6\n        /* \"#utility.yul\":1081:1088   */\n      dup8\n        /* \"#utility.yul\":1077:1100   */\n      sub\n        /* \"#utility.yul\":1073:1106   */\n      slt\n        /* \"#utility.yul\":1070:1123   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":1119:1120   */\n      0x00\n        /* \"#utility.yul\":1116:1117   */\n      0x00\n        /* \"#utility.yul\":1109:1121   */\n      revert\n        /* \"#utility.yul\":1070:1123   */\n    tag_203:\n        /* \"#utility.yul\":1142:1171   */\n      tag_204\n        /* \"#utility.yul\":1161:1170   */\n      dup6\n        /* \"#utility.yul\":1142:1171   */\n      tag_191\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":1132:1171   */\n      swap4\n      pop\n        /* \"#utility.yul\":1218:1220   */\n      0x20\n        /* \"#utility.yul\":1207:1216   */\n      dup6\n        /* \"#utility.yul\":1203:1221   */\n      add\n        /* \"#utility.yul\":1190:1222   */\n      calldataload\n        /* \"#utility.yul\":1180:1222   */\n      swap3\n      pop\n        /* \"#utility.yul\":1241:1279   */\n      tag_205\n        /* \"#utility.yul\":1275:1277   */\n      0x40\n        /* \"#utility.yul\":1264:1273   */\n      dup7\n        /* \"#utility.yul\":1260:1278   */\n      add\n        /* \"#utility.yul\":1241:1279   */\n      tag_191\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":939:1336   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n        /* \"#utility.yul\":1231:1279   */\n      swap3\n      swap4\n        /* \"#utility.yul\":1326:1328   */\n      0x60\n        /* \"#utility.yul\":1311:1329   */\n      add\n        /* \"#utility.yul\":1298:1330   */\n      calldataload\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":939:1336   */\n      jump\t// out\n        /* \"#utility.yul\":1785:2395   */\n    tag_65:\n        /* \"#utility.yul\":1871:1877   */\n      0x00\n        /* \"#utility.yul\":1879:1885   */\n      0x00\n        /* \"#utility.yul\":1932:1934   */\n      0x20\n        /* \"#utility.yul\":1920:1929   */\n      dup4\n        /* \"#utility.yul\":1911:1918   */\n      dup6\n        /* \"#utility.yul\":1907:1930   */\n      sub\n        /* \"#utility.yul\":1903:1935   */\n      slt\n        /* \"#utility.yul\":1900:1952   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":1948:1949   */\n      0x00\n        /* \"#utility.yul\":1945:1946   */\n      0x00\n        /* \"#utility.yul\":1938:1950   */\n      revert\n        /* \"#utility.yul\":1900:1952   */\n    tag_209:\n        /* \"#utility.yul\":1988:1997   */\n      dup3\n        /* \"#utility.yul\":1975:1998   */\n      calldataload\n        /* \"#utility.yul\":2021:2039   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2013:2019   */\n      dup2\n        /* \"#utility.yul\":2010:2040   */\n      gt\n        /* \"#utility.yul\":2007:2057   */\n      iszero\n      tag_210\n      jumpi\n        /* \"#utility.yul\":2053:2054   */\n      0x00\n        /* \"#utility.yul\":2050:2051   */\n      0x00\n        /* \"#utility.yul\":2043:2055   */\n      revert\n        /* \"#utility.yul\":2007:2057   */\n    tag_210:\n        /* \"#utility.yul\":2076:2098   */\n      dup4\n      add\n        /* \"#utility.yul\":2129:2133   */\n      0x1f\n        /* \"#utility.yul\":2121:2134   */\n      dup2\n      add\n        /* \"#utility.yul\":2117:2144   */\n      dup6\n      sgt\n        /* \"#utility.yul\":2107:2162   */\n      tag_211\n      jumpi\n        /* \"#utility.yul\":2158:2159   */\n      0x00\n        /* \"#utility.yul\":2155:2156   */\n      0x00\n        /* \"#utility.yul\":2148:2160   */\n      revert\n        /* \"#utility.yul\":2107:2162   */\n    tag_211:\n        /* \"#utility.yul\":2198:2200   */\n      dup1\n        /* \"#utility.yul\":2185:2201   */\n      calldataload\n        /* \"#utility.yul\":2224:2242   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2216:2222   */\n      dup2\n        /* \"#utility.yul\":2213:2243   */\n      gt\n        /* \"#utility.yul\":2210:2260   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":2256:2257   */\n      0x00\n        /* \"#utility.yul\":2253:2254   */\n      0x00\n        /* \"#utility.yul\":2246:2258   */\n      revert\n        /* \"#utility.yul\":2210:2260   */\n    tag_212:\n        /* \"#utility.yul\":2309:2316   */\n      dup6\n        /* \"#utility.yul\":2304:2306   */\n      0x20\n        /* \"#utility.yul\":2294:2300   */\n      dup3\n        /* \"#utility.yul\":2291:2292   */\n      0x05\n        /* \"#utility.yul\":2287:2301   */\n      shl\n        /* \"#utility.yul\":2283:2285   */\n      dup5\n        /* \"#utility.yul\":2279:2302   */\n      add\n        /* \"#utility.yul\":2275:2307   */\n      add\n        /* \"#utility.yul\":2272:2317   */\n      gt\n        /* \"#utility.yul\":2269:2334   */\n      iszero\n      tag_213\n      jumpi\n        /* \"#utility.yul\":2330:2331   */\n      0x00\n        /* \"#utility.yul\":2327:2328   */\n      0x00\n        /* \"#utility.yul\":2320:2332   */\n      revert\n        /* \"#utility.yul\":2269:2334   */\n    tag_213:\n        /* \"#utility.yul\":2361:2363   */\n      0x20\n        /* \"#utility.yul\":2353:2364   */\n      swap2\n      swap1\n      swap2\n      add\n      swap6\n        /* \"#utility.yul\":2383:2389   */\n      swap1\n      swap5\n      pop\n        /* \"#utility.yul\":1785:2395   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3543:3722   */\n    tag_192:\n        /* \"#utility.yul\":3621:3634   */\n      dup1\n      mload\n        /* \"#utility.yul\":3674:3696   */\n      0xffffffffffffffffffff\n        /* \"#utility.yul\":3663:3697   */\n      dup2\n      and\n        /* \"#utility.yul\":3653:3698   */\n      dup2\n      eq\n        /* \"#utility.yul\":3643:3716   */\n      tag_196\n      jumpi\n        /* \"#utility.yul\":3712:3713   */\n      0x00\n        /* \"#utility.yul\":3709:3710   */\n      0x00\n        /* \"#utility.yul\":3702:3714   */\n      revert\n        /* \"#utility.yul\":3727:4298   */\n    tag_155:\n        /* \"#utility.yul\":3830:3836   */\n      0x00\n        /* \"#utility.yul\":3838:3844   */\n      0x00\n        /* \"#utility.yul\":3846:3852   */\n      0x00\n        /* \"#utility.yul\":3854:3860   */\n      0x00\n        /* \"#utility.yul\":3862:3868   */\n      0x00\n        /* \"#utility.yul\":3915:3918   */\n      0xa0\n        /* \"#utility.yul\":3903:3912   */\n      dup7\n        /* \"#utility.yul\":3894:3901   */\n      dup9\n        /* \"#utility.yul\":3890:3913   */\n      sub\n        /* \"#utility.yul\":3886:3919   */\n      slt\n        /* \"#utility.yul\":3883:3936   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":3932:3933   */\n      0x00\n        /* \"#utility.yul\":3929:3930   */\n      0x00\n        /* \"#utility.yul\":3922:3934   */\n      revert\n        /* \"#utility.yul\":3883:3936   */\n    tag_222:\n        /* \"#utility.yul\":3955:3994   */\n      tag_223\n        /* \"#utility.yul\":3984:3993   */\n      dup7\n        /* \"#utility.yul\":3955:3994   */\n      tag_192\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":4034:4036   */\n      0x20\n        /* \"#utility.yul\":4019:4037   */\n      dup8\n      add\n        /* \"#utility.yul\":4013:4038   */\n      mload\n        /* \"#utility.yul\":4100:4102   */\n      0x40\n        /* \"#utility.yul\":4085:4103   */\n      dup9\n      add\n        /* \"#utility.yul\":4079:4104   */\n      mload\n        /* \"#utility.yul\":4194:4196   */\n      0x60\n        /* \"#utility.yul\":4179:4197   */\n      dup10\n      add\n        /* \"#utility.yul\":4173:4198   */\n      mload\n        /* \"#utility.yul\":3945:3994   */\n      swap3\n      swap8\n      pop\n        /* \"#utility.yul\":4013:4038   */\n      swap1\n      swap6\n      pop\n        /* \"#utility.yul\":4079:4104   */\n      swap4\n      pop\n        /* \"#utility.yul\":4173:4198   */\n      swap2\n      pop\n        /* \"#utility.yul\":4243:4292   */\n      tag_224\n        /* \"#utility.yul\":4287:4290   */\n      0x80\n        /* \"#utility.yul\":4272:4291   */\n      dup8\n      add\n        /* \"#utility.yul\":4243:4292   */\n      tag_192\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":4233:4292   */\n      swap1\n      pop\n        /* \"#utility.yul\":3727:4298   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4303:4568   */\n    tag_158:\n        /* \"#utility.yul\":4376:4385   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":4407:4416   */\n      dup2\n      iszero\n        /* \"#utility.yul\":4424:4439   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":4418:4440   */\n      dup5\n      eq\n        /* \"#utility.yul\":4404:4441   */\n      or\n        /* \"#utility.yul\":4394:4562   */\n      tag_137\n      jumpi\n        /* \"#utility.yul\":4484:4494   */\n      0x4e487b71\n        /* \"#utility.yul\":4479:4482   */\n      0xe0\n        /* \"#utility.yul\":4475:4495   */\n      shl\n        /* \"#utility.yul\":4472:4473   */\n      0x00\n        /* \"#utility.yul\":4465:4496   */\n      mstore\n        /* \"#utility.yul\":4519:4523   */\n      0x11\n        /* \"#utility.yul\":4516:4517   */\n      0x04\n        /* \"#utility.yul\":4509:4524   */\n      mstore\n        /* \"#utility.yul\":4547:4551   */\n      0x24\n        /* \"#utility.yul\":4544:4545   */\n      0x00\n        /* \"#utility.yul\":4537:4552   */\n      revert\n        /* \"#utility.yul\":4573:4790   */\n    tag_161:\n        /* \"#utility.yul\":4613:4614   */\n      0x00\n        /* \"#utility.yul\":4639:4640   */\n      dup3\n        /* \"#utility.yul\":4629:4761   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":4683:4693   */\n      0x4e487b71\n        /* \"#utility.yul\":4678:4681   */\n      0xe0\n        /* \"#utility.yul\":4674:4694   */\n      shl\n        /* \"#utility.yul\":4671:4672   */\n      0x00\n        /* \"#utility.yul\":4664:4695   */\n      mstore\n        /* \"#utility.yul\":4718:4722   */\n      0x12\n        /* \"#utility.yul\":4715:4716   */\n      0x04\n        /* \"#utility.yul\":4708:4723   */\n      mstore\n        /* \"#utility.yul\":4746:4750   */\n      0x24\n        /* \"#utility.yul\":4743:4744   */\n      0x00\n        /* \"#utility.yul\":4736:4751   */\n      revert\n        /* \"#utility.yul\":4629:4761   */\n    tag_228:\n      pop\n        /* \"#utility.yul\":4775:4784   */\n      div\n      swap1\n        /* \"#utility.yul\":4573:4790   */\n      jump\t// out\n        /* \"#utility.yul\":4795:4922   */\n    tag_180:\n        /* \"#utility.yul\":4856:4866   */\n      0x4e487b71\n        /* \"#utility.yul\":4851:4854   */\n      0xe0\n        /* \"#utility.yul\":4847:4867   */\n      shl\n        /* \"#utility.yul\":4844:4845   */\n      0x00\n        /* \"#utility.yul\":4837:4868   */\n      mstore\n        /* \"#utility.yul\":4887:4891   */\n      0x32\n        /* \"#utility.yul\":4884:4885   */\n      0x04\n        /* \"#utility.yul\":4877:4892   */\n      mstore\n        /* \"#utility.yul\":4911:4915   */\n      0x24\n        /* \"#utility.yul\":4908:4909   */\n      0x00\n        /* \"#utility.yul\":4901:4916   */\n      revert\n\n    auxdata: 0xa26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2432": {
									"entryPoint": null,
									"id": 2432,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_462": {
									"entryPoint": 25,
									"id": 462,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_507": {
									"entryPoint": null,
									"id": 507,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initializableStorageSlot_493": {
									"entryPoint": null,
									"id": 493,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:216:13",
										"nodeType": "YulBlock",
										"src": "0:216:13",
										"statements": [
											{
												"nativeSrc": "6:3:13",
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "113:101:13",
													"nodeType": "YulBlock",
													"src": "113:101:13",
													"statements": [
														{
															"nativeSrc": "123:26:13",
															"nodeType": "YulAssignment",
															"src": "123:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "135:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "135:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "146:2:13",
																		"nodeType": "YulLiteral",
																		"src": "146:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "131:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "131:3:13"
																},
																"nativeSrc": "131:18:13",
																"nodeType": "YulFunctionCall",
																"src": "131:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "123:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "123:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "165:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "165:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "180:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "180:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "196:2:13",
																								"nodeType": "YulLiteral",
																								"src": "196:2:13",
																								"type": "",
																								"value": "64"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "200:1:13",
																								"nodeType": "YulLiteral",
																								"src": "200:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "192:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "192:3:13"
																						},
																						"nativeSrc": "192:10:13",
																						"nodeType": "YulFunctionCall",
																						"src": "192:10:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "204:1:13",
																						"nodeType": "YulLiteral",
																						"src": "204:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "188:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "188:3:13"
																				},
																				"nativeSrc": "188:18:13",
																				"nodeType": "YulFunctionCall",
																				"src": "188:18:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "176:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "176:3:13"
																		},
																		"nativeSrc": "176:31:13",
																		"nodeType": "YulFunctionCall",
																		"src": "176:31:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "158:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "158:6:13"
																},
																"nativeSrc": "158:50:13",
																"nodeType": "YulFunctionCall",
																"src": "158:50:13"
															},
															"nativeSrc": "158:50:13",
															"nodeType": "YulExpressionStatement",
															"src": "158:50:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nativeSrc": "14:200:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "82:9:13",
														"nodeType": "YulTypedName",
														"src": "82:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "93:6:13",
														"nodeType": "YulTypedName",
														"src": "93:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "104:4:13",
														"nodeType": "YulTypedName",
														"src": "104:4:13",
														"type": ""
													}
												],
												"src": "14:200:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b5060156019565b60c9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560685760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c65780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b610b52806100d65f395ff3fe608060405260043610610092575f3560e01c8063741bef1a11610057578063741bef1a146101895780638da5cb5b146101c0578063e65bf545146101fc578063f2fde38b14610210578063f32ae7dd1461022f575f5ffd5b806326317008146100da5780632eb4a7ab1461011d5780633ccfd60b146101405780635f76167514610156578063715018a614610175575f5ffd5b366100d65761009f61024e565b60405134815233907f9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b8429060200160405180910390a2005b5f5ffd5b3480156100e5575f5ffd5b506101086100f4366004610994565b60036020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610128575f5ffd5b5061013260025481565b604051908152602001610114565b34801561014b575f5ffd5b506101546102b0565b005b348015610161575f5ffd5b506101546101703660046109ad565b610359565b348015610180575f5ffd5b50610154610505565b348015610194575f5ffd5b506001546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610114565b3480156101cb575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101a8565b348015610207575f5ffd5b506101325f5481565b34801561021b575f5ffd5b5061015461022a366004610994565b610516565b34801561023a575f5ffd5b506101546102493660046109ee565b610553565b336102807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102ae5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b6102b861024e565b60405147905f90339083908381818185875af1925050503d805f81146102f9576040519150601f19603f3d011682016040523d82523d5f602084013e6102fe565b606091505b50509050806103205760405163b12d13eb60e01b815260040160405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b5f61036261073b565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103895750825b90505f8267ffffffffffffffff1660011480156103a55750303b155b9050811580156103b3575080155b156103d15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103fb57845460ff60401b1916600160401b1785555b6001600160a01b0389166104225760405163074f166b60e31b815260040160405180910390fd5b5f8811610442576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0387166104695760405163e358806360e01b815260040160405180910390fd5b8561048757604051639dd854d360e01b815260040160405180910390fd5b61049089610765565b5f889055600180546001600160a01b0319166001600160a01b038916179055600286905583156104fa57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61050d61024e565b6102ae5f610776565b61051e61024e565b6001600160a01b03811661054757604051631e4fbdf760e01b81525f60048201526024016102a5565b61055081610776565b50565b335f8181526003602052604090205460ff1615610582576040516293f5a160e01b815260040160405180910390fd5b5f8054604080516001600160a01b03851660208201529081019190915260600160405160208183030381529060405280519060200120905061061c8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002546040805160208101889052919350019050604051602081830303815290604052805190602001206107e6565b6106395760405163582f497d60e11b815260040160405180910390fd5b5f6106445f546107fb565b9050804710156106675760405163786e0a9960e01b815260040160405180910390fd5b6001600160a01b0383165f81815260036020526040808220805460ff191660011790555190919083908381818185875af1925050503d805f81146106c6576040519150601f19603f3d011682016040523d82523d5f602084013e6106cb565b606091505b50509050806106ed5760405163b12d13eb60e01b815260040160405180910390fd5b5f5460408051918252602082018490526001600160a01b038616917f4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a910160405180910390a2505050505050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b61076d6108c8565b610550816108ed565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f826107f285846108f5565b14949350505050565b5f5f60015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561084d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108719190610a78565b5050509150505f8113610897576040516396187bd560e01b815260040160405180910390fd5b806108a584620f4240610ac6565b6108b790670de0b6b3a7640000610ac6565b6108c19190610ae9565b9392505050565b6108d0610937565b6102ae57604051631afcd79f60e31b815260040160405180910390fd5b61051e6108c8565b5f81815b845181101561092f576109258286838151811061091857610918610b08565b6020026020010151610950565b91506001016108f9565b509392505050565b5f61094061073b565b54600160401b900460ff16919050565b5f81831061096a575f8281526020849052604090206108c1565b505f9182526020526040902090565b80356001600160a01b038116811461098f575f5ffd5b919050565b5f602082840312156109a4575f5ffd5b6108c182610979565b5f5f5f5f608085870312156109c0575f5ffd5b6109c985610979565b9350602085013592506109de60408601610979565b9396929550929360600135925050565b5f5f602083850312156109ff575f5ffd5b823567ffffffffffffffff811115610a15575f5ffd5b8301601f81018513610a25575f5ffd5b803567ffffffffffffffff811115610a3b575f5ffd5b8560208260051b8401011115610a4f575f5ffd5b6020919091019590945092505050565b805169ffffffffffffffffffff8116811461098f575f5ffd5b5f5f5f5f5f60a08688031215610a8c575f5ffd5b610a9586610a5f565b60208701516040880151606089015192975090955093509150610aba60808701610a5f565b90509295509295909350565b808202811582820484141761075f57634e487b7160e01b5f52601160045260245ffd5b5f82610b0357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x15 PUSH1 0x19 JUMP JUMPDEST PUSH1 0xC9 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH9 0x10000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0x68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND EQ PUSH1 0xC6 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xB52 DUP1 PUSH2 0xD6 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x92 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x741BEF1A GT PUSH2 0x57 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xE65BF545 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF32AE7DD EQ PUSH2 0x22F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x26317008 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x5F761675 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x175 JUMPI PUSH0 PUSH0 REVERT JUMPDEST CALLDATASIZE PUSH2 0xD6 JUMPI PUSH2 0x9F PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x2B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x505 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x516 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST CALLER PUSH2 0x280 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x362 PUSH2 0x73B JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3A5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3B3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3FB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x422 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP9 GT PUSH2 0x442 JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x490 DUP10 PUSH2 0x765 JUMP JUMPDEST PUSH0 DUP9 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE PUSH1 0x2 DUP7 SWAP1 SSTORE DUP4 ISZERO PUSH2 0x4FA JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D PUSH2 0x24E JUMP JUMPDEST PUSH2 0x2AE PUSH0 PUSH2 0x776 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x24E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x776 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x93F5A1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x61C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x639 JUMPI PUSH1 0x40 MLOAD PUSH4 0x582F497D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x644 PUSH0 SLOAD PUSH2 0x7FB JUMP JUMPDEST SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH4 0x786E0A99 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6ED JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76D PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x7F2 DUP6 DUP5 PUSH2 0x8F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 DUP2 SGT PUSH2 0x897 JUMPI PUSH1 0x40 MLOAD PUSH4 0x96187BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x8A5 DUP5 PUSH3 0xF4240 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8C1 SWAP2 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E PUSH2 0x8C8 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH2 0x925 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x950 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8F9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x940 PUSH2 0x73B JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x96A JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x8C1 JUMP JUMPDEST POP PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x8C1 DUP3 PUSH2 0x979 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C9 DUP6 PUSH2 0x979 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x9DE PUSH1 0x40 DUP7 ADD PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA15 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA25 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xA4F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA8C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA95 DUP7 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xABA PUSH1 0x80 DUP8 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x75F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xB03 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY CREATE 0xAF 0xF7 0x26 0x23 EXTCODEHASH DUP7 PUSH6 0x610CB414E409 NUMBER 0xFB NUMBER TLOAD SSTORE PUSH15 0xE5B979A0AF1864612C80A864736F6C PUSH4 0x4300081C STOP CALLER ",
							"sourceMap": "368:3824:11:-:0;;;1292:53;;;;;;;;;-1:-1:-1;1316:22:11;:20;:22::i;:::-;368:3824;;7709:422:2;3147:66;7898:15;;;;;;;7894:76;;;7936:23;;-1:-1:-1;;;7936:23:2;;;;;;;;;;;7894:76;7983:14;;-1:-1:-1;;;;;7983:14:2;;;:34;7979:146;;8033:33;;-1:-1:-1;;;;;;8033:33:2;-1:-1:-1;;;;;8033:33:2;;;;;8085:29;;158:50:13;;;8085:29:2;;146:2:13;131:18;8085:29:2;;;;;;;7979:146;7758:373;7709:422::o;14:200:13:-;368:3824:11;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_2649": {
									"entryPoint": null,
									"id": 2649,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_100": {
									"entryPoint": 1893,
									"id": 100,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_127": {
									"entryPoint": 2285,
									"id": 127,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkInitializing_416": {
									"entryPoint": 2248,
									"id": 416,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_168": {
									"entryPoint": 590,
									"id": 168,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_507": {
									"entryPoint": 1851,
									"id": 507,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_71": {
									"entryPoint": null,
									"id": 71,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initializableStorageSlot_493": {
									"entryPoint": null,
									"id": 493,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_484": {
									"entryPoint": 2359,
									"id": 484,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_msgSender_536": {
									"entryPoint": null,
									"id": 536,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_239": {
									"entryPoint": 1910,
									"id": 239,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimStipend_2599": {
									"entryPoint": 1363,
									"id": 2599,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@claimedStipends_2386": {
									"entryPoint": null,
									"id": 2386,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@commutativeKeccak256_1279": {
									"entryPoint": 2384,
									"id": 1279,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@convertUsdToEth_2636": {
									"entryPoint": 2043,
									"id": 2636,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@efficientKeccak256_1291": {
									"entryPoint": null,
									"id": 1291,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_2506": {
									"entryPoint": 857,
									"id": 2506,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@merkleRoot_2382": {
									"entryPoint": null,
									"id": 2382,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_151": {
									"entryPoint": null,
									"id": 151,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@priceFeed_2380": {
									"entryPoint": null,
									"id": 2380,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_1362": {
									"entryPoint": 2293,
									"id": 1362,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceOwnership_182": {
									"entryPoint": 1285,
									"id": 182,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_210": {
									"entryPoint": 1302,
									"id": 210,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@usdStipendAmount_2377": {
									"entryPoint": null,
									"id": 2377,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verify_1321": {
									"entryPoint": 2022,
									"id": 1321,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_2685": {
									"entryPoint": 688,
									"id": 2685,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 2425,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2452,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_addresst_bytes32": {
									"entryPoint": 2477,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 2542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory": {
									"entryPoint": 2680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_uint80_fromMemory": {
									"entryPoint": 2655,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 2793,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2758,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 2824,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:4924:13",
										"nodeType": "YulBlock",
										"src": "0:4924:13",
										"statements": [
											{
												"nativeSrc": "6:3:13",
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "115:76:13",
													"nodeType": "YulBlock",
													"src": "115:76:13",
													"statements": [
														{
															"nativeSrc": "125:26:13",
															"nodeType": "YulAssignment",
															"src": "125:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "137:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "148:2:13",
																		"nodeType": "YulLiteral",
																		"src": "148:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "133:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:13"
																},
																"nativeSrc": "133:18:13",
																"nodeType": "YulFunctionCall",
																"src": "133:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "125:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "167:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "178:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "160:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:13"
																},
																"nativeSrc": "160:25:13",
																"nodeType": "YulFunctionCall",
																"src": "160:25:13"
															},
															"nativeSrc": "160:25:13",
															"nodeType": "YulExpressionStatement",
															"src": "160:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "14:177:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "84:9:13",
														"nodeType": "YulTypedName",
														"src": "84:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "95:6:13",
														"nodeType": "YulTypedName",
														"src": "95:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "106:4:13",
														"nodeType": "YulTypedName",
														"src": "106:4:13",
														"type": ""
													}
												],
												"src": "14:177:13"
											},
											{
												"body": {
													"nativeSrc": "245:124:13",
													"nodeType": "YulBlock",
													"src": "245:124:13",
													"statements": [
														{
															"nativeSrc": "255:29:13",
															"nodeType": "YulAssignment",
															"src": "255:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "277:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "277:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "264:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "264:12:13"
																},
																"nativeSrc": "264:20:13",
																"nodeType": "YulFunctionCall",
																"src": "264:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "255:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "255:5:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "347:16:13",
																"nodeType": "YulBlock",
																"src": "347:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "356:1:13",
																					"nodeType": "YulLiteral",
																					"src": "356:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "359:1:13",
																					"nodeType": "YulLiteral",
																					"src": "359:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "349:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "349:6:13"
																			},
																			"nativeSrc": "349:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "349:12:13"
																		},
																		"nativeSrc": "349:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "349:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "306:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "306:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "317:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "317:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "332:3:13",
																										"nodeType": "YulLiteral",
																										"src": "332:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "337:1:13",
																										"nodeType": "YulLiteral",
																										"src": "337:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "328:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "328:3:13"
																								},
																								"nativeSrc": "328:11:13",
																								"nodeType": "YulFunctionCall",
																								"src": "328:11:13"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "341:1:13",
																								"nodeType": "YulLiteral",
																								"src": "341:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "324:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "324:3:13"
																						},
																						"nativeSrc": "324:19:13",
																						"nodeType": "YulFunctionCall",
																						"src": "324:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "313:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "313:3:13"
																				},
																				"nativeSrc": "313:31:13",
																				"nodeType": "YulFunctionCall",
																				"src": "313:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "303:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "303:2:13"
																		},
																		"nativeSrc": "303:42:13",
																		"nodeType": "YulFunctionCall",
																		"src": "303:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "296:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "296:6:13"
																},
																"nativeSrc": "296:50:13",
																"nodeType": "YulFunctionCall",
																"src": "296:50:13"
															},
															"nativeSrc": "293:70:13",
															"nodeType": "YulIf",
															"src": "293:70:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "196:173:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "224:6:13",
														"nodeType": "YulTypedName",
														"src": "224:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "235:5:13",
														"nodeType": "YulTypedName",
														"src": "235:5:13",
														"type": ""
													}
												],
												"src": "196:173:13"
											},
											{
												"body": {
													"nativeSrc": "444:116:13",
													"nodeType": "YulBlock",
													"src": "444:116:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "490:16:13",
																"nodeType": "YulBlock",
																"src": "490:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "499:1:13",
																					"nodeType": "YulLiteral",
																					"src": "499:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "502:1:13",
																					"nodeType": "YulLiteral",
																					"src": "502:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "492:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "492:6:13"
																			},
																			"nativeSrc": "492:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "492:12:13"
																		},
																		"nativeSrc": "492:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "492:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "465:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "465:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "474:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "474:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "461:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "461:3:13"
																		},
																		"nativeSrc": "461:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "461:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "486:2:13",
																		"nodeType": "YulLiteral",
																		"src": "486:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "457:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "457:3:13"
																},
																"nativeSrc": "457:32:13",
																"nodeType": "YulFunctionCall",
																"src": "457:32:13"
															},
															"nativeSrc": "454:52:13",
															"nodeType": "YulIf",
															"src": "454:52:13"
														},
														{
															"nativeSrc": "515:39:13",
															"nodeType": "YulAssignment",
															"src": "515:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "544:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "544:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "525:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "525:18:13"
																},
																"nativeSrc": "525:29:13",
																"nodeType": "YulFunctionCall",
																"src": "525:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "515:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "515:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "374:186:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "410:9:13",
														"nodeType": "YulTypedName",
														"src": "410:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "421:7:13",
														"nodeType": "YulTypedName",
														"src": "421:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "433:6:13",
														"nodeType": "YulTypedName",
														"src": "433:6:13",
														"type": ""
													}
												],
												"src": "374:186:13"
											},
											{
												"body": {
													"nativeSrc": "660:92:13",
													"nodeType": "YulBlock",
													"src": "660:92:13",
													"statements": [
														{
															"nativeSrc": "670:26:13",
															"nodeType": "YulAssignment",
															"src": "670:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "682:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "682:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "693:2:13",
																		"nodeType": "YulLiteral",
																		"src": "693:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "678:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "678:3:13"
																},
																"nativeSrc": "678:18:13",
																"nodeType": "YulFunctionCall",
																"src": "678:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "670:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "670:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "712:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "712:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "737:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "737:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "730:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "730:6:13"
																				},
																				"nativeSrc": "730:14:13",
																				"nodeType": "YulFunctionCall",
																				"src": "730:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "723:6:13",
																			"nodeType": "YulIdentifier",
																			"src": "723:6:13"
																		},
																		"nativeSrc": "723:22:13",
																		"nodeType": "YulFunctionCall",
																		"src": "723:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "705:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "705:6:13"
																},
																"nativeSrc": "705:41:13",
																"nodeType": "YulFunctionCall",
																"src": "705:41:13"
															},
															"nativeSrc": "705:41:13",
															"nodeType": "YulExpressionStatement",
															"src": "705:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "565:187:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "629:9:13",
														"nodeType": "YulTypedName",
														"src": "629:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "640:6:13",
														"nodeType": "YulTypedName",
														"src": "640:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "651:4:13",
														"nodeType": "YulTypedName",
														"src": "651:4:13",
														"type": ""
													}
												],
												"src": "565:187:13"
											},
											{
												"body": {
													"nativeSrc": "858:76:13",
													"nodeType": "YulBlock",
													"src": "858:76:13",
													"statements": [
														{
															"nativeSrc": "868:26:13",
															"nodeType": "YulAssignment",
															"src": "868:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "880:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "880:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "891:2:13",
																		"nodeType": "YulLiteral",
																		"src": "891:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "876:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "876:3:13"
																},
																"nativeSrc": "876:18:13",
																"nodeType": "YulFunctionCall",
																"src": "876:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "868:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "868:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "910:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "910:9:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "921:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "921:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "903:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:13"
																},
																"nativeSrc": "903:25:13",
																"nodeType": "YulFunctionCall",
																"src": "903:25:13"
															},
															"nativeSrc": "903:25:13",
															"nodeType": "YulExpressionStatement",
															"src": "903:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "757:177:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "827:9:13",
														"nodeType": "YulTypedName",
														"src": "827:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "838:6:13",
														"nodeType": "YulTypedName",
														"src": "838:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "849:4:13",
														"nodeType": "YulTypedName",
														"src": "849:4:13",
														"type": ""
													}
												],
												"src": "757:177:13"
											},
											{
												"body": {
													"nativeSrc": "1060:276:13",
													"nodeType": "YulBlock",
													"src": "1060:276:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "1107:16:13",
																"nodeType": "YulBlock",
																"src": "1107:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1116:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1116:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1119:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1119:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1109:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1109:6:13"
																			},
																			"nativeSrc": "1109:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1109:12:13"
																		},
																		"nativeSrc": "1109:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "1109:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1081:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1081:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1090:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1090:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1077:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1077:3:13"
																		},
																		"nativeSrc": "1077:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1077:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1102:3:13",
																		"nodeType": "YulLiteral",
																		"src": "1102:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1073:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1073:3:13"
																},
																"nativeSrc": "1073:33:13",
																"nodeType": "YulFunctionCall",
																"src": "1073:33:13"
															},
															"nativeSrc": "1070:53:13",
															"nodeType": "YulIf",
															"src": "1070:53:13"
														},
														{
															"nativeSrc": "1132:39:13",
															"nodeType": "YulAssignment",
															"src": "1132:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1161:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1161:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1142:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "1142:18:13"
																},
																"nativeSrc": "1142:29:13",
																"nodeType": "YulFunctionCall",
																"src": "1142:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1132:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1132:6:13"
																}
															]
														},
														{
															"nativeSrc": "1180:42:13",
															"nodeType": "YulAssignment",
															"src": "1180:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1207:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1207:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1218:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1218:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1203:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1203:3:13"
																		},
																		"nativeSrc": "1203:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1203:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1190:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "1190:12:13"
																},
																"nativeSrc": "1190:32:13",
																"nodeType": "YulFunctionCall",
																"src": "1190:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1180:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1180:6:13"
																}
															]
														},
														{
															"nativeSrc": "1231:48:13",
															"nodeType": "YulAssignment",
															"src": "1231:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1264:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1264:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1275:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1275:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1260:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1260:3:13"
																		},
																		"nativeSrc": "1260:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1260:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1241:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "1241:18:13"
																},
																"nativeSrc": "1241:38:13",
																"nodeType": "YulFunctionCall",
																"src": "1241:38:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1231:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1231:6:13"
																}
															]
														},
														{
															"nativeSrc": "1288:42:13",
															"nodeType": "YulAssignment",
															"src": "1288:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1315:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1315:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1326:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1326:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1311:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1311:3:13"
																		},
																		"nativeSrc": "1311:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1311:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1298:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "1298:12:13"
																},
																"nativeSrc": "1298:32:13",
																"nodeType": "YulFunctionCall",
																"src": "1298:32:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "1288:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1288:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_addresst_bytes32",
												"nativeSrc": "939:397:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1002:9:13",
														"nodeType": "YulTypedName",
														"src": "1002:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1013:7:13",
														"nodeType": "YulTypedName",
														"src": "1013:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1025:6:13",
														"nodeType": "YulTypedName",
														"src": "1025:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1033:6:13",
														"nodeType": "YulTypedName",
														"src": "1033:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1041:6:13",
														"nodeType": "YulTypedName",
														"src": "1041:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "1049:6:13",
														"nodeType": "YulTypedName",
														"src": "1049:6:13",
														"type": ""
													}
												],
												"src": "939:397:13"
											},
											{
												"body": {
													"nativeSrc": "1470:102:13",
													"nodeType": "YulBlock",
													"src": "1470:102:13",
													"statements": [
														{
															"nativeSrc": "1480:26:13",
															"nodeType": "YulAssignment",
															"src": "1480:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1492:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1492:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1503:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1503:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1488:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1488:3:13"
																},
																"nativeSrc": "1488:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1488:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1480:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1480:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1522:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1522:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1537:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1537:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1553:3:13",
																								"nodeType": "YulLiteral",
																								"src": "1553:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1558:1:13",
																								"nodeType": "YulLiteral",
																								"src": "1558:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1549:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1549:3:13"
																						},
																						"nativeSrc": "1549:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "1549:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1562:1:13",
																						"nodeType": "YulLiteral",
																						"src": "1562:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1545:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1545:3:13"
																				},
																				"nativeSrc": "1545:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1545:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1533:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1533:3:13"
																		},
																		"nativeSrc": "1533:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1533:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1515:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1515:6:13"
																},
																"nativeSrc": "1515:51:13",
																"nodeType": "YulFunctionCall",
																"src": "1515:51:13"
															},
															"nativeSrc": "1515:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "1515:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed",
												"nativeSrc": "1341:231:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1439:9:13",
														"nodeType": "YulTypedName",
														"src": "1439:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1450:6:13",
														"nodeType": "YulTypedName",
														"src": "1450:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1461:4:13",
														"nodeType": "YulTypedName",
														"src": "1461:4:13",
														"type": ""
													}
												],
												"src": "1341:231:13"
											},
											{
												"body": {
													"nativeSrc": "1678:102:13",
													"nodeType": "YulBlock",
													"src": "1678:102:13",
													"statements": [
														{
															"nativeSrc": "1688:26:13",
															"nodeType": "YulAssignment",
															"src": "1688:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1700:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1700:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1711:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1711:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1696:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1696:3:13"
																},
																"nativeSrc": "1696:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1696:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1688:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1688:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1730:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1730:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1745:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1745:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1761:3:13",
																								"nodeType": "YulLiteral",
																								"src": "1761:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1766:1:13",
																								"nodeType": "YulLiteral",
																								"src": "1766:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1757:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1757:3:13"
																						},
																						"nativeSrc": "1757:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "1757:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1770:1:13",
																						"nodeType": "YulLiteral",
																						"src": "1770:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1753:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1753:3:13"
																				},
																				"nativeSrc": "1753:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1753:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1741:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1741:3:13"
																		},
																		"nativeSrc": "1741:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1741:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1723:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1723:6:13"
																},
																"nativeSrc": "1723:51:13",
																"nodeType": "YulFunctionCall",
																"src": "1723:51:13"
															},
															"nativeSrc": "1723:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "1723:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "1577:203:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1647:9:13",
														"nodeType": "YulTypedName",
														"src": "1647:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1658:6:13",
														"nodeType": "YulTypedName",
														"src": "1658:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1669:4:13",
														"nodeType": "YulTypedName",
														"src": "1669:4:13",
														"type": ""
													}
												],
												"src": "1577:203:13"
											},
											{
												"body": {
													"nativeSrc": "1890:505:13",
													"nodeType": "YulBlock",
													"src": "1890:505:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "1936:16:13",
																"nodeType": "YulBlock",
																"src": "1936:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1945:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1945:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1948:1:13",
																					"nodeType": "YulLiteral",
																					"src": "1948:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1938:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:13"
																			},
																			"nativeSrc": "1938:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "1938:12:13"
																		},
																		"nativeSrc": "1938:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "1938:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1911:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "1911:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1920:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1920:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1907:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1907:3:13"
																		},
																		"nativeSrc": "1907:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1907:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1932:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1903:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1903:3:13"
																},
																"nativeSrc": "1903:32:13",
																"nodeType": "YulFunctionCall",
																"src": "1903:32:13"
															},
															"nativeSrc": "1900:52:13",
															"nodeType": "YulIf",
															"src": "1900:52:13"
														},
														{
															"nativeSrc": "1961:37:13",
															"nodeType": "YulVariableDeclaration",
															"src": "1961:37:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1988:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1988:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1975:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "1975:12:13"
																},
																"nativeSrc": "1975:23:13",
																"nodeType": "YulFunctionCall",
																"src": "1975:23:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "1965:6:13",
																	"nodeType": "YulTypedName",
																	"src": "1965:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2041:16:13",
																"nodeType": "YulBlock",
																"src": "2041:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2050:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2050:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2053:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2053:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2043:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2043:6:13"
																			},
																			"nativeSrc": "2043:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2043:12:13"
																		},
																		"nativeSrc": "2043:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2043:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2013:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2013:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2021:18:13",
																		"nodeType": "YulLiteral",
																		"src": "2021:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2010:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "2010:2:13"
																},
																"nativeSrc": "2010:30:13",
																"nodeType": "YulFunctionCall",
																"src": "2010:30:13"
															},
															"nativeSrc": "2007:50:13",
															"nodeType": "YulIf",
															"src": "2007:50:13"
														},
														{
															"nativeSrc": "2066:32:13",
															"nodeType": "YulVariableDeclaration",
															"src": "2066:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2080:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2080:9:13"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "2091:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2091:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2076:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2076:3:13"
																},
																"nativeSrc": "2076:22:13",
																"nodeType": "YulFunctionCall",
																"src": "2076:22:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "2070:2:13",
																	"nodeType": "YulTypedName",
																	"src": "2070:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2146:16:13",
																"nodeType": "YulBlock",
																"src": "2146:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2155:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2155:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2158:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2158:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2148:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2148:6:13"
																			},
																			"nativeSrc": "2148:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2148:12:13"
																		},
																		"nativeSrc": "2148:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2148:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "2125:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "2125:2:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2129:4:13",
																						"nodeType": "YulLiteral",
																						"src": "2129:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2121:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "2121:3:13"
																				},
																				"nativeSrc": "2121:13:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2121:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2136:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "2136:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "2117:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2117:3:13"
																		},
																		"nativeSrc": "2117:27:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2117:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2110:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2110:6:13"
																},
																"nativeSrc": "2110:35:13",
																"nodeType": "YulFunctionCall",
																"src": "2110:35:13"
															},
															"nativeSrc": "2107:55:13",
															"nodeType": "YulIf",
															"src": "2107:55:13"
														},
														{
															"nativeSrc": "2171:30:13",
															"nodeType": "YulVariableDeclaration",
															"src": "2171:30:13",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "2198:2:13",
																		"nodeType": "YulIdentifier",
																		"src": "2198:2:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2185:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "2185:12:13"
																},
																"nativeSrc": "2185:16:13",
																"nodeType": "YulFunctionCall",
																"src": "2185:16:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "2175:6:13",
																	"nodeType": "YulTypedName",
																	"src": "2175:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2244:16:13",
																"nodeType": "YulBlock",
																"src": "2244:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2253:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2253:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2256:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2256:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2246:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2246:6:13"
																			},
																			"nativeSrc": "2246:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2246:12:13"
																		},
																		"nativeSrc": "2246:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2246:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2216:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2216:6:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2224:18:13",
																		"nodeType": "YulLiteral",
																		"src": "2224:18:13",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2213:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "2213:2:13"
																},
																"nativeSrc": "2213:30:13",
																"nodeType": "YulFunctionCall",
																"src": "2213:30:13"
															},
															"nativeSrc": "2210:50:13",
															"nodeType": "YulIf",
															"src": "2210:50:13"
														},
														{
															"body": {
																"nativeSrc": "2318:16:13",
																"nodeType": "YulBlock",
																"src": "2318:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2327:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2327:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2330:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2330:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2320:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2320:6:13"
																			},
																			"nativeSrc": "2320:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2320:12:13"
																		},
																		"nativeSrc": "2320:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "2320:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "2283:2:13",
																						"nodeType": "YulIdentifier",
																						"src": "2283:2:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2291:1:13",
																								"nodeType": "YulLiteral",
																								"src": "2291:1:13",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nativeSrc": "2294:6:13",
																								"nodeType": "YulIdentifier",
																								"src": "2294:6:13"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2287:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "2287:3:13"
																						},
																						"nativeSrc": "2287:14:13",
																						"nodeType": "YulFunctionCall",
																						"src": "2287:14:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2279:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "2279:3:13"
																				},
																				"nativeSrc": "2279:23:13",
																				"nodeType": "YulFunctionCall",
																				"src": "2279:23:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2304:2:13",
																				"nodeType": "YulLiteral",
																				"src": "2304:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2275:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2275:3:13"
																		},
																		"nativeSrc": "2275:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2275:32:13"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "2309:7:13",
																		"nodeType": "YulIdentifier",
																		"src": "2309:7:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2272:2:13",
																	"nodeType": "YulIdentifier",
																	"src": "2272:2:13"
																},
																"nativeSrc": "2272:45:13",
																"nodeType": "YulFunctionCall",
																"src": "2272:45:13"
															},
															"nativeSrc": "2269:65:13",
															"nodeType": "YulIf",
															"src": "2269:65:13"
														},
														{
															"nativeSrc": "2343:21:13",
															"nodeType": "YulAssignment",
															"src": "2343:21:13",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "2357:2:13",
																		"nodeType": "YulIdentifier",
																		"src": "2357:2:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2361:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2361:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2353:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2353:3:13"
																},
																"nativeSrc": "2353:11:13",
																"nodeType": "YulFunctionCall",
																"src": "2353:11:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2343:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2343:6:13"
																}
															]
														},
														{
															"nativeSrc": "2373:16:13",
															"nodeType": "YulAssignment",
															"src": "2373:16:13",
															"value": {
																"name": "length",
																"nativeSrc": "2383:6:13",
																"nodeType": "YulIdentifier",
																"src": "2383:6:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2373:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2373:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "1785:610:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1848:9:13",
														"nodeType": "YulTypedName",
														"src": "1848:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1859:7:13",
														"nodeType": "YulTypedName",
														"src": "1859:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1871:6:13",
														"nodeType": "YulTypedName",
														"src": "1871:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1879:6:13",
														"nodeType": "YulTypedName",
														"src": "1879:6:13",
														"type": ""
													}
												],
												"src": "1785:610:13"
											},
											{
												"body": {
													"nativeSrc": "2591:14:13",
													"nodeType": "YulBlock",
													"src": "2591:14:13",
													"statements": [
														{
															"nativeSrc": "2593:10:13",
															"nodeType": "YulAssignment",
															"src": "2593:10:13",
															"value": {
																"name": "pos",
																"nativeSrc": "2600:3:13",
																"nodeType": "YulIdentifier",
																"src": "2600:3:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "2593:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2593:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "2400:205:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "2575:3:13",
														"nodeType": "YulTypedName",
														"src": "2575:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "2583:3:13",
														"nodeType": "YulTypedName",
														"src": "2583:3:13",
														"type": ""
													}
												],
												"src": "2400:205:13"
											},
											{
												"body": {
													"nativeSrc": "2718:101:13",
													"nodeType": "YulBlock",
													"src": "2718:101:13",
													"statements": [
														{
															"nativeSrc": "2728:26:13",
															"nodeType": "YulAssignment",
															"src": "2728:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2740:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2740:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2751:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2751:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2736:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2736:3:13"
																},
																"nativeSrc": "2736:18:13",
																"nodeType": "YulFunctionCall",
																"src": "2736:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2728:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2728:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2770:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2770:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2785:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "2785:6:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2793:18:13",
																				"nodeType": "YulLiteral",
																				"src": "2793:18:13",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2781:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2781:3:13"
																		},
																		"nativeSrc": "2781:31:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2781:31:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2763:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2763:6:13"
																},
																"nativeSrc": "2763:50:13",
																"nodeType": "YulFunctionCall",
																"src": "2763:50:13"
															},
															"nativeSrc": "2763:50:13",
															"nodeType": "YulExpressionStatement",
															"src": "2763:50:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "2610:209:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2687:9:13",
														"nodeType": "YulTypedName",
														"src": "2687:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2698:6:13",
														"nodeType": "YulTypedName",
														"src": "2698:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2709:4:13",
														"nodeType": "YulTypedName",
														"src": "2709:4:13",
														"type": ""
													}
												],
												"src": "2610:209:13"
											},
											{
												"body": {
													"nativeSrc": "2953:145:13",
													"nodeType": "YulBlock",
													"src": "2953:145:13",
													"statements": [
														{
															"nativeSrc": "2963:26:13",
															"nodeType": "YulAssignment",
															"src": "2963:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2975:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2975:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2986:2:13",
																		"nodeType": "YulLiteral",
																		"src": "2986:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2971:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "2971:3:13"
																},
																"nativeSrc": "2971:18:13",
																"nodeType": "YulFunctionCall",
																"src": "2971:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2963:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "2963:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3005:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3005:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3020:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "3020:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3036:3:13",
																								"nodeType": "YulLiteral",
																								"src": "3036:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3041:1:13",
																								"nodeType": "YulLiteral",
																								"src": "3041:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3032:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "3032:3:13"
																						},
																						"nativeSrc": "3032:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "3032:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3045:1:13",
																						"nodeType": "YulLiteral",
																						"src": "3045:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3028:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3028:3:13"
																				},
																				"nativeSrc": "3028:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3028:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3016:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3016:3:13"
																		},
																		"nativeSrc": "3016:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3016:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2998:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2998:6:13"
																},
																"nativeSrc": "2998:51:13",
																"nodeType": "YulFunctionCall",
																"src": "2998:51:13"
															},
															"nativeSrc": "2998:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "2998:51:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3069:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3069:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3080:2:13",
																				"nodeType": "YulLiteral",
																				"src": "3080:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3065:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3065:3:13"
																		},
																		"nativeSrc": "3065:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3065:18:13"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3085:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3085:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3058:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3058:6:13"
																},
																"nativeSrc": "3058:34:13",
																"nodeType": "YulFunctionCall",
																"src": "3058:34:13"
															},
															"nativeSrc": "3058:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "3058:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "2824:274:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2914:9:13",
														"nodeType": "YulTypedName",
														"src": "2914:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2925:6:13",
														"nodeType": "YulTypedName",
														"src": "2925:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2933:6:13",
														"nodeType": "YulTypedName",
														"src": "2933:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2944:4:13",
														"nodeType": "YulTypedName",
														"src": "2944:4:13",
														"type": ""
													}
												],
												"src": "2824:274:13"
											},
											{
												"body": {
													"nativeSrc": "3222:63:13",
													"nodeType": "YulBlock",
													"src": "3222:63:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3239:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3239:3:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3244:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3244:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3232:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3232:6:13"
																},
																"nativeSrc": "3232:19:13",
																"nodeType": "YulFunctionCall",
																"src": "3232:19:13"
															},
															"nativeSrc": "3232:19:13",
															"nodeType": "YulExpressionStatement",
															"src": "3232:19:13"
														},
														{
															"nativeSrc": "3260:19:13",
															"nodeType": "YulAssignment",
															"src": "3260:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3271:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "3271:3:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3276:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3276:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3267:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3267:3:13"
																},
																"nativeSrc": "3267:12:13",
																"nodeType": "YulFunctionCall",
																"src": "3267:12:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "3260:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3260:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "3103:182:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "3198:3:13",
														"nodeType": "YulTypedName",
														"src": "3198:3:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3203:6:13",
														"nodeType": "YulTypedName",
														"src": "3203:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "3214:3:13",
														"nodeType": "YulTypedName",
														"src": "3214:3:13",
														"type": ""
													}
												],
												"src": "3103:182:13"
											},
											{
												"body": {
													"nativeSrc": "3419:119:13",
													"nodeType": "YulBlock",
													"src": "3419:119:13",
													"statements": [
														{
															"nativeSrc": "3429:26:13",
															"nodeType": "YulAssignment",
															"src": "3429:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3441:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3441:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3452:2:13",
																		"nodeType": "YulLiteral",
																		"src": "3452:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3437:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3437:3:13"
																},
																"nativeSrc": "3437:18:13",
																"nodeType": "YulFunctionCall",
																"src": "3437:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3429:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "3429:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3471:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3471:9:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3482:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3482:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3464:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3464:6:13"
																},
																"nativeSrc": "3464:25:13",
																"nodeType": "YulFunctionCall",
																"src": "3464:25:13"
															},
															"nativeSrc": "3464:25:13",
															"nodeType": "YulExpressionStatement",
															"src": "3464:25:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3509:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3520:2:13",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3505:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:13"
																		},
																		"nativeSrc": "3505:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:13"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3525:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3525:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3498:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:13"
																},
																"nativeSrc": "3498:34:13",
																"nodeType": "YulFunctionCall",
																"src": "3498:34:13"
															},
															"nativeSrc": "3498:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "3498:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "3290:248:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3380:9:13",
														"nodeType": "YulTypedName",
														"src": "3380:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3391:6:13",
														"nodeType": "YulTypedName",
														"src": "3391:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3399:6:13",
														"nodeType": "YulTypedName",
														"src": "3399:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3410:4:13",
														"nodeType": "YulTypedName",
														"src": "3410:4:13",
														"type": ""
													}
												],
												"src": "3290:248:13"
											},
											{
												"body": {
													"nativeSrc": "3602:120:13",
													"nodeType": "YulBlock",
													"src": "3602:120:13",
													"statements": [
														{
															"nativeSrc": "3612:22:13",
															"nodeType": "YulAssignment",
															"src": "3612:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3627:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "3627:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3621:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "3621:5:13"
																},
																"nativeSrc": "3621:13:13",
																"nodeType": "YulFunctionCall",
																"src": "3621:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3612:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "3612:5:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3700:16:13",
																"nodeType": "YulBlock",
																"src": "3700:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3709:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3709:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3712:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3712:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3702:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "3702:6:13"
																			},
																			"nativeSrc": "3702:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3702:12:13"
																		},
																		"nativeSrc": "3702:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "3702:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3656:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "3656:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3667:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "3667:5:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3674:22:13",
																						"nodeType": "YulLiteral",
																						"src": "3674:22:13",
																						"type": "",
																						"value": "0xffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "3663:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "3663:3:13"
																				},
																				"nativeSrc": "3663:34:13",
																				"nodeType": "YulFunctionCall",
																				"src": "3663:34:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "3653:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "3653:2:13"
																		},
																		"nativeSrc": "3653:45:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3653:45:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3646:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3646:6:13"
																},
																"nativeSrc": "3646:53:13",
																"nodeType": "YulFunctionCall",
																"src": "3646:53:13"
															},
															"nativeSrc": "3643:73:13",
															"nodeType": "YulIf",
															"src": "3643:73:13"
														}
													]
												},
												"name": "abi_decode_uint80_fromMemory",
												"nativeSrc": "3543:179:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3581:6:13",
														"nodeType": "YulTypedName",
														"src": "3581:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3592:5:13",
														"nodeType": "YulTypedName",
														"src": "3592:5:13",
														"type": ""
													}
												],
												"src": "3543:179:13"
											},
											{
												"body": {
													"nativeSrc": "3873:425:13",
													"nodeType": "YulBlock",
													"src": "3873:425:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "3920:16:13",
																"nodeType": "YulBlock",
																"src": "3920:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3929:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3929:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3932:1:13",
																					"nodeType": "YulLiteral",
																					"src": "3932:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3922:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "3922:6:13"
																			},
																			"nativeSrc": "3922:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "3922:12:13"
																		},
																		"nativeSrc": "3922:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "3922:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3894:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "3894:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3903:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "3903:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3890:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "3890:3:13"
																		},
																		"nativeSrc": "3890:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "3890:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3915:3:13",
																		"nodeType": "YulLiteral",
																		"src": "3915:3:13",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3886:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "3886:3:13"
																},
																"nativeSrc": "3886:33:13",
																"nodeType": "YulFunctionCall",
																"src": "3886:33:13"
															},
															"nativeSrc": "3883:53:13",
															"nodeType": "YulIf",
															"src": "3883:53:13"
														},
														{
															"nativeSrc": "3945:49:13",
															"nodeType": "YulAssignment",
															"src": "3945:49:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3984:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "3984:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint80_fromMemory",
																	"nativeSrc": "3955:28:13",
																	"nodeType": "YulIdentifier",
																	"src": "3955:28:13"
																},
																"nativeSrc": "3955:39:13",
																"nodeType": "YulFunctionCall",
																"src": "3955:39:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3945:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "3945:6:13"
																}
															]
														},
														{
															"nativeSrc": "4003:35:13",
															"nodeType": "YulAssignment",
															"src": "4003:35:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4023:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4023:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4034:2:13",
																				"nodeType": "YulLiteral",
																				"src": "4034:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4019:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4019:3:13"
																		},
																		"nativeSrc": "4019:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4019:18:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4013:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "4013:5:13"
																},
																"nativeSrc": "4013:25:13",
																"nodeType": "YulFunctionCall",
																"src": "4013:25:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4003:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4003:6:13"
																}
															]
														},
														{
															"nativeSrc": "4047:14:13",
															"nodeType": "YulVariableDeclaration",
															"src": "4047:14:13",
															"value": {
																"kind": "number",
																"nativeSrc": "4060:1:13",
																"nodeType": "YulLiteral",
																"src": "4060:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4051:5:13",
																	"nodeType": "YulTypedName",
																	"src": "4051:5:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4070:34:13",
															"nodeType": "YulAssignment",
															"src": "4070:34:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4089:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4089:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4100:2:13",
																				"nodeType": "YulLiteral",
																				"src": "4100:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4085:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4085:3:13"
																		},
																		"nativeSrc": "4085:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4085:18:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4079:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "4079:5:13"
																},
																"nativeSrc": "4079:25:13",
																"nodeType": "YulFunctionCall",
																"src": "4079:25:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4070:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "4070:5:13"
																}
															]
														},
														{
															"nativeSrc": "4113:15:13",
															"nodeType": "YulAssignment",
															"src": "4113:15:13",
															"value": {
																"name": "value",
																"nativeSrc": "4123:5:13",
																"nodeType": "YulIdentifier",
																"src": "4123:5:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "4113:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4113:6:13"
																}
															]
														},
														{
															"nativeSrc": "4137:16:13",
															"nodeType": "YulVariableDeclaration",
															"src": "4137:16:13",
															"value": {
																"kind": "number",
																"nativeSrc": "4152:1:13",
																"nodeType": "YulLiteral",
																"src": "4152:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "4141:7:13",
																	"nodeType": "YulTypedName",
																	"src": "4141:7:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4162:36:13",
															"nodeType": "YulAssignment",
															"src": "4162:36:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4183:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4183:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4194:2:13",
																				"nodeType": "YulLiteral",
																				"src": "4194:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4179:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4179:3:13"
																		},
																		"nativeSrc": "4179:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4179:18:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4173:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "4173:5:13"
																},
																"nativeSrc": "4173:25:13",
																"nodeType": "YulFunctionCall",
																"src": "4173:25:13"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "4162:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "4162:7:13"
																}
															]
														},
														{
															"nativeSrc": "4207:17:13",
															"nodeType": "YulAssignment",
															"src": "4207:17:13",
															"value": {
																"name": "value_1",
																"nativeSrc": "4217:7:13",
																"nodeType": "YulIdentifier",
																"src": "4217:7:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4207:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4207:6:13"
																}
															]
														},
														{
															"nativeSrc": "4233:59:13",
															"nodeType": "YulAssignment",
															"src": "4233:59:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4276:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "4276:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4287:3:13",
																				"nodeType": "YulLiteral",
																				"src": "4287:3:13",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4272:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4272:3:13"
																		},
																		"nativeSrc": "4272:19:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4272:19:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint80_fromMemory",
																	"nativeSrc": "4243:28:13",
																	"nodeType": "YulIdentifier",
																	"src": "4243:28:13"
																},
																"nativeSrc": "4243:49:13",
																"nodeType": "YulFunctionCall",
																"src": "4243:49:13"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4233:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4233:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory",
												"nativeSrc": "3727:571:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3807:9:13",
														"nodeType": "YulTypedName",
														"src": "3807:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3818:7:13",
														"nodeType": "YulTypedName",
														"src": "3818:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3830:6:13",
														"nodeType": "YulTypedName",
														"src": "3830:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3838:6:13",
														"nodeType": "YulTypedName",
														"src": "3838:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3846:6:13",
														"nodeType": "YulTypedName",
														"src": "3846:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3854:6:13",
														"nodeType": "YulTypedName",
														"src": "3854:6:13",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3862:6:13",
														"nodeType": "YulTypedName",
														"src": "3862:6:13",
														"type": ""
													}
												],
												"src": "3727:571:13"
											},
											{
												"body": {
													"nativeSrc": "4355:213:13",
													"nodeType": "YulBlock",
													"src": "4355:213:13",
													"statements": [
														{
															"nativeSrc": "4365:20:13",
															"nodeType": "YulAssignment",
															"src": "4365:20:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4380:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "4380:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4383:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "4383:1:13"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4376:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4376:3:13"
																},
																"nativeSrc": "4376:9:13",
																"nodeType": "YulFunctionCall",
																"src": "4376:9:13"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4365:7:13",
																	"nodeType": "YulIdentifier",
																	"src": "4365:7:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4451:111:13",
																"nodeType": "YulBlock",
																"src": "4451:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4472:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4472:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4479:3:13",
																							"nodeType": "YulLiteral",
																							"src": "4479:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4484:10:13",
																							"nodeType": "YulLiteral",
																							"src": "4484:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4475:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "4475:3:13"
																					},
																					"nativeSrc": "4475:20:13",
																					"nodeType": "YulFunctionCall",
																					"src": "4475:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4465:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4465:6:13"
																			},
																			"nativeSrc": "4465:31:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4465:31:13"
																		},
																		"nativeSrc": "4465:31:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4465:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4516:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4516:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4519:4:13",
																					"nodeType": "YulLiteral",
																					"src": "4519:4:13",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4509:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4509:6:13"
																			},
																			"nativeSrc": "4509:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4509:15:13"
																		},
																		"nativeSrc": "4509:15:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4509:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4544:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4544:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4547:4:13",
																					"nodeType": "YulLiteral",
																					"src": "4547:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4537:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4537:6:13"
																			},
																			"nativeSrc": "4537:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4537:15:13"
																		},
																		"nativeSrc": "4537:15:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4537:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4414:1:13",
																						"nodeType": "YulIdentifier",
																						"src": "4414:1:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4407:6:13",
																					"nodeType": "YulIdentifier",
																					"src": "4407:6:13"
																				},
																				"nativeSrc": "4407:9:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4407:9:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4421:1:13",
																						"nodeType": "YulIdentifier",
																						"src": "4421:1:13"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4428:7:13",
																								"nodeType": "YulIdentifier",
																								"src": "4428:7:13"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4437:1:13",
																								"nodeType": "YulIdentifier",
																								"src": "4437:1:13"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4424:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "4424:3:13"
																						},
																						"nativeSrc": "4424:15:13",
																						"nodeType": "YulFunctionCall",
																						"src": "4424:15:13"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4418:2:13",
																					"nodeType": "YulIdentifier",
																					"src": "4418:2:13"
																				},
																				"nativeSrc": "4418:22:13",
																				"nodeType": "YulFunctionCall",
																				"src": "4418:22:13"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4404:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "4404:2:13"
																		},
																		"nativeSrc": "4404:37:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4404:37:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4397:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4397:6:13"
																},
																"nativeSrc": "4397:45:13",
																"nodeType": "YulFunctionCall",
																"src": "4397:45:13"
															},
															"nativeSrc": "4394:168:13",
															"nodeType": "YulIf",
															"src": "4394:168:13"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4303:265:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4334:1:13",
														"nodeType": "YulTypedName",
														"src": "4334:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4337:1:13",
														"nodeType": "YulTypedName",
														"src": "4337:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4343:7:13",
														"nodeType": "YulTypedName",
														"src": "4343:7:13",
														"type": ""
													}
												],
												"src": "4303:265:13"
											},
											{
												"body": {
													"nativeSrc": "4619:171:13",
													"nodeType": "YulBlock",
													"src": "4619:171:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "4650:111:13",
																"nodeType": "YulBlock",
																"src": "4650:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4671:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4671:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4678:3:13",
																							"nodeType": "YulLiteral",
																							"src": "4678:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4683:10:13",
																							"nodeType": "YulLiteral",
																							"src": "4683:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4674:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "4674:3:13"
																					},
																					"nativeSrc": "4674:20:13",
																					"nodeType": "YulFunctionCall",
																					"src": "4674:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4664:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4664:6:13"
																			},
																			"nativeSrc": "4664:31:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4664:31:13"
																		},
																		"nativeSrc": "4664:31:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4664:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4715:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4715:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4718:4:13",
																					"nodeType": "YulLiteral",
																					"src": "4718:4:13",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4708:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4708:6:13"
																			},
																			"nativeSrc": "4708:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4708:15:13"
																		},
																		"nativeSrc": "4708:15:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4708:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4743:1:13",
																					"nodeType": "YulLiteral",
																					"src": "4743:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4746:4:13",
																					"nodeType": "YulLiteral",
																					"src": "4746:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4736:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "4736:6:13"
																			},
																			"nativeSrc": "4736:15:13",
																			"nodeType": "YulFunctionCall",
																			"src": "4736:15:13"
																		},
																		"nativeSrc": "4736:15:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "4736:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "4639:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "4639:1:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4632:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4632:6:13"
																},
																"nativeSrc": "4632:9:13",
																"nodeType": "YulFunctionCall",
																"src": "4632:9:13"
															},
															"nativeSrc": "4629:132:13",
															"nodeType": "YulIf",
															"src": "4629:132:13"
														},
														{
															"nativeSrc": "4770:14:13",
															"nodeType": "YulAssignment",
															"src": "4770:14:13",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4779:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "4779:1:13"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4782:1:13",
																		"nodeType": "YulIdentifier",
																		"src": "4782:1:13"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "4775:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "4775:3:13"
																},
																"nativeSrc": "4775:9:13",
																"nodeType": "YulFunctionCall",
																"src": "4775:9:13"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "4770:1:13",
																	"nodeType": "YulIdentifier",
																	"src": "4770:1:13"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "4573:217:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4604:1:13",
														"nodeType": "YulTypedName",
														"src": "4604:1:13",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4607:1:13",
														"nodeType": "YulTypedName",
														"src": "4607:1:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "4613:1:13",
														"nodeType": "YulTypedName",
														"src": "4613:1:13",
														"type": ""
													}
												],
												"src": "4573:217:13"
											},
											{
												"body": {
													"nativeSrc": "4827:95:13",
													"nodeType": "YulBlock",
													"src": "4827:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4844:1:13",
																		"nodeType": "YulLiteral",
																		"src": "4844:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4851:3:13",
																				"nodeType": "YulLiteral",
																				"src": "4851:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4856:10:13",
																				"nodeType": "YulLiteral",
																				"src": "4856:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "4847:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "4847:3:13"
																		},
																		"nativeSrc": "4847:20:13",
																		"nodeType": "YulFunctionCall",
																		"src": "4847:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4837:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4837:6:13"
																},
																"nativeSrc": "4837:31:13",
																"nodeType": "YulFunctionCall",
																"src": "4837:31:13"
															},
															"nativeSrc": "4837:31:13",
															"nodeType": "YulExpressionStatement",
															"src": "4837:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4884:1:13",
																		"nodeType": "YulLiteral",
																		"src": "4884:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4887:4:13",
																		"nodeType": "YulLiteral",
																		"src": "4887:4:13",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4877:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4877:6:13"
																},
																"nativeSrc": "4877:15:13",
																"nodeType": "YulFunctionCall",
																"src": "4877:15:13"
															},
															"nativeSrc": "4877:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "4877:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4908:1:13",
																		"nodeType": "YulLiteral",
																		"src": "4908:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4911:4:13",
																		"nodeType": "YulLiteral",
																		"src": "4911:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4901:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "4901:6:13"
																},
																"nativeSrc": "4901:15:13",
																"nodeType": "YulFunctionCall",
																"src": "4901:15:13"
															},
															"nativeSrc": "4901:15:13",
															"nodeType": "YulExpressionStatement",
															"src": "4901:15:13"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "4795:127:13",
												"nodeType": "YulFunctionDefinition",
												"src": "4795:127:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_uint80_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_uint80_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := 0\n        value := mload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := mload(add(headStart, 96))\n        value3 := value_1\n        value4 := abi_decode_uint80_fromMemory(add(headStart, 128))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x))))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405260043610610092575f3560e01c8063741bef1a11610057578063741bef1a146101895780638da5cb5b146101c0578063e65bf545146101fc578063f2fde38b14610210578063f32ae7dd1461022f575f5ffd5b806326317008146100da5780632eb4a7ab1461011d5780633ccfd60b146101405780635f76167514610156578063715018a614610175575f5ffd5b366100d65761009f61024e565b60405134815233907f9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b8429060200160405180910390a2005b5f5ffd5b3480156100e5575f5ffd5b506101086100f4366004610994565b60036020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610128575f5ffd5b5061013260025481565b604051908152602001610114565b34801561014b575f5ffd5b506101546102b0565b005b348015610161575f5ffd5b506101546101703660046109ad565b610359565b348015610180575f5ffd5b50610154610505565b348015610194575f5ffd5b506001546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610114565b3480156101cb575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101a8565b348015610207575f5ffd5b506101325f5481565b34801561021b575f5ffd5b5061015461022a366004610994565b610516565b34801561023a575f5ffd5b506101546102493660046109ee565b610553565b336102807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102ae5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b6102b861024e565b60405147905f90339083908381818185875af1925050503d805f81146102f9576040519150601f19603f3d011682016040523d82523d5f602084013e6102fe565b606091505b50509050806103205760405163b12d13eb60e01b815260040160405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b5f61036261073b565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103895750825b90505f8267ffffffffffffffff1660011480156103a55750303b155b9050811580156103b3575080155b156103d15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103fb57845460ff60401b1916600160401b1785555b6001600160a01b0389166104225760405163074f166b60e31b815260040160405180910390fd5b5f8811610442576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0387166104695760405163e358806360e01b815260040160405180910390fd5b8561048757604051639dd854d360e01b815260040160405180910390fd5b61049089610765565b5f889055600180546001600160a01b0319166001600160a01b038916179055600286905583156104fa57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61050d61024e565b6102ae5f610776565b61051e61024e565b6001600160a01b03811661054757604051631e4fbdf760e01b81525f60048201526024016102a5565b61055081610776565b50565b335f8181526003602052604090205460ff1615610582576040516293f5a160e01b815260040160405180910390fd5b5f8054604080516001600160a01b03851660208201529081019190915260600160405160208183030381529060405280519060200120905061061c8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002546040805160208101889052919350019050604051602081830303815290604052805190602001206107e6565b6106395760405163582f497d60e11b815260040160405180910390fd5b5f6106445f546107fb565b9050804710156106675760405163786e0a9960e01b815260040160405180910390fd5b6001600160a01b0383165f81815260036020526040808220805460ff191660011790555190919083908381818185875af1925050503d805f81146106c6576040519150601f19603f3d011682016040523d82523d5f602084013e6106cb565b606091505b50509050806106ed5760405163b12d13eb60e01b815260040160405180910390fd5b5f5460408051918252602082018490526001600160a01b038616917f4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a910160405180910390a2505050505050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b61076d6108c8565b610550816108ed565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f826107f285846108f5565b14949350505050565b5f5f60015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561084d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108719190610a78565b5050509150505f8113610897576040516396187bd560e01b815260040160405180910390fd5b806108a584620f4240610ac6565b6108b790670de0b6b3a7640000610ac6565b6108c19190610ae9565b9392505050565b6108d0610937565b6102ae57604051631afcd79f60e31b815260040160405180910390fd5b61051e6108c8565b5f81815b845181101561092f576109258286838151811061091857610918610b08565b6020026020010151610950565b91506001016108f9565b509392505050565b5f61094061073b565b54600160401b900460ff16919050565b5f81831061096a575f8281526020849052604090206108c1565b505f9182526020526040902090565b80356001600160a01b038116811461098f575f5ffd5b919050565b5f602082840312156109a4575f5ffd5b6108c182610979565b5f5f5f5f608085870312156109c0575f5ffd5b6109c985610979565b9350602085013592506109de60408601610979565b9396929550929360600135925050565b5f5f602083850312156109ff575f5ffd5b823567ffffffffffffffff811115610a15575f5ffd5b8301601f81018513610a25575f5ffd5b803567ffffffffffffffff811115610a3b575f5ffd5b8560208260051b8401011115610a4f575f5ffd5b6020919091019590945092505050565b805169ffffffffffffffffffff8116811461098f575f5ffd5b5f5f5f5f5f60a08688031215610a8c575f5ffd5b610a9586610a5f565b60208701516040880151606089015192975090955093509150610aba60808701610a5f565b90509295509295909350565b808202811582820484141761075f57634e487b7160e01b5f52601160045260245ffd5b5f82610b0357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x92 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x741BEF1A GT PUSH2 0x57 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xE65BF545 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF32AE7DD EQ PUSH2 0x22F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x26317008 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x5F761675 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x175 JUMPI PUSH0 PUSH0 REVERT JUMPDEST CALLDATASIZE PUSH2 0xD6 JUMPI PUSH2 0x9F PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x2B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x505 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x516 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST CALLER PUSH2 0x280 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x362 PUSH2 0x73B JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3A5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3B3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3FB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x422 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP9 GT PUSH2 0x442 JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x490 DUP10 PUSH2 0x765 JUMP JUMPDEST PUSH0 DUP9 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE PUSH1 0x2 DUP7 SWAP1 SSTORE DUP4 ISZERO PUSH2 0x4FA JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D PUSH2 0x24E JUMP JUMPDEST PUSH2 0x2AE PUSH0 PUSH2 0x776 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x24E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x776 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x93F5A1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x61C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x639 JUMPI PUSH1 0x40 MLOAD PUSH4 0x582F497D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x644 PUSH0 SLOAD PUSH2 0x7FB JUMP JUMPDEST SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH4 0x786E0A99 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6ED JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76D PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x7F2 DUP6 DUP5 PUSH2 0x8F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 DUP2 SGT PUSH2 0x897 JUMPI PUSH1 0x40 MLOAD PUSH4 0x96187BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x8A5 DUP5 PUSH3 0xF4240 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8C1 SWAP2 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E PUSH2 0x8C8 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH2 0x925 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x950 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8F9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x940 PUSH2 0x73B JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x96A JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x8C1 JUMP JUMPDEST POP PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x8C1 DUP3 PUSH2 0x979 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C9 DUP6 PUSH2 0x979 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x9DE PUSH1 0x40 DUP7 ADD PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA15 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA25 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xA4F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA8C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA95 DUP7 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xABA PUSH1 0x80 DUP8 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x75F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xB03 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY CREATE 0xAF 0xF7 0x26 0x23 EXTCODEHASH DUP7 PUSH6 0x610CB414E409 NUMBER 0xFB NUMBER TLOAD SSTORE PUSH15 0xE5B979A0AF1864612C80A864736F6C PUSH4 0x4300081C STOP CALLER ",
							"sourceMap": "368:3824:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2334:13:1;:11;:13::i;:::-;3795:51:11::1;::::0;3836:9:::1;160:25:13::0;;3824:10:11::1;::::0;3795:51:::1;::::0;148:2:13;133:18;3795:51:11::1;;;;;;;368:3824:::0;;;;;572:47;;;;;;;;;;-1:-1:-1;572:47:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;730:14:13;;723:22;705:41;;693:2;678:18;572:47:11;;;;;;;;541:25;;;;;;;;;;;;;;;;;;;160::13;;;148:2;133:18;541:25:11;14:177:13;3914:276:11;;;;;;;;;;;;;:::i;:::-;;1403:624;;;;;;;;;;-1:-1:-1;1403:624:11;;;;;:::i;:::-;;:::i;3155:101:1:-;;;;;;;;;;;;;:::i;497:38:11:-;;;;;;;;;;-1:-1:-1;497:38:11;;;;-1:-1:-1;;;;;497:38:11;;;;;;-1:-1:-1;;;;;1533:32:13;;;1515:51;;1503:2;1488:18;497:38:11;1341:231:13;2441:144:1;;;;;;;;;;-1:-1:-1;1313:22:1;2570:8;-1:-1:-1;;;;;2570:8:1;2441:144;;426:31:11;;;;;;;;;;;;;;;;3405:215:1;;;;;;;;;;-1:-1:-1;3405:215:1;;;;;:::i;:::-;;:::i;2240:1012:11:-;;;;;;;;;;-1:-1:-1;2240:1012:11;;;;;:::i;:::-;;:::i;2658:162:1:-;966:10:3;2717:7:1;1313:22;2570:8;-1:-1:-1;;;;;2570:8:1;;2441:144;2717:7;-1:-1:-1;;;;;2717:23:1;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:1;;966:10:3;2763:40:1;;;1515:51:13;1488:18;;2763:40:1;;;;;;;;2713:101;2658:162::o;3914:276:11:-;2334:13:1;:11;:13::i;:::-;4039:43:11::1;::::0;3989:21:::1;::::0;3963:23:::1;::::0;4039:10:::1;::::0;3989:21;;3963:23;4039:43;3963:23;4039:43;3989:21;4039:10;:43:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4020:62;;;4100:7;4092:37;;;;-1:-1:-1::0;;;4092:37:11::1;;;;;;;;;;;;4145:38;::::0;160:25:13;;;4155:10:11::1;::::0;4145:38:::1;::::0;148:2:13;133:18;4145:38:11::1;;;;;;;3953:237;;3914:276::o:0;1403:624::-;4158:30:2;4191:26;:24;:26::i;:::-;4302:15;;4158:59;;-1:-1:-1;4302:15:2;-1:-1:-1;;;4302:15:2;;;4301:16;;4348:14;;4279:19;4724:16;;:34;;;;;4744:14;4724:34;4704:54;;4768:17;4788:11;:16;;4803:1;4788:16;:50;;;;-1:-1:-1;4816:4:2;4808:25;:30;4788:50;4768:70;;4854:12;4853:13;:30;;;;;4871:12;4870:13;4853:30;4849:91;;;4906:23;;-1:-1:-1;;;4906:23:2;;;;;;;;;;;4849:91;4949:18;;-1:-1:-1;;4949:18:2;4966:1;4949:18;;;4977:67;;;;5011:22;;-1:-1:-1;;;;5011:22:2;-1:-1:-1;;;5011:22:2;;;4977:67;-1:-1:-1;;;;;1585:23:11;::::1;1577:58;;;;-1:-1:-1::0;;;1577:58:11::1;;;;;;;;;;;;1673:1;1653:17;:21;1645:68;;;;-1:-1:-1::0;;;1645:68:11::1;;;;;;;;;;;;-1:-1:-1::0;;;;;1731:24:11;::::1;1723:60;;;;-1:-1:-1::0;;;1723:60:11::1;;;;;;;;;;;;1801:11:::0;1793:55:::1;;;;-1:-1:-1::0;;;1793:55:11::1;;;;;;;;;;;;1859:25;1874:9;1859:14;:25::i;:::-;1895:16;:36:::0;;;1941:9:::1;:45:::0;;-1:-1:-1;;;;;;1941:45:11::1;-1:-1:-1::0;;;;;1941:45:11;::::1;;::::0;;1996:10:::1;:24:::0;;;5064:101:2;;;;5098:23;;-1:-1:-1;;;;5098:23:2;;;5140:14;;-1:-1:-1;2763:50:13;;5140:14:2;;2751:2:13;2736:18;5140:14:2;;;;;;;5064:101;4092:1079;;;;;1403:624:11;;;;:::o;3155:101:1:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;3405:215::-:0;2334:13;:11;:13::i;:::-;-1:-1:-1;;;;;3489:22:1;::::1;3485:91;;3534:31;::::0;-1:-1:-1;;;3534:31:1;;3562:1:::1;3534:31;::::0;::::1;1515:51:13::0;1488:18;;3534:31:1::1;1341:231:13::0;3485:91:1::1;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;2240:1012:11:-;2331:10;2313:15;2360:24;;;:15;:24;;;;;;;;2359:25;2351:59;;;;-1:-1:-1;;;2351:59:11;;;;;;;;;;;;2421:12;2466:16;;2446:37;;;-1:-1:-1;;;;;3016:32:13;;2446:37:11;;;2998:51:13;3065:18;;;3058:34;;;;2971:18;;2446:37:11;;;;;;;;;;;;2436:48;;;;;;2421:63;;2515:140;2551:11;;2515:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2580:10:11;;2618:22;;;;;;3232:19:13;;;2580:10:11;;-1:-1:-1;3267:12:13;;-1:-1:-1;2618:22:11;;;;;;;;;;;;2608:33;;;;;;2515:18;:140::i;:::-;2494:205;;;;-1:-1:-1;;;2494:205:11;;;;;;;;;;;;2710:17;2730:33;2746:16;;2730:15;:33::i;:::-;2710:53;;2819:9;2794:21;:34;;2773:108;;;;-1:-1:-1;;;2773:108:11;;;;;;;;;;;;-1:-1:-1;;;;;3035:24:11;;;;;;:15;:24;;;;;;:31;;-1:-1:-1;;3035:31:11;3062:4;3035:31;;;3096:34;3035:24;;;3116:9;;3035:24;3096:34;3035:24;3096:34;3116:9;3035:24;3096:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3077:53;;;3148:7;3140:37;;;;-1:-1:-1;;;3140:37:11;;;;;;;;;;;;3217:16;;3193:52;;;3464:25:13;;;3520:2;3505:18;;3498:34;;;-1:-1:-1;;;;;3193:52:11;;;;;3437:18:13;3193:52:11;;;;;;;2303:949;;;;2240:1012;;:::o;9071:205:2:-;9129:30;;3147:66;9186:27;9171:42;9071:205;-1:-1:-1;;9071:205:2:o;1847:127:1:-;6929:20:2;:18;:20::i;:::-;1929:38:1::1;1954:12;1929:24;:38::i;3774:248::-:0;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:1;;-1:-1:-1;;;;;3941:19:1;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;1902:154:10:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;;1902:154;-1:-1:-1;;;;1902:154:10:o;3258:360:11:-;3346:7;3368:12;3390:9;;;;;;;;;-1:-1:-1;;;;;3390:9:11;-1:-1:-1;;;;;3390:25:11;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3365:52;;;;;;3443:1;3435:5;:9;3427:42;;;;-1:-1:-1;;;3427:42:11;;;;;;;;;;;;3605:5;3566:26;:16;3585:7;3566:26;:::i;:::-;3555:38;;:7;:38;:::i;:::-;3554:57;;;;:::i;:::-;3547:64;3258:360;-1:-1:-1;;;3258:360:11:o;7082:141:2:-;7149:17;:15;:17::i;:::-;7144:73;;7189:17;;-1:-1:-1;;;7189:17:2;;;;;;;;;;;1980:235:1;6929:20:2;:18;:20::i;2457:308:10:-;2540:7;2582:4;2540:7;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;2668:27;:51::i;:::-;2653:66;-1:-1:-1;2634:3:10;;2596:134;;;-1:-1:-1;2746:12:10;2457:308;-1:-1:-1;;;2457:308:10:o;8485:120:2:-;8535:4;8558:26;:24;:26::i;:::-;:40;-1:-1:-1;;;8558:40:2;;;;;;-1:-1:-1;8485:120:2:o;504:167:9:-;579:7;609:1;605;:5;:59;;864:13;928:15;;;963:4;956:15;;;1009:4;993:21;;605:59;;;-1:-1:-1;864:13:9;928:15;;;963:4;956:15;1009:4;993:21;;;504:167::o;196:173:13:-;264:20;;-1:-1:-1;;;;;313:31:13;;303:42;;293:70;;359:1;356;349:12;293:70;196:173;;;:::o;374:186::-;433:6;486:2;474:9;465:7;461:23;457:32;454:52;;;502:1;499;492:12;454:52;525:29;544:9;525:29;:::i;939:397::-;1025:6;1033;1041;1049;1102:3;1090:9;1081:7;1077:23;1073:33;1070:53;;;1119:1;1116;1109:12;1070:53;1142:29;1161:9;1142:29;:::i;:::-;1132:39;;1218:2;1207:9;1203:18;1190:32;1180:42;;1241:38;1275:2;1264:9;1260:18;1241:38;:::i;:::-;939:397;;;;-1:-1:-1;1231:48:13;;1326:2;1311:18;1298:32;;-1:-1:-1;;939:397:13:o;1785:610::-;1871:6;1879;1932:2;1920:9;1911:7;1907:23;1903:32;1900:52;;;1948:1;1945;1938:12;1900:52;1988:9;1975:23;2021:18;2013:6;2010:30;2007:50;;;2053:1;2050;2043:12;2007:50;2076:22;;2129:4;2121:13;;2117:27;-1:-1:-1;2107:55:13;;2158:1;2155;2148:12;2107:55;2198:2;2185:16;2224:18;2216:6;2213:30;2210:50;;;2256:1;2253;2246:12;2210:50;2309:7;2304:2;2294:6;2291:1;2287:14;2283:2;2279:23;2275:32;2272:45;2269:65;;;2330:1;2327;2320:12;2269:65;2361:2;2353:11;;;;;2383:6;;-1:-1:-1;1785:610:13;-1:-1:-1;;;1785:610:13:o;3543:179::-;3621:13;;3674:22;3663:34;;3653:45;;3643:73;;3712:1;3709;3702:12;3727:571;3830:6;3838;3846;3854;3862;3915:3;3903:9;3894:7;3890:23;3886:33;3883:53;;;3932:1;3929;3922:12;3883:53;3955:39;3984:9;3955:39;:::i;:::-;4034:2;4019:18;;4013:25;4100:2;4085:18;;4079:25;4194:2;4179:18;;4173:25;3945:49;;-1:-1:-1;4013:25:13;;-1:-1:-1;4079:25:13;-1:-1:-1;4173:25:13;-1:-1:-1;4243:49:13;4287:3;4272:19;;4243:49;:::i;:::-;4233:59;;3727:571;;;;;;;;:::o;4303:265::-;4376:9;;;4407;;4424:15;;;4418:22;;4404:37;4394:168;;4484:10;4479:3;4475:20;4472:1;4465:31;4519:4;4516:1;4509:15;4547:4;4544:1;4537:15;4573:217;4613:1;4639;4629:132;;4683:10;4678:3;4674:20;4671:1;4664:31;4718:4;4715:1;4708:15;4746:4;4743:1;4736:15;4629:132;-1:-1:-1;4775:9:13;;4573:217::o;4795:127::-;4856:10;4851:3;4847:20;4844:1;4837:31;4887:4;4884:1;4877:15;4911:4;4908:1;4901:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "579600",
								"executionCost": "30235",
								"totalCost": "609835"
							},
							"external": {
								"claimStipend(bytes32[])": "infinite",
								"claimedStipends(address)": "2518",
								"initialize(address,uint256,address,bytes32)": "infinite",
								"merkleRoot()": "2317",
								"owner()": "2352",
								"priceFeed()": "2336",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "28431",
								"usdStipendAmount()": "2337",
								"withdraw()": "infinite"
							},
							"internal": {
								"convertUsdToEth(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1316,
									"end": 1336,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "5"
								},
								{
									"begin": 1316,
									"end": 1338,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "tag",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7709,
									"end": 8131,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 7709,
									"end": 8131,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 3147,
									"end": 3213,
									"name": "PUSH",
									"source": 2,
									"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "PUSH",
									"source": 2,
									"value": "10000000000000000"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F92EE8A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 8017,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 158,
									"end": 208,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 158,
									"end": 208,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 158,
									"end": 208,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 146,
									"end": 148,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 131,
									"end": 149,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "LOG1",
									"source": 2
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7758,
									"end": 8131,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7709,
									"end": 8131,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 214,
									"name": "tag",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 14,
									"end": 214,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
									".code": [
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "741BEF1A"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "741BEF1A"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "8DA5CB5B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "E65BF545"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "F2FDE38B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "F32AE7DD"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "26317008"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "2EB4A7AB"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "3CCFD60B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "5F761675"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "715018A6"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3795,
											"end": 3846,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3836,
											"end": 3845,
											"modifierDepth": 1,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3824,
											"end": 3834,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842"
										},
										{
											"begin": 3795,
											"end": 3846,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 572,
											"end": 619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 730,
											"end": 744,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 730,
											"end": 744,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 723,
											"end": 745,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 705,
											"end": 746,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 705,
											"end": 746,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 693,
											"end": 695,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 678,
											"end": 696,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 619,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 14,
											"end": 191,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 3914,
											"end": 4190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "STOP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 11,
											"value": "36"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 11,
											"value": "38"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 11,
											"value": "45"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1503,
											"end": 1505,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 1341,
											"end": 1572,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 426,
											"end": 457,
											"name": "tag",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "tag",
											"source": 11,
											"value": "54"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2658,
											"end": 2820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 4010,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3963,
											"end": 3986,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4049,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4049,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4049,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "3F"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "81"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4100,
											"end": 4107,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B12D13EB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "82"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4183,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4155,
											"end": 4165,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 4155,
											"end": 4165,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5"
										},
										{
											"begin": 4145,
											"end": 4183,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 3953,
											"end": 4190,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3953,
											"end": 4190,
											"modifierDepth": 1,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3914,
											"end": 4190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4744,
											"end": 4758,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4785,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4788,
											"end": 4799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4803,
											"end": 4804,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4816,
											"end": 4820,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 4808,
											"end": 4833,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4854,
											"end": 4866,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4866,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4871,
											"end": 4883,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F92EE8A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4966,
											"end": 4967,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1585,
											"end": 1608,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 1585,
											"end": 1608,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "74F166B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1673,
											"end": 1674,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1653,
											"end": 1670,
											"modifierDepth": 1,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1653,
											"end": 1674,
											"modifierDepth": 1,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10E41573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1731,
											"end": 1755,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1731,
											"end": 1755,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3588063"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1801,
											"end": 1812,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9DD854D3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1874,
											"end": 1883,
											"modifierDepth": 1,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 1859,
											"end": 1873,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 1859,
											"end": 1884,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "tag",
											"source": 11,
											"value": "97"
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1895,
											"end": 1911,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1950,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1996,
											"end": 2006,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2763,
											"end": 2813,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2763,
											"end": 2813,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2751,
											"end": 2753,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2736,
											"end": 2754,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3246,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3219,
											"end": 3249,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 1341,
											"end": 1572,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3604,
											"end": 3612,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3585,
											"end": 3613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 11,
											"value": "66"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2331,
											"end": 2341,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 2313,
											"end": 2328,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2375,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2359,
											"end": 2384,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "93F5A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "tag",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2421,
											"end": 2433,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2466,
											"end": 2482,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2466,
											"end": 2482,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3016,
											"end": 3048,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3016,
											"end": 3048,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2998,
											"end": 3049,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2971,
											"end": 2989,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2971,
											"end": 2989,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2421,
											"end": 2484,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2421,
											"end": 2484,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 2551,
											"end": 2562,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2551,
											"end": 2562,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3267,
											"end": 3279,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3267,
											"end": 3279,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "123"
										},
										{
											"begin": 2515,
											"end": 2655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "tag",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "582F497D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "tag",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2710,
											"end": 2727,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2745,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 2730,
											"end": 2763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "tag",
											"source": 11,
											"value": "125"
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2710,
											"end": 2763,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2710,
											"end": 2763,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2819,
											"end": 2828,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2794,
											"end": 2815,
											"name": "SELFBALANCE",
											"source": 11
										},
										{
											"begin": 2794,
											"end": 2828,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 2794,
											"end": 2828,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "786E0A99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "127"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3050,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3062,
											"end": 3066,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "CALL",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "3F"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3148,
											"end": 3155,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B12D13EB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3217,
											"end": 3233,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3217,
											"end": 3233,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3520,
											"end": 3522,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 11,
											"value": "4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3437,
											"end": 3455,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3147,
											"end": 3213,
											"name": "PUSH",
											"source": 2,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 9186,
											"end": 9213,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 9186,
											"end": 9213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9171,
											"end": 9213,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9071,
											"end": 9276,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 1954,
											"end": 1966,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1953,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1929,
											"end": 1967,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1993,
											"end": 1997,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2049,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 2029,
											"end": 2034,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2036,
											"end": 2040,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2016,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 2016,
											"end": 2041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1902,
											"end": 2056,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3346,
											"end": 3353,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3380,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3415,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3415,
											"name": "PUSH",
											"source": 11,
											"value": "FEAF968C"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "tag",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "155"
										},
										{
											"begin": 3390,
											"end": 3417,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3443,
											"end": 3444,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3440,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3435,
											"end": 3444,
											"name": "SGT",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "96187BD5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "tag",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3605,
											"end": 3610,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 3566,
											"end": 3582,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3585,
											"end": 3592,
											"name": "PUSH",
											"source": 11,
											"value": "F4240"
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 3566,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "tag",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3555,
											"end": 3562,
											"name": "PUSH",
											"source": 11,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 3555,
											"end": 3593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "tag",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 3554,
											"end": 3611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "tag",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3547,
											"end": 3611,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3258,
											"end": 3618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 7149,
											"end": 7166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1AFCD79F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "tag",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2540,
											"end": 2547,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2582,
											"end": 2586,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2540,
											"end": 2547,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2620,
											"end": 2625,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2620,
											"end": 2632,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 2617,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 2696,
											"end": 2708,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2715,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2716,
											"end": 2717,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2710,
											"end": 2718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2668,
											"end": 2695,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 2668,
											"end": 2719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2653,
											"end": 2719,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2746,
											"end": 2758,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2457,
											"end": 2765,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8535,
											"end": 8539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 8558,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 8558,
											"end": 8584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8485,
											"end": 8605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 504,
											"end": 671,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 504,
											"end": 671,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 579,
											"end": 586,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 610,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 605,
											"end": 606,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 605,
											"end": 610,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 864,
											"end": 877,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 928,
											"end": 943,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 963,
											"end": 967,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 971,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 956,
											"end": 971,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 971,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1009,
											"end": 1013,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 864,
											"end": 877,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 943,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 928,
											"end": 943,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 963,
											"end": 967,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 971,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1009,
											"end": 1013,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 504,
											"end": 671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 196,
											"end": 369,
											"name": "tag",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 196,
											"end": 369,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 264,
											"end": 284,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 264,
											"end": 284,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 313,
											"end": 344,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 313,
											"end": 344,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 303,
											"end": 345,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 303,
											"end": 345,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 293,
											"end": 363,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 359,
											"end": 360,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 357,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 349,
											"end": 361,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 293,
											"end": 363,
											"name": "tag",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 196,
											"end": 369,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 196,
											"end": 369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 374,
											"end": 560,
											"name": "tag",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 374,
											"end": 560,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 433,
											"end": 439,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 474,
											"end": 483,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 465,
											"end": 472,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 461,
											"end": 484,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 457,
											"end": 489,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 454,
											"end": 506,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 454,
											"end": 506,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 454,
											"end": 506,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 502,
											"end": 503,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 499,
											"end": 500,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 504,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 454,
											"end": 506,
											"name": "tag",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 454,
											"end": 506,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 525,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "160"
										},
										{
											"begin": 544,
											"end": 553,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 525,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 525,
											"end": 554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "tag",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1025,
											"end": 1031,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1039,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1041,
											"end": 1047,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1049,
											"end": 1055,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1102,
											"end": 1105,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1090,
											"end": 1099,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1081,
											"end": 1088,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1077,
											"end": 1100,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1073,
											"end": 1106,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "203"
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1119,
											"end": 1120,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 1117,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1109,
											"end": 1121,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "tag",
											"source": 13,
											"value": "203"
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "204"
										},
										{
											"begin": 1161,
											"end": 1170,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 1142,
											"end": 1171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "tag",
											"source": 13,
											"value": "204"
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1132,
											"end": 1171,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1132,
											"end": 1171,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1218,
											"end": 1220,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1207,
											"end": 1216,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1190,
											"end": 1222,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1180,
											"end": 1222,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1180,
											"end": 1222,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 1275,
											"end": 1277,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1264,
											"end": 1273,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1260,
											"end": 1278,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "191"
										},
										{
											"begin": 1241,
											"end": 1279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "tag",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1231,
											"end": 1279,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1231,
											"end": 1279,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 1326,
											"end": 1328,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1311,
											"end": 1329,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1298,
											"end": 1330,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1298,
											"end": 1330,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 939,
											"end": 1336,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1871,
											"end": 1877,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1879,
											"end": 1885,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1920,
											"end": 1929,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1911,
											"end": 1918,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1907,
											"end": 1930,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1903,
											"end": 1935,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "209"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1948,
											"end": 1949,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1946,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1938,
											"end": 1950,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "tag",
											"source": 13,
											"value": "209"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1988,
											"end": 1997,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1975,
											"end": 1998,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2021,
											"end": 2039,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2013,
											"end": 2019,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2010,
											"end": 2040,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "210"
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2053,
											"end": 2054,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2050,
											"end": 2051,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2043,
											"end": 2055,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "tag",
											"source": 13,
											"value": "210"
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2076,
											"end": 2098,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2076,
											"end": 2098,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2129,
											"end": 2133,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2121,
											"end": 2134,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2121,
											"end": 2134,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2117,
											"end": 2144,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "211"
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2158,
											"end": 2159,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2155,
											"end": 2156,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2148,
											"end": 2160,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "tag",
											"source": 13,
											"value": "211"
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2198,
											"end": 2200,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2185,
											"end": 2201,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2224,
											"end": 2242,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2213,
											"end": 2243,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "212"
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2256,
											"end": 2257,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2253,
											"end": 2254,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2246,
											"end": 2258,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "tag",
											"source": 13,
											"value": "212"
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2309,
											"end": 2316,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2304,
											"end": 2306,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2294,
											"end": 2300,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2291,
											"end": 2292,
											"name": "PUSH",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 2287,
											"end": 2301,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 2283,
											"end": 2285,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2279,
											"end": 2302,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2275,
											"end": 2307,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2272,
											"end": 2317,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "213"
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2330,
											"end": 2331,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2327,
											"end": 2328,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2320,
											"end": 2332,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "tag",
											"source": 13,
											"value": "213"
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2361,
											"end": 2363,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 2395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3543,
											"end": 3722,
											"name": "tag",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 3543,
											"end": 3722,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3621,
											"end": 3634,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3621,
											"end": 3634,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3674,
											"end": 3696,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3663,
											"end": 3697,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3663,
											"end": 3697,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3653,
											"end": 3698,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3653,
											"end": 3698,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3643,
											"end": 3716,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "196"
										},
										{
											"begin": 3643,
											"end": 3716,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3712,
											"end": 3713,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3710,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3702,
											"end": 3714,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "tag",
											"source": 13,
											"value": "155"
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3830,
											"end": 3836,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3838,
											"end": 3844,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3846,
											"end": 3852,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3854,
											"end": 3860,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3862,
											"end": 3868,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 3903,
											"end": 3912,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 3890,
											"end": 3913,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3886,
											"end": 3919,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3930,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3922,
											"end": 3934,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "tag",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "223"
										},
										{
											"begin": 3984,
											"end": 3993,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 3955,
											"end": 3994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "tag",
											"source": 13,
											"value": "223"
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4034,
											"end": 4036,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4100,
											"end": 4102,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4085,
											"end": 4103,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 4085,
											"end": 4103,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4079,
											"end": 4104,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4194,
											"end": 4196,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "DUP10",
											"source": 13
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4173,
											"end": 4198,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3945,
											"end": 3994,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3945,
											"end": 3994,
											"name": "SWAP8",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4079,
											"end": 4104,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4173,
											"end": 4198,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "224"
										},
										{
											"begin": 4287,
											"end": 4290,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4272,
											"end": 4291,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4272,
											"end": 4291,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "192"
										},
										{
											"begin": 4243,
											"end": 4292,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "tag",
											"source": 13,
											"value": "224"
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4233,
											"end": 4292,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4233,
											"end": 4292,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3727,
											"end": 4298,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4303,
											"end": 4568,
											"name": "tag",
											"source": 13,
											"value": "158"
										},
										{
											"begin": 4303,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 4407,
											"end": 4416,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4407,
											"end": 4416,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 4418,
											"end": 4440,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4418,
											"end": 4440,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 4404,
											"end": 4441,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 4394,
											"end": 4562,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "137"
										},
										{
											"begin": 4394,
											"end": 4562,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4484,
											"end": 4494,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 4479,
											"end": 4482,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4473,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4465,
											"end": 4496,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4519,
											"end": 4523,
											"name": "PUSH",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 4516,
											"end": 4517,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4509,
											"end": 4524,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4547,
											"end": 4551,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4544,
											"end": 4545,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4537,
											"end": 4552,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4573,
											"end": 4790,
											"name": "tag",
											"source": 13,
											"value": "161"
										},
										{
											"begin": 4573,
											"end": 4790,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4613,
											"end": 4614,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4639,
											"end": 4640,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "228"
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4683,
											"end": 4693,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 4678,
											"end": 4681,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 4674,
											"end": 4694,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4671,
											"end": 4672,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4664,
											"end": 4695,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4718,
											"end": 4722,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 4715,
											"end": 4716,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4708,
											"end": 4723,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4743,
											"end": 4744,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4736,
											"end": 4751,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "tag",
											"source": 13,
											"value": "228"
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4775,
											"end": 4784,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 4775,
											"end": 4784,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4573,
											"end": 4790,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4795,
											"end": 4922,
											"name": "tag",
											"source": 13,
											"value": "180"
										},
										{
											"begin": 4795,
											"end": 4922,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4856,
											"end": 4866,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 4851,
											"end": 4854,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 4847,
											"end": 4867,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 4844,
											"end": 4845,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4868,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4887,
											"end": 4891,
											"name": "PUSH",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4884,
											"end": 4885,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4877,
											"end": 4892,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4911,
											"end": 4915,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 4908,
											"end": 4909,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4901,
											"end": 4916,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"claimStipend(bytes32[])": "f32ae7dd",
							"claimedStipends(address)": "26317008",
							"initialize(address,uint256,address,bytes32)": "5f761675",
							"merkleRoot()": "2eb4a7ab",
							"owner()": "8da5cb5b",
							"priceFeed()": "741bef1a",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"usdStipendAmount()": "e65bf545",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDirectorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StipendAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StipendAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectorFundedStipendPayouts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"StipendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimStipend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedStipends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_director\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdStipendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdStipendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"claimStipend(bytes32[])\":{\"params\":{\"merkleProof\":\"The Merkle proof that verifies the student's eligibility\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address,uint256,address,bytes32)\":{\"custom:oz-upgrades-validate-as-initializer\":\"\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimStipend(bytes32[])\":{\"notice\":\"This function allows students to claim their stipend if they are included in the Merkle tree\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ScholarshipDispenser.sol\":\"ScholarshipDispenser\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"src/ScholarshipDispenser.sol\":{\"keccak256\":\"0x97e36b2bf685ea1541d3b65e8b34ed6e6e23eaaa1f5bcf355a87cd26be909096\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1f8aebd50c4b005a094a89b6e25cfb4d2697447386c3b3ef5f19184671df6d25\",\"dweb:/ipfs/QmYKxp9rDrmCsXbNvqee1qVfd6MJz4Vbb5dR9cXpabsHP1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2377,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "usdStipendAmount",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 2380,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "priceFeed",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(AggregatorV3Interface)45"
							},
							{
								"astId": 2382,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "2",
								"type": "t_bytes32"
							},
							{
								"astId": 2386,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "claimedStipends",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(AggregatorV3Interface)45": {
								"encoding": "inplace",
								"label": "contract AggregatorV3Interface",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"claimStipend(bytes32[])": {
								"notice": "This function allows students to claim their stipend if they are included in the Merkle tree"
							}
						},
						"version": 1
					}
				}
			},
			"src/ScholarshipFactory.sol": {
				"ScholarshipFactory": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_dispenserImplementation",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_admin",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_director",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "FailedDeployment",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidAdminAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidDirectorAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidImplementationAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMerkleRoot",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPriceFeedAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OnlyDirectorCanCreateDispenser",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StipendAmountMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "dispenserAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdStipendAmount",
									"type": "uint256"
								}
							],
							"name": "DispenserCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "_usdStipendAmount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_priceFeed",
									"type": "address"
								}
							],
							"name": "createDispenser",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "director",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dispenserImplementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "dispensers",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newDirector",
									"type": "address"
								}
							],
							"name": "updateDirector",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"FailedDeployment()": [
								{
									"details": "The deployment failed."
								}
							],
							"InsufficientBalance(uint256,uint256)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"createDispenser(bytes32,uint256,address)": {
								"details": "The Merkle root is used to verify if a student is eligible for the stipendThe Merkle root must be a valid bytes32 valueThe stipend amount must be greater than zeroThe price feed is used to convert the stipend amount from USD to ETHEmits a DispenserCreated event upon successful creation of the dispenser",
								"params": {
									"_merkleRoot": "The Merkle root for stipend eligibility verification",
									"_priceFeed": "The address of the Chainlink price feed contract for USD to ETH conversion",
									"_usdStipendAmount": "The stipend amount in USD cents (e.g., 1000 for $10.00)"
								},
								"returns": {
									"_0": "The address of the newly created Payroll clone"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"updateDirector(address)": {
								"params": {
									"newDirector": "The new director address to be set"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/ScholarshipFactory.sol\":263:3289  contract ScholarshipFactory is Ownable {... */\n  mstore(0x40, 0xa0)\n    /* \"src/ScholarshipFactory.sol\":839:1317  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"src/ScholarshipFactory.sol\":958:964  _admin */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_7\n  jumpi\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":725:776   */\n  mstore\n    /* \"#utility.yul\":698:716   */\n  0x24\n  add\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_7:\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_10\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_11\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_10:\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/ScholarshipFactory.sol\":997:1035  _dispenserImplementation != address(0) */\n  dup4\n  and\n    /* \"src/ScholarshipFactory.sol\":976:1089  require(... */\n  tag_13\n  jumpi\n  mload(0x40)\n  shl(0xe2, 0x325c055b)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_13:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/ScholarshipFactory.sol\":1107:1127  _admin != address(0) */\n  dup3\n  and\n    /* \"src/ScholarshipFactory.sol\":1099:1151  require(_admin != address(0), InvalidAdminAddress()) */\n  tag_14\n  jumpi\n  mload(0x40)\n  shl(0xe2, 0x016ed19f)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_14:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/ScholarshipFactory.sol\":1169:1192  _director != address(0) */\n  dup2\n  and\n    /* \"src/ScholarshipFactory.sol\":1161:1219  require(_director != address(0), InvalidDirectorAddress()) */\n  tag_15\n  jumpi\n  mload(0x40)\n  shl(0xe3, 0x074f166b)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_15:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"src/ScholarshipFactory.sol\":1230:1280  dispenserImplementation = _dispenserImplementation */\n  swap3\n  dup4\n  and\n  0x80\n  mstore\n    /* \"src/ScholarshipFactory.sol\":1290:1298  director */\n  0x02\n    /* \"src/ScholarshipFactory.sol\":1290:1310  director = _director */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  swap2\n  swap1\n  swap4\n  and\n  or\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"src/ScholarshipFactory.sol\":263:3289  contract ScholarshipFactory is Ownable {... */\n  jump(tag_19)\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  swap1\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:191   */\ntag_18:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_21\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  0x00\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_21:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:574   */\ntag_3:\n    /* \"#utility.yul\":284:290   */\n  0x00\n    /* \"#utility.yul\":292:298   */\n  0x00\n    /* \"#utility.yul\":300:306   */\n  0x00\n    /* \"#utility.yul\":353:355   */\n  0x60\n    /* \"#utility.yul\":341:350   */\n  dup5\n    /* \"#utility.yul\":332:339   */\n  dup7\n    /* \"#utility.yul\":328:351   */\n  sub\n    /* \"#utility.yul\":324:356   */\n  slt\n    /* \"#utility.yul\":321:373   */\n  iszero\n  tag_23\n  jumpi\n    /* \"#utility.yul\":369:370   */\n  0x00\n    /* \"#utility.yul\":366:367   */\n  0x00\n    /* \"#utility.yul\":359:371   */\n  revert\n    /* \"#utility.yul\":321:373   */\ntag_23:\n    /* \"#utility.yul\":392:432   */\n  tag_24\n    /* \"#utility.yul\":422:431   */\n  dup5\n    /* \"#utility.yul\":392:432   */\n  tag_18\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":382:432   */\n  swap3\n  pop\n    /* \"#utility.yul\":451:500   */\n  tag_25\n    /* \"#utility.yul\":496:498   */\n  0x20\n    /* \"#utility.yul\":485:494   */\n  dup6\n    /* \"#utility.yul\":481:499   */\n  add\n    /* \"#utility.yul\":451:500   */\n  tag_18\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":441:500   */\n  swap2\n  pop\n    /* \"#utility.yul\":519:568   */\n  tag_26\n    /* \"#utility.yul\":564:566   */\n  0x40\n    /* \"#utility.yul\":553:562   */\n  dup6\n    /* \"#utility.yul\":549:567   */\n  add\n    /* \"#utility.yul\":519:568   */\n  tag_18\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":509:568   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:574   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\n    /* \"#utility.yul\":579:782   */\ntag_19:\n    /* \"src/ScholarshipFactory.sol\":263:3289  contract ScholarshipFactory is Ownable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x721a20cb1ebf635e5867c4ff9034ea3a03bc8e6afbc4dd2dd16591fa45f58157\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/ScholarshipFactory.sol\":263:3289  contract ScholarshipFactory is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x9c8d69c5\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd86f77fc\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_10\n      jumpi\n      revert(0x00, 0x00)\n    tag_11:\n      dup1\n      0x1de933c7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x335b7fa2\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5af82abf\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"src/ScholarshipFactory.sol\":3114:3287  function updateDirector(address newDirector) external onlyOwner {... */\n    tag_3:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      stop\n        /* \"src/ScholarshipFactory.sol\":393:420  address[] public dispensers */\n    tag_4:\n      tag_16\n      tag_17\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_17:\n      tag_19\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":778:810   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":760:811   */\n      dup2\n      mstore\n        /* \"#utility.yul\":748:750   */\n      0x20\n        /* \"#utility.yul\":733:751   */\n      add\n        /* \"src/ScholarshipFactory.sol\":393:420  address[] public dispensers */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/ScholarshipFactory.sol\":426:449  address public director */\n    tag_5:\n      sload(0x02)\n      tag_16\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_12\n      tag_26\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_7:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      jump(tag_16)\n        /* \"src/ScholarshipFactory.sol\":339:387  address public immutable dispenserImplementation */\n    tag_8:\n      tag_16\n      immutable(\"0x721a20cb1ebf635e5867c4ff9034ea3a03bc8e6afbc4dd2dd16591fa45f58157\")\n      dup2\n      jump\n        /* \"src/ScholarshipFactory.sol\":2138:2969  function createDispenser(... */\n    tag_9:\n      tag_16\n      tag_34\n      calldatasize\n      0x04\n      tag_35\n      jump\t// in\n    tag_34:\n      tag_36\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_10:\n      tag_12\n      tag_39\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"src/ScholarshipFactory.sol\":3114:3287  function updateDirector(address newDirector) external onlyOwner {... */\n    tag_15:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_42\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_43\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_42:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipFactory.sol\":3196:3221  newDirector != address(0) */\n      dup2\n      and\n        /* \"src/ScholarshipFactory.sol\":3188:3248  require(newDirector != address(0), InvalidDirectorAddress()) */\n      tag_45\n      jumpi\n      mload(0x40)\n      shl(0xe3, 0x074f166b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_45:\n        /* \"src/ScholarshipFactory.sol\":3258:3266  director */\n      0x02\n        /* \"src/ScholarshipFactory.sol\":3258:3280  director = newDirector */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"src/ScholarshipFactory.sol\":3114:3287  function updateDirector(address newDirector) external onlyOwner {... */\n      jump\t// out\n        /* \"src/ScholarshipFactory.sol\":393:420  address[] public dispensers */\n    tag_19:\n      0x01\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_26:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_49\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_43\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_49:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_51\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_52\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_51:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"src/ScholarshipFactory.sol\":2138:2969  function createDispenser(... */\n    tag_36:\n        /* \"src/ScholarshipFactory.sol\":2320:2328  director */\n      sload(0x02)\n        /* \"src/ScholarshipFactory.sol\":2279:2286  address */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipFactory.sol\":2320:2328  director */\n      and\n        /* \"src/ScholarshipFactory.sol\":2306:2316  msg.sender */\n      caller\n        /* \"src/ScholarshipFactory.sol\":2306:2328  msg.sender == director */\n      eq\n        /* \"src/ScholarshipFactory.sol\":2298:2363  require(msg.sender == director, OnlyDirectorCanCreateDispenser()) */\n      tag_55\n      jumpi\n      mload(0x40)\n      shl(0xe1, 0x5c378d31)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_55:\n        /* \"src/ScholarshipFactory.sol\":2401:2402  0 */\n      0x00\n        /* \"src/ScholarshipFactory.sol\":2381:2398  _usdStipendAmount */\n      dup4\n        /* \"src/ScholarshipFactory.sol\":2381:2402  _usdStipendAmount > 0 */\n      gt\n        /* \"src/ScholarshipFactory.sol\":2373:2441  require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero()) */\n      tag_56\n      jumpi\n      mload(0x40)\n      shl(0xe2, 0x10e41573)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_56:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipFactory.sol\":2459:2483  _priceFeed != address(0) */\n      dup3\n      and\n        /* \"src/ScholarshipFactory.sol\":2451:2511  require(_priceFeed != address(0), InvalidPriceFeedAddress()) */\n      tag_57\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xe3588063)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_57:\n        /* \"src/ScholarshipFactory.sol\":2529:2540  _merkleRoot */\n      dup4\n        /* \"src/ScholarshipFactory.sol\":2521:2576  require(_merkleRoot != bytes32(0), InvalidMerkleRoot()) */\n      tag_58\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x9dd854d3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_58:\n        /* \"src/ScholarshipFactory.sol\":2587:2609  address dispenserClone */\n      0x00\n        /* \"src/ScholarshipFactory.sol\":2612:2643  dispenserImplementation.clone() */\n      tag_59\n        /* \"src/ScholarshipFactory.sol\":2612:2635  dispenserImplementation */\n      immutable(\"0x721a20cb1ebf635e5867c4ff9034ea3a03bc8e6afbc4dd2dd16591fa45f58157\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipFactory.sol\":2612:2641  dispenserImplementation.clone */\n      and\n      tag_60\n        /* \"src/ScholarshipFactory.sol\":2612:2643  dispenserImplementation.clone() */\n      jump\t// in\n    tag_59:\n        /* \"src/ScholarshipFactory.sol\":2723:2731  director */\n      sload(0x02)\n        /* \"src/ScholarshipFactory.sol\":2653:2821  ScholarshipDispenser(payable(dispenserClone)).initialize(... */\n      mload(0x40)\n      shl(0xe0, 0x5f761675)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipFactory.sol\":2723:2731  director */\n      swap2\n      dup3\n      and\n        /* \"src/ScholarshipFactory.sol\":2653:2821  ScholarshipDispenser(payable(dispenserClone)).initialize(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1426:1477   */\n      mstore\n        /* \"#utility.yul\":1493:1511   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":1486:1520   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":1556:1588   */\n      dup6\n      dup3\n      and\n        /* \"#utility.yul\":1536:1554   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1529:1589   */\n      mstore\n        /* \"#utility.yul\":1605:1623   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":1598:1632   */\n      dup9\n      swap1\n      mstore\n        /* \"src/ScholarshipFactory.sol\":2587:2643  address dispenserClone = dispenserImplementation.clone() */\n      swap2\n      swap3\n      pop\n        /* \"src/ScholarshipFactory.sol\":2653:2709  ScholarshipDispenser(payable(dispenserClone)).initialize */\n      dup3\n      and\n      swap1\n      0x5f761675\n      swap1\n        /* \"#utility.yul\":1398:1417   */\n      0x84\n      add\n        /* \"src/ScholarshipFactory.sol\":2653:2821  ScholarshipDispenser(payable(dispenserClone)).initialize(... */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_63\n      jumpi\n      revert(0x00, 0x00)\n    tag_63:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_65\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_65:\n      pop\n      pop\n        /* \"src/ScholarshipFactory.sol\":2832:2842  dispensers */\n      0x01\n        /* \"src/ScholarshipFactory.sol\":2832:2863  dispensers.push(dispenserClone) */\n      dup1\n      sload\n      dup1\n      dup3\n      add\n      dup3\n      sstore\n      0x00\n      swap2\n      swap1\n      swap2\n      mstore\n      0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\n      add\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup6\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"src/ScholarshipFactory.sol\":2879:2930  DispenserCreated(dispenserClone, _usdStipendAmount) */\n      mload(0x40)\n        /* \"#utility.yul\":1789:1814   */\n      dup8\n      dup2\n      mstore\n        /* \"src/ScholarshipFactory.sol\":2832:2863  dispensers.push(dispenserClone) */\n      swap1\n      swap3\n      pop\n        /* \"src/ScholarshipFactory.sol\":2879:2930  DispenserCreated(dispenserClone, _usdStipendAmount) */\n      0xa99c90577b80d735a56496629133b35ecc581a0e5d29b949147bbca7730e6d5a\n      swap2\n      pop\n        /* \"#utility.yul\":1777:1779   */\n      0x20\n        /* \"#utility.yul\":1762:1780   */\n      add\n        /* \"src/ScholarshipFactory.sol\":2879:2930  DispenserCreated(dispenserClone, _usdStipendAmount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipFactory.sol\":2948:2962  dispenserClone */\n      swap5\n        /* \"src/ScholarshipFactory.sol\":2138:2969  function createDispenser(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_40:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_70\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_43\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_72\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":760:811   */\n      mstore\n        /* \"#utility.yul\":733:751   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_72:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_74\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_52\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_74:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_43:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_51\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":760:811   */\n      mstore\n        /* \"#utility.yul\":733:751   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_73\n        /* \"#utility.yul\":614:817   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_52:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1070:1193  function clone(address implementation) internal returns (address instance) {... */\n    tag_60:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1127:1143  address instance */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1162:1186  clone(implementation, 0) */\n      tag_84\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1168:1182  implementation */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1184:1185  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1162:1167  clone */\n      tag_85\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1162:1186  clone(implementation, 0) */\n      jump\t// in\n    tag_84:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1155:1186  return clone(implementation, 0) */\n      swap3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1070:1193  function clone(address implementation) internal returns (address instance) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1585:2495  function clone(address implementation, uint256 value) internal returns (address instance) {... */\n    tag_85:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1657:1673  address instance */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1713:1718  value */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1689:1710  address(this).balance */\n      selfbalance\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1689:1718  address(this).balance < value */\n      lt\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1685:1808  if (address(this).balance < value) {... */\n      iszero\n      tag_88\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1741:1797  Errors.InsufficientBalance(address(this).balance, value) */\n      mload(0x40)\n      shl(0xe0, 0xcf479181)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1768:1789  address(this).balance */\n      selfbalance\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1741:1797  Errors.InsufficientBalance(address(this).balance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1999:2024   */\n      mstore\n        /* \"#utility.yul\":2040:2058   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":2033:2067   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":1972:1990   */\n      0x44\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1741:1797  Errors.InsufficientBalance(address(this).balance, value) */\n      tag_73\n        /* \"#utility.yul\":1825:2073   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":1685:1808  if (address(this).balance < value) {... */\n    tag_88:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2094:2142  0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000 */\n      0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2076:2090  implementation */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2070:2074  0x60 */\n      0x60\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2066:2091  shl(0x60, implementation) */\n      shl\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2060:2064  0xe8 */\n      0xe8\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2056:2092  shr(0xe8, shl(0x60, implementation)) */\n      shr\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2053:2143  or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000) */\n      or\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2047:2051  0x00 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2040:2144  mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000)) */\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2301:2333  0x5af43d82803e903d91602b57fd5bf3 */\n      0x5af43d82803e903d91602b57fd5bf3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2284:2298  implementation */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2278:2282  0x78 */\n      0x78\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2274:2299  shl(0x78, implementation) */\n      shl\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2271:2334  or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3) */\n      or\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2265:2269  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2258:2335  mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)) */\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2380:2384  0x37 */\n      0x37\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2374:2378  0x09 */\n      0x09\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2367:2372  value */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2360:2385  create(value, 0x09, 0x37) */\n      create\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2348:2385  instance := create(value, 0x09, 0x37) */\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2408:2430  instance == address(0) */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2404:2489  if (instance == address(0)) {... */\n      tag_84\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":2453:2478  Errors.FailedDeployment() */\n      mload(0x40)\n      shl(0xe0, 0xb06ebf3d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:187   */\n    tag_92:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_95\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      0x00\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:181   */\n    tag_95:\n        /* \"#utility.yul\":14:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:378   */\n    tag_14:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_97\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      0x00\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_97:\n        /* \"#utility.yul\":343:372   */\n      tag_98\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_92\n      jump\t// in\n    tag_98:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":192:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":383:609   */\n    tag_18:\n        /* \"#utility.yul\":442:448   */\n      0x00\n        /* \"#utility.yul\":495:497   */\n      0x20\n        /* \"#utility.yul\":483:492   */\n      dup3\n        /* \"#utility.yul\":474:481   */\n      dup5\n        /* \"#utility.yul\":470:493   */\n      sub\n        /* \"#utility.yul\":466:498   */\n      slt\n        /* \"#utility.yul\":463:515   */\n      iszero\n      tag_100\n      jumpi\n        /* \"#utility.yul\":511:512   */\n      0x00\n        /* \"#utility.yul\":508:509   */\n      0x00\n        /* \"#utility.yul\":501:513   */\n      revert\n        /* \"#utility.yul\":463:515   */\n    tag_100:\n      pop\n        /* \"#utility.yul\":556:579   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":383:609   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":822:1190   */\n    tag_35:\n        /* \"#utility.yul\":899:905   */\n      0x00\n        /* \"#utility.yul\":907:913   */\n      0x00\n        /* \"#utility.yul\":915:921   */\n      0x00\n        /* \"#utility.yul\":968:970   */\n      0x60\n        /* \"#utility.yul\":956:965   */\n      dup5\n        /* \"#utility.yul\":947:954   */\n      dup7\n        /* \"#utility.yul\":943:966   */\n      sub\n        /* \"#utility.yul\":939:971   */\n      slt\n        /* \"#utility.yul\":936:988   */\n      iszero\n      tag_103\n      jumpi\n        /* \"#utility.yul\":984:985   */\n      0x00\n        /* \"#utility.yul\":981:982   */\n      0x00\n        /* \"#utility.yul\":974:986   */\n      revert\n        /* \"#utility.yul\":936:988   */\n    tag_103:\n        /* \"#utility.yul\":1007:1030   */\n      dup4\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":1099:1101   */\n      0x20\n        /* \"#utility.yul\":1084:1102   */\n      dup5\n      add\n        /* \"#utility.yul\":1071:1103   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1146:1184   */\n      tag_104\n        /* \"#utility.yul\":1180:1182   */\n      0x40\n        /* \"#utility.yul\":1165:1183   */\n      dup6\n      add\n        /* \"#utility.yul\":1146:1184   */\n      tag_92\n      jump\t// in\n    tag_104:\n        /* \"#utility.yul\":1136:1184   */\n      swap1\n      pop\n        /* \"#utility.yul\":822:1190   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n\n    auxdata: 0xa26469706673582212207c1b473940862bc67c5ae0b215bec3aa2a9013b12a655520cdf2848c4774557964736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2780": {
									"entryPoint": null,
									"id": 2780,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_605": {
									"entryPoint": null,
									"id": 605,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferOwnership_701": {
									"entryPoint": 261,
									"id": 701,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 340,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_address_fromMemory": {
									"entryPoint": 367,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:784:13",
										"nodeType": "YulBlock",
										"src": "0:784:13",
										"statements": [
											{
												"nativeSrc": "6:3:13",
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "74:117:13",
													"nodeType": "YulBlock",
													"src": "74:117:13",
													"statements": [
														{
															"nativeSrc": "84:22:13",
															"nodeType": "YulAssignment",
															"src": "84:22:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "99:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "93:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:13"
																},
																"nativeSrc": "93:13:13",
																"nodeType": "YulFunctionCall",
																"src": "93:13:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "84:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "169:16:13",
																"nodeType": "YulBlock",
																"src": "169:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "178:1:13",
																					"nodeType": "YulLiteral",
																					"src": "178:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "181:1:13",
																					"nodeType": "YulLiteral",
																					"src": "181:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "171:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:13"
																			},
																			"nativeSrc": "171:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:13"
																		},
																		"nativeSrc": "171:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "128:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "139:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "154:3:13",
																										"nodeType": "YulLiteral",
																										"src": "154:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "159:1:13",
																										"nodeType": "YulLiteral",
																										"src": "159:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "150:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:13"
																								},
																								"nativeSrc": "150:11:13",
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:13"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "163:1:13",
																								"nodeType": "YulLiteral",
																								"src": "163:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "146:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:13"
																						},
																						"nativeSrc": "146:19:13",
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "135:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:13"
																				},
																				"nativeSrc": "135:31:13",
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "125:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:13"
																		},
																		"nativeSrc": "125:42:13",
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "118:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:13"
																},
																"nativeSrc": "118:50:13",
																"nodeType": "YulFunctionCall",
																"src": "118:50:13"
															},
															"nativeSrc": "115:70:13",
															"nodeType": "YulIf",
															"src": "115:70:13"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nativeSrc": "14:177:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "53:6:13",
														"nodeType": "YulTypedName",
														"src": "53:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "64:5:13",
														"nodeType": "YulTypedName",
														"src": "64:5:13",
														"type": ""
													}
												],
												"src": "14:177:13"
											},
											{
												"body": {
													"nativeSrc": "311:263:13",
													"nodeType": "YulBlock",
													"src": "311:263:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "357:16:13",
																"nodeType": "YulBlock",
																"src": "357:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "366:1:13",
																					"nodeType": "YulLiteral",
																					"src": "366:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "369:1:13",
																					"nodeType": "YulLiteral",
																					"src": "369:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "359:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "359:6:13"
																			},
																			"nativeSrc": "359:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "359:12:13"
																		},
																		"nativeSrc": "359:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "359:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "332:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "332:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "341:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "341:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "328:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "328:3:13"
																		},
																		"nativeSrc": "328:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "328:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "353:2:13",
																		"nodeType": "YulLiteral",
																		"src": "353:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "324:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "324:3:13"
																},
																"nativeSrc": "324:32:13",
																"nodeType": "YulFunctionCall",
																"src": "324:32:13"
															},
															"nativeSrc": "321:52:13",
															"nodeType": "YulIf",
															"src": "321:52:13"
														},
														{
															"nativeSrc": "382:50:13",
															"nodeType": "YulAssignment",
															"src": "382:50:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "422:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "392:29:13",
																	"nodeType": "YulIdentifier",
																	"src": "392:29:13"
																},
																"nativeSrc": "392:40:13",
																"nodeType": "YulFunctionCall",
																"src": "392:40:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "382:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "382:6:13"
																}
															]
														},
														{
															"nativeSrc": "441:59:13",
															"nodeType": "YulAssignment",
															"src": "441:59:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "485:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "485:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "496:2:13",
																				"nodeType": "YulLiteral",
																				"src": "496:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "481:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "481:3:13"
																		},
																		"nativeSrc": "481:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "481:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "451:29:13",
																	"nodeType": "YulIdentifier",
																	"src": "451:29:13"
																},
																"nativeSrc": "451:49:13",
																"nodeType": "YulFunctionCall",
																"src": "451:49:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "441:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "441:6:13"
																}
															]
														},
														{
															"nativeSrc": "509:59:13",
															"nodeType": "YulAssignment",
															"src": "509:59:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "553:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "553:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "564:2:13",
																				"nodeType": "YulLiteral",
																				"src": "564:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "549:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "549:3:13"
																		},
																		"nativeSrc": "549:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "549:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "519:29:13",
																	"nodeType": "YulIdentifier",
																	"src": "519:29:13"
																},
																"nativeSrc": "519:49:13",
																"nodeType": "YulFunctionCall",
																"src": "519:49:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "509:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "509:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_address_fromMemory",
												"nativeSrc": "196:378:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "261:9:13",
														"nodeType": "YulTypedName",
														"src": "261:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "272:7:13",
														"nodeType": "YulTypedName",
														"src": "272:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "284:6:13",
														"nodeType": "YulTypedName",
														"src": "284:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "292:6:13",
														"nodeType": "YulTypedName",
														"src": "292:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "300:6:13",
														"nodeType": "YulTypedName",
														"src": "300:6:13",
														"type": ""
													}
												],
												"src": "196:378:13"
											},
											{
												"body": {
													"nativeSrc": "680:102:13",
													"nodeType": "YulBlock",
													"src": "680:102:13",
													"statements": [
														{
															"nativeSrc": "690:26:13",
															"nodeType": "YulAssignment",
															"src": "690:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "702:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "702:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "713:2:13",
																		"nodeType": "YulLiteral",
																		"src": "713:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "698:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "698:3:13"
																},
																"nativeSrc": "698:18:13",
																"nodeType": "YulFunctionCall",
																"src": "698:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "690:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "690:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "732:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "732:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "747:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "747:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "763:3:13",
																								"nodeType": "YulLiteral",
																								"src": "763:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "768:1:13",
																								"nodeType": "YulLiteral",
																								"src": "768:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "759:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "759:3:13"
																						},
																						"nativeSrc": "759:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "759:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "772:1:13",
																						"nodeType": "YulLiteral",
																						"src": "772:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "755:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "755:3:13"
																				},
																				"nativeSrc": "755:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "755:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "743:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "743:3:13"
																		},
																		"nativeSrc": "743:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "743:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "725:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "725:6:13"
																},
																"nativeSrc": "725:51:13",
																"nodeType": "YulFunctionCall",
																"src": "725:51:13"
															},
															"nativeSrc": "725:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "725:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "579:203:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "649:9:13",
														"nodeType": "YulTypedName",
														"src": "649:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "660:6:13",
														"nodeType": "YulTypedName",
														"src": "660:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "671:4:13",
														"nodeType": "YulTypedName",
														"src": "671:4:13",
														"type": ""
													}
												],
												"src": "579:203:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a060405234801561000f575f5ffd5b5060405161077a38038061077a83398101604081905261002e9161016f565b816001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610105565b506001600160a01b03831661008d5760405163325c055b60e21b815260040160405180910390fd5b6001600160a01b0382166100b45760405163016ed19f60e21b815260040160405180910390fd5b6001600160a01b0381166100db5760405163074f166b60e31b815260040160405180910390fd5b6001600160a01b03928316608052600280546001600160a01b0319169190931617909155506101af565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461016a575f5ffd5b919050565b5f5f5f60608486031215610181575f5ffd5b61018a84610154565b925061019860208501610154565b91506101a660408501610154565b90509250925092565b6080516105ad6101cd5f395f818160fd015261026901526105ad5ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146100e85780639c8d69c5146100f8578063d86f77fc1461011f578063f2fde38b14610132575f5ffd5b80631de933c714610089578063335b7fa21461009e5780635af82abf146100cd578063715018a6146100e0575b5f5ffd5b61009c61009736600461050e565b610145565b005b6100b16100ac36600461052e565b610196565b6040516001600160a01b03909116815260200160405180910390f35b6002546100b1906001600160a01b031681565b61009c6101be565b5f546001600160a01b03166100b1565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b6100b161012d366004610545565b6101d1565b61009c61014036600461050e565b610391565b61014d6103d3565b6001600160a01b0381166101745760405163074f166b60e31b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600181815481106101a5575f80fd5b5f918252602090912001546001600160a01b0316905081565b6101c66103d3565b6101cf5f6103ff565b565b6002545f906001600160a01b031633146101fe57604051635c378d3160e11b815260040160405180910390fd5b5f831161021e576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0382166102455760405163e358806360e01b815260040160405180910390fd5b8361026357604051639dd854d360e01b815260040160405180910390fd5b5f6102967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661044e565b600254604051635f76167560e01b81526001600160a01b03918216600482015260248101879052858216604482015260648101889052919250821690635f761675906084015f604051808303815f87803b1580156102f2575f5ffd5b505af1158015610304573d5f5f3e3d5ffd5b50506001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0385169081179091556040518781529092507fa99c90577b80d735a56496629133b35ecc581a0e5d29b949147bbca7730e6d5a915060200160405180910390a2949350505050565b6103996103d3565b6001600160a01b0381166103c757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6103d0816103ff565b50565b5f546001600160a01b031633146101cf5760405163118cdaa760e01b81523360048201526024016103be565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f610459825f61045f565b92915050565b5f8147101561048a5760405163cf47918160e01b8152476004820152602481018390526044016103be565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166104595760405163b06ebf3d60e01b815260040160405180910390fd5b80356001600160a01b0381168114610509575f5ffd5b919050565b5f6020828403121561051e575f5ffd5b610527826104f3565b9392505050565b5f6020828403121561053e575f5ffd5b5035919050565b5f5f5f60608486031215610557575f5ffd5b833592506020840135915061056e604085016104f3565b9050925092509256fea26469706673582212207c1b473940862bc67c5ae0b215bec3aa2a9013b12a655520cdf2848c4774557964736f6c634300081c0033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x77A CODESIZE SUB DUP1 PUSH2 0x77A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0x16F JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x65 DUP2 PUSH2 0x105 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x325C055B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x16ED19F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDB JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x80 MSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE POP PUSH2 0x1AF JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x16A JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x181 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x18A DUP5 PUSH2 0x154 JUMP JUMPDEST SWAP3 POP PUSH2 0x198 PUSH1 0x20 DUP6 ADD PUSH2 0x154 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A6 PUSH1 0x40 DUP6 ADD PUSH2 0x154 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x5AD PUSH2 0x1CD PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH1 0xFD ADD MSTORE PUSH2 0x269 ADD MSTORE PUSH2 0x5AD PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0x9C8D69C5 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xD86F77FC EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x132 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1DE933C7 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x335B7FA2 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x5AF82ABF EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE0 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x50E JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x52E JUMP JUMPDEST PUSH2 0x196 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xB1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x9C PUSH2 0x1BE JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB1 JUMP JUMPDEST PUSH2 0xB1 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x545 JUMP JUMPDEST PUSH2 0x1D1 JUMP JUMPDEST PUSH2 0x9C PUSH2 0x140 CALLDATASIZE PUSH1 0x4 PUSH2 0x50E JUMP JUMPDEST PUSH2 0x391 JUMP JUMPDEST PUSH2 0x14D PUSH2 0x3D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x174 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1A5 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x1CF PUSH0 PUSH2 0x3FF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C378D31 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP4 GT PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x245 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x296 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x44E JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F761675 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE DUP6 DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP3 POP DUP3 AND SWAP1 PUSH4 0x5F761675 SWAP1 PUSH1 0x84 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x304 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 ADD DUP3 SSTORE PUSH0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD DUP8 DUP2 MSTORE SWAP1 SWAP3 POP PUSH32 0xA99C90577B80D735A56496629133B35ECC581A0E5D29B949147BBCA7730E6D5A SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x399 PUSH2 0x3D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3D0 DUP2 PUSH2 0x3FF JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x459 DUP3 PUSH0 PUSH2 0x45F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SELFBALANCE LT ISZERO PUSH2 0x48A JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 DUP4 PUSH1 0x60 SHL PUSH1 0xE8 SHR OR PUSH0 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 DUP4 PUSH1 0x78 SHL OR PUSH1 0x20 MSTORE PUSH1 0x37 PUSH1 0x9 DUP4 CREATE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06EBF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51E JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x527 DUP3 PUSH2 0x4F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53E JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x557 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x56E PUSH1 0x40 DUP6 ADD PUSH2 0x4F3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x1B473940862BC67C5AE0B215BEC3AA2A9013B12A655520CDF2848C4774 SSTORE PUSH26 0x64736F6C634300081C0033000000000000000000000000000000 ",
							"sourceMap": "263:3026:12:-:0;;;839:478;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;958:6;-1:-1:-1;;;;;1273:26:4;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:4;;1350:1;1322:31;;;725:51:13;698:18;;1322:31:4;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;;;;;;997:38:12;::::1;976:113;;;;-1:-1:-1::0;;;976:113:12::1;;;;;;;;;;;;-1:-1:-1::0;;;;;1107:20:12;::::1;1099:52;;;;-1:-1:-1::0;;;1099:52:12::1;;;;;;;;;;;;-1:-1:-1::0;;;;;1169:23:12;::::1;1161:58;;;;-1:-1:-1::0;;;1161:58:12::1;;;;;;;;;;;;-1:-1:-1::0;;;;;1230:50:12;;::::1;;::::0;1290:8:::1;:20:::0;;-1:-1:-1;;;;;;1290:20:12::1;::::0;;;::::1;;::::0;;;-1:-1:-1;263:3026:12;;2912:187:4;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:4;;;-1:-1:-1;;;;;;3020:17:4;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:177:13:-;93:13;;-1:-1:-1;;;;;135:31:13;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:378::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;451:49;496:2;485:9;481:18;451:49;:::i;:::-;441:59;;519:49;564:2;553:9;549:18;519:49;:::i;:::-;509:59;;196:378;;;;;:::o;579:203::-;263:3026:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkOwner_639": {
									"entryPoint": 979,
									"id": 639,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1113": {
									"entryPoint": null,
									"id": 1113,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_701": {
									"entryPoint": 1023,
									"id": 701,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@clone_725": {
									"entryPoint": 1102,
									"id": 725,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@clone_770": {
									"entryPoint": 1119,
									"id": 770,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@createDispenser_2864": {
									"entryPoint": 465,
									"id": 2864,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@director_2706": {
									"entryPoint": null,
									"id": 2706,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@dispenserImplementation_2701": {
									"entryPoint": null,
									"id": 2701,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@dispensers_2704": {
									"entryPoint": 406,
									"id": 2704,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_622": {
									"entryPoint": null,
									"id": 622,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_653": {
									"entryPoint": 446,
									"id": 653,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_681": {
									"entryPoint": 913,
									"id": 681,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@updateDirector_2888": {
									"entryPoint": 325,
									"id": 2888,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 1267,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1294,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_uint256t_address": {
									"entryPoint": 1349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1326,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_address_t_bytes32__to_t_address_t_uint256_t_address_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:2075:13",
										"nodeType": "YulBlock",
										"src": "0:2075:13",
										"statements": [
											{
												"nativeSrc": "6:3:13",
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "63:124:13",
													"nodeType": "YulBlock",
													"src": "63:124:13",
													"statements": [
														{
															"nativeSrc": "73:29:13",
															"nodeType": "YulAssignment",
															"src": "73:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "95:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "82:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:13"
																},
																"nativeSrc": "82:20:13",
																"nodeType": "YulFunctionCall",
																"src": "82:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "73:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:13"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "165:16:13",
																"nodeType": "YulBlock",
																"src": "165:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "174:1:13",
																					"nodeType": "YulLiteral",
																					"src": "174:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "177:1:13",
																					"nodeType": "YulLiteral",
																					"src": "177:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "167:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:13"
																			},
																			"nativeSrc": "167:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:13"
																		},
																		"nativeSrc": "167:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "124:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "135:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "150:3:13",
																										"nodeType": "YulLiteral",
																										"src": "150:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "155:1:13",
																										"nodeType": "YulLiteral",
																										"src": "155:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "146:3:13",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:13"
																								},
																								"nativeSrc": "146:11:13",
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:13"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "159:1:13",
																								"nodeType": "YulLiteral",
																								"src": "159:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "142:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:13"
																						},
																						"nativeSrc": "142:19:13",
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "131:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:13"
																				},
																				"nativeSrc": "131:31:13",
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "121:2:13",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:13"
																		},
																		"nativeSrc": "121:42:13",
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "114:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:13"
																},
																"nativeSrc": "114:50:13",
																"nodeType": "YulFunctionCall",
																"src": "114:50:13"
															},
															"nativeSrc": "111:70:13",
															"nodeType": "YulIf",
															"src": "111:70:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "14:173:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "42:6:13",
														"nodeType": "YulTypedName",
														"src": "42:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "53:5:13",
														"nodeType": "YulTypedName",
														"src": "53:5:13",
														"type": ""
													}
												],
												"src": "14:173:13"
											},
											{
												"body": {
													"nativeSrc": "262:116:13",
													"nodeType": "YulBlock",
													"src": "262:116:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "308:16:13",
																"nodeType": "YulBlock",
																"src": "308:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "317:1:13",
																					"nodeType": "YulLiteral",
																					"src": "317:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "320:1:13",
																					"nodeType": "YulLiteral",
																					"src": "320:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "310:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:13"
																			},
																			"nativeSrc": "310:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:13"
																		},
																		"nativeSrc": "310:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "283:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "292:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "279:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:13"
																		},
																		"nativeSrc": "279:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "304:2:13",
																		"nodeType": "YulLiteral",
																		"src": "304:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "275:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:13"
																},
																"nativeSrc": "275:32:13",
																"nodeType": "YulFunctionCall",
																"src": "275:32:13"
															},
															"nativeSrc": "272:52:13",
															"nodeType": "YulIf",
															"src": "272:52:13"
														},
														{
															"nativeSrc": "333:39:13",
															"nodeType": "YulAssignment",
															"src": "333:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "362:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "343:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:13"
																},
																"nativeSrc": "343:29:13",
																"nodeType": "YulFunctionCall",
																"src": "343:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "333:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "192:186:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "228:9:13",
														"nodeType": "YulTypedName",
														"src": "228:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "239:7:13",
														"nodeType": "YulTypedName",
														"src": "239:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "251:6:13",
														"nodeType": "YulTypedName",
														"src": "251:6:13",
														"type": ""
													}
												],
												"src": "192:186:13"
											},
											{
												"body": {
													"nativeSrc": "453:156:13",
													"nodeType": "YulBlock",
													"src": "453:156:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "499:16:13",
																"nodeType": "YulBlock",
																"src": "499:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "508:1:13",
																					"nodeType": "YulLiteral",
																					"src": "508:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "511:1:13",
																					"nodeType": "YulLiteral",
																					"src": "511:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "501:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "501:6:13"
																			},
																			"nativeSrc": "501:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "501:12:13"
																		},
																		"nativeSrc": "501:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "501:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "474:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "474:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "483:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "483:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "470:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "470:3:13"
																		},
																		"nativeSrc": "470:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "470:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "495:2:13",
																		"nodeType": "YulLiteral",
																		"src": "495:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "466:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "466:3:13"
																},
																"nativeSrc": "466:32:13",
																"nodeType": "YulFunctionCall",
																"src": "466:32:13"
															},
															"nativeSrc": "463:52:13",
															"nodeType": "YulIf",
															"src": "463:52:13"
														},
														{
															"nativeSrc": "524:14:13",
															"nodeType": "YulVariableDeclaration",
															"src": "524:14:13",
															"value": {
																"kind": "number",
																"nativeSrc": "537:1:13",
																"nodeType": "YulLiteral",
																"src": "537:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "528:5:13",
																	"nodeType": "YulTypedName",
																	"src": "528:5:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "547:32:13",
															"nodeType": "YulAssignment",
															"src": "547:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "569:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "569:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "556:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "556:12:13"
																},
																"nativeSrc": "556:23:13",
																"nodeType": "YulFunctionCall",
																"src": "556:23:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "547:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "547:5:13"
																}
															]
														},
														{
															"nativeSrc": "588:15:13",
															"nodeType": "YulAssignment",
															"src": "588:15:13",
															"value": {
																"name": "value",
																"nativeSrc": "598:5:13",
																"nodeType": "YulIdentifier",
																"src": "598:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "588:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "588:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "383:226:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "419:9:13",
														"nodeType": "YulTypedName",
														"src": "419:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "430:7:13",
														"nodeType": "YulTypedName",
														"src": "430:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "442:6:13",
														"nodeType": "YulTypedName",
														"src": "442:6:13",
														"type": ""
													}
												],
												"src": "383:226:13"
											},
											{
												"body": {
													"nativeSrc": "715:102:13",
													"nodeType": "YulBlock",
													"src": "715:102:13",
													"statements": [
														{
															"nativeSrc": "725:26:13",
															"nodeType": "YulAssignment",
															"src": "725:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "737:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "737:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "748:2:13",
																		"nodeType": "YulLiteral",
																		"src": "748:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "733:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "733:3:13"
																},
																"nativeSrc": "733:18:13",
																"nodeType": "YulFunctionCall",
																"src": "733:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "725:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "725:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "767:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "767:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "782:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "782:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "798:3:13",
																								"nodeType": "YulLiteral",
																								"src": "798:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "803:1:13",
																								"nodeType": "YulLiteral",
																								"src": "803:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "794:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "794:3:13"
																						},
																						"nativeSrc": "794:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "794:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "807:1:13",
																						"nodeType": "YulLiteral",
																						"src": "807:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "790:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "790:3:13"
																				},
																				"nativeSrc": "790:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "790:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "778:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "778:3:13"
																		},
																		"nativeSrc": "778:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "778:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "760:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "760:6:13"
																},
																"nativeSrc": "760:51:13",
																"nodeType": "YulFunctionCall",
																"src": "760:51:13"
															},
															"nativeSrc": "760:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "760:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "614:203:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "684:9:13",
														"nodeType": "YulTypedName",
														"src": "684:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "695:6:13",
														"nodeType": "YulTypedName",
														"src": "695:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "706:4:13",
														"nodeType": "YulTypedName",
														"src": "706:4:13",
														"type": ""
													}
												],
												"src": "614:203:13"
											},
											{
												"body": {
													"nativeSrc": "926:264:13",
													"nodeType": "YulBlock",
													"src": "926:264:13",
													"statements": [
														{
															"body": {
																"nativeSrc": "972:16:13",
																"nodeType": "YulBlock",
																"src": "972:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "981:1:13",
																					"nodeType": "YulLiteral",
																					"src": "981:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "984:1:13",
																					"nodeType": "YulLiteral",
																					"src": "984:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "974:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "974:6:13"
																			},
																			"nativeSrc": "974:12:13",
																			"nodeType": "YulFunctionCall",
																			"src": "974:12:13"
																		},
																		"nativeSrc": "974:12:13",
																		"nodeType": "YulExpressionStatement",
																		"src": "974:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "947:7:13",
																				"nodeType": "YulIdentifier",
																				"src": "947:7:13"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "956:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "956:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "943:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "943:3:13"
																		},
																		"nativeSrc": "943:23:13",
																		"nodeType": "YulFunctionCall",
																		"src": "943:23:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "968:2:13",
																		"nodeType": "YulLiteral",
																		"src": "968:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "939:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "939:3:13"
																},
																"nativeSrc": "939:32:13",
																"nodeType": "YulFunctionCall",
																"src": "939:32:13"
															},
															"nativeSrc": "936:52:13",
															"nodeType": "YulIf",
															"src": "936:52:13"
														},
														{
															"nativeSrc": "997:33:13",
															"nodeType": "YulAssignment",
															"src": "997:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1020:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1020:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1007:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "1007:12:13"
																},
																"nativeSrc": "1007:23:13",
																"nodeType": "YulFunctionCall",
																"src": "1007:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "997:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "997:6:13"
																}
															]
														},
														{
															"nativeSrc": "1039:14:13",
															"nodeType": "YulVariableDeclaration",
															"src": "1039:14:13",
															"value": {
																"kind": "number",
																"nativeSrc": "1052:1:13",
																"nodeType": "YulLiteral",
																"src": "1052:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1043:5:13",
																	"nodeType": "YulTypedName",
																	"src": "1043:5:13",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1062:41:13",
															"nodeType": "YulAssignment",
															"src": "1062:41:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1088:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1088:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1099:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1099:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1084:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1084:3:13"
																		},
																		"nativeSrc": "1084:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1084:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1071:12:13",
																	"nodeType": "YulIdentifier",
																	"src": "1071:12:13"
																},
																"nativeSrc": "1071:32:13",
																"nodeType": "YulFunctionCall",
																"src": "1071:32:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1062:5:13",
																	"nodeType": "YulIdentifier",
																	"src": "1062:5:13"
																}
															]
														},
														{
															"nativeSrc": "1112:15:13",
															"nodeType": "YulAssignment",
															"src": "1112:15:13",
															"value": {
																"name": "value",
																"nativeSrc": "1122:5:13",
																"nodeType": "YulIdentifier",
																"src": "1122:5:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1112:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1112:6:13"
																}
															]
														},
														{
															"nativeSrc": "1136:48:13",
															"nodeType": "YulAssignment",
															"src": "1136:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1169:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1169:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1180:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1180:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1165:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1165:3:13"
																		},
																		"nativeSrc": "1165:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1165:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1146:18:13",
																	"nodeType": "YulIdentifier",
																	"src": "1146:18:13"
																},
																"nativeSrc": "1146:38:13",
																"nodeType": "YulFunctionCall",
																"src": "1146:38:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1136:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1136:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_uint256t_address",
												"nativeSrc": "822:368:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "876:9:13",
														"nodeType": "YulTypedName",
														"src": "876:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "887:7:13",
														"nodeType": "YulTypedName",
														"src": "887:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "899:6:13",
														"nodeType": "YulTypedName",
														"src": "899:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "907:6:13",
														"nodeType": "YulTypedName",
														"src": "907:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "915:6:13",
														"nodeType": "YulTypedName",
														"src": "915:6:13",
														"type": ""
													}
												],
												"src": "822:368:13"
											},
											{
												"body": {
													"nativeSrc": "1380:258:13",
													"nodeType": "YulBlock",
													"src": "1380:258:13",
													"statements": [
														{
															"nativeSrc": "1390:27:13",
															"nodeType": "YulAssignment",
															"src": "1390:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1402:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1402:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1413:3:13",
																		"nodeType": "YulLiteral",
																		"src": "1413:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1398:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1398:3:13"
																},
																"nativeSrc": "1398:19:13",
																"nodeType": "YulFunctionCall",
																"src": "1398:19:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1390:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1390:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1433:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1433:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1448:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1448:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1464:3:13",
																								"nodeType": "YulLiteral",
																								"src": "1464:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1469:1:13",
																								"nodeType": "YulLiteral",
																								"src": "1469:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1460:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1460:3:13"
																						},
																						"nativeSrc": "1460:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "1460:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1473:1:13",
																						"nodeType": "YulLiteral",
																						"src": "1473:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1456:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1456:3:13"
																				},
																				"nativeSrc": "1456:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1456:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1444:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1444:3:13"
																		},
																		"nativeSrc": "1444:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1444:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1426:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1426:6:13"
																},
																"nativeSrc": "1426:51:13",
																"nodeType": "YulFunctionCall",
																"src": "1426:51:13"
															},
															"nativeSrc": "1426:51:13",
															"nodeType": "YulExpressionStatement",
															"src": "1426:51:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1497:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1497:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1508:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1508:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1493:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1493:3:13"
																		},
																		"nativeSrc": "1493:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1493:18:13"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "1513:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1513:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1486:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1486:6:13"
																},
																"nativeSrc": "1486:34:13",
																"nodeType": "YulFunctionCall",
																"src": "1486:34:13"
															},
															"nativeSrc": "1486:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "1486:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1540:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1540:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1551:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1551:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1536:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1536:3:13"
																		},
																		"nativeSrc": "1536:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1536:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "1560:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "1560:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1576:3:13",
																								"nodeType": "YulLiteral",
																								"src": "1576:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1581:1:13",
																								"nodeType": "YulLiteral",
																								"src": "1581:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1572:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1572:3:13"
																						},
																						"nativeSrc": "1572:11:13",
																						"nodeType": "YulFunctionCall",
																						"src": "1572:11:13"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1585:1:13",
																						"nodeType": "YulLiteral",
																						"src": "1585:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1568:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "1568:3:13"
																				},
																				"nativeSrc": "1568:19:13",
																				"nodeType": "YulFunctionCall",
																				"src": "1568:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1556:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1556:3:13"
																		},
																		"nativeSrc": "1556:32:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1556:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1529:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1529:6:13"
																},
																"nativeSrc": "1529:60:13",
																"nodeType": "YulFunctionCall",
																"src": "1529:60:13"
															},
															"nativeSrc": "1529:60:13",
															"nodeType": "YulExpressionStatement",
															"src": "1529:60:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1609:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "1609:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1620:2:13",
																				"nodeType": "YulLiteral",
																				"src": "1620:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1605:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "1605:3:13"
																		},
																		"nativeSrc": "1605:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "1605:18:13"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "1625:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1625:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1598:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1598:6:13"
																},
																"nativeSrc": "1598:34:13",
																"nodeType": "YulFunctionCall",
																"src": "1598:34:13"
															},
															"nativeSrc": "1598:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "1598:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_address_t_bytes32__to_t_address_t_uint256_t_address_t_bytes32__fromStack_reversed",
												"nativeSrc": "1195:443:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1325:9:13",
														"nodeType": "YulTypedName",
														"src": "1325:9:13",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "1336:6:13",
														"nodeType": "YulTypedName",
														"src": "1336:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1344:6:13",
														"nodeType": "YulTypedName",
														"src": "1344:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1352:6:13",
														"nodeType": "YulTypedName",
														"src": "1352:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1360:6:13",
														"nodeType": "YulTypedName",
														"src": "1360:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1371:4:13",
														"nodeType": "YulTypedName",
														"src": "1371:4:13",
														"type": ""
													}
												],
												"src": "1195:443:13"
											},
											{
												"body": {
													"nativeSrc": "1744:76:13",
													"nodeType": "YulBlock",
													"src": "1744:76:13",
													"statements": [
														{
															"nativeSrc": "1754:26:13",
															"nodeType": "YulAssignment",
															"src": "1754:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1766:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1766:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1777:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1777:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1762:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1762:3:13"
																},
																"nativeSrc": "1762:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1762:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1754:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1754:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1796:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1796:9:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1807:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "1807:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1789:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1789:6:13"
																},
																"nativeSrc": "1789:25:13",
																"nodeType": "YulFunctionCall",
																"src": "1789:25:13"
															},
															"nativeSrc": "1789:25:13",
															"nodeType": "YulExpressionStatement",
															"src": "1789:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1643:177:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1713:9:13",
														"nodeType": "YulTypedName",
														"src": "1713:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1724:6:13",
														"nodeType": "YulTypedName",
														"src": "1724:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1735:4:13",
														"nodeType": "YulTypedName",
														"src": "1735:4:13",
														"type": ""
													}
												],
												"src": "1643:177:13"
											},
											{
												"body": {
													"nativeSrc": "1954:119:13",
													"nodeType": "YulBlock",
													"src": "1954:119:13",
													"statements": [
														{
															"nativeSrc": "1964:26:13",
															"nodeType": "YulAssignment",
															"src": "1964:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1976:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "1976:9:13"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1987:2:13",
																		"nodeType": "YulLiteral",
																		"src": "1987:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1972:3:13",
																	"nodeType": "YulIdentifier",
																	"src": "1972:3:13"
																},
																"nativeSrc": "1972:18:13",
																"nodeType": "YulFunctionCall",
																"src": "1972:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1964:4:13",
																	"nodeType": "YulIdentifier",
																	"src": "1964:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2006:9:13",
																		"nodeType": "YulIdentifier",
																		"src": "2006:9:13"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2017:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2017:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1999:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "1999:6:13"
																},
																"nativeSrc": "1999:25:13",
																"nodeType": "YulFunctionCall",
																"src": "1999:25:13"
															},
															"nativeSrc": "1999:25:13",
															"nodeType": "YulExpressionStatement",
															"src": "1999:25:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2044:9:13",
																				"nodeType": "YulIdentifier",
																				"src": "2044:9:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2055:2:13",
																				"nodeType": "YulLiteral",
																				"src": "2055:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2040:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2040:3:13"
																		},
																		"nativeSrc": "2040:18:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2040:18:13"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "2060:6:13",
																		"nodeType": "YulIdentifier",
																		"src": "2060:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2033:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2033:6:13"
																},
																"nativeSrc": "2033:34:13",
																"nodeType": "YulFunctionCall",
																"src": "2033:34:13"
															},
															"nativeSrc": "2033:34:13",
															"nodeType": "YulExpressionStatement",
															"src": "2033:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "1825:248:13",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1915:9:13",
														"nodeType": "YulTypedName",
														"src": "1915:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1926:6:13",
														"nodeType": "YulTypedName",
														"src": "1926:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1934:6:13",
														"nodeType": "YulTypedName",
														"src": "1934:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1945:4:13",
														"nodeType": "YulTypedName",
														"src": "1945:4:13",
														"type": ""
													}
												],
												"src": "1825:248:13"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_bytes32__to_t_address_t_uint256_t_address_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2701": [
									{
										"length": 32,
										"start": 253
									},
									{
										"length": 32,
										"start": 617
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80638da5cb5b116100585780638da5cb5b146100e85780639c8d69c5146100f8578063d86f77fc1461011f578063f2fde38b14610132575f5ffd5b80631de933c714610089578063335b7fa21461009e5780635af82abf146100cd578063715018a6146100e0575b5f5ffd5b61009c61009736600461050e565b610145565b005b6100b16100ac36600461052e565b610196565b6040516001600160a01b03909116815260200160405180910390f35b6002546100b1906001600160a01b031681565b61009c6101be565b5f546001600160a01b03166100b1565b6100b17f000000000000000000000000000000000000000000000000000000000000000081565b6100b161012d366004610545565b6101d1565b61009c61014036600461050e565b610391565b61014d6103d3565b6001600160a01b0381166101745760405163074f166b60e31b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600181815481106101a5575f80fd5b5f918252602090912001546001600160a01b0316905081565b6101c66103d3565b6101cf5f6103ff565b565b6002545f906001600160a01b031633146101fe57604051635c378d3160e11b815260040160405180910390fd5b5f831161021e576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0382166102455760405163e358806360e01b815260040160405180910390fd5b8361026357604051639dd854d360e01b815260040160405180910390fd5b5f6102967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661044e565b600254604051635f76167560e01b81526001600160a01b03918216600482015260248101879052858216604482015260648101889052919250821690635f761675906084015f604051808303815f87803b1580156102f2575f5ffd5b505af1158015610304573d5f5f3e3d5ffd5b50506001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0385169081179091556040518781529092507fa99c90577b80d735a56496629133b35ecc581a0e5d29b949147bbca7730e6d5a915060200160405180910390a2949350505050565b6103996103d3565b6001600160a01b0381166103c757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6103d0816103ff565b50565b5f546001600160a01b031633146101cf5760405163118cdaa760e01b81523360048201526024016103be565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f610459825f61045f565b92915050565b5f8147101561048a5760405163cf47918160e01b8152476004820152602481018390526044016103be565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c175f526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166104595760405163b06ebf3d60e01b815260040160405180910390fd5b80356001600160a01b0381168114610509575f5ffd5b919050565b5f6020828403121561051e575f5ffd5b610527826104f3565b9392505050565b5f6020828403121561053e575f5ffd5b5035919050565b5f5f5f60608486031215610557575f5ffd5b833592506020840135915061056e604085016104f3565b9050925092509256fea26469706673582212207c1b473940862bc67c5ae0b215bec3aa2a9013b12a655520cdf2848c4774557964736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x85 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0x9C8D69C5 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0xD86F77FC EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x132 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x1DE933C7 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x335B7FA2 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x5AF82ABF EQ PUSH2 0xCD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xE0 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x50E JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0xAC CALLDATASIZE PUSH1 0x4 PUSH2 0x52E JUMP JUMPDEST PUSH2 0x196 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xB1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x9C PUSH2 0x1BE JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB1 JUMP JUMPDEST PUSH2 0xB1 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xB1 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x545 JUMP JUMPDEST PUSH2 0x1D1 JUMP JUMPDEST PUSH2 0x9C PUSH2 0x140 CALLDATASIZE PUSH1 0x4 PUSH2 0x50E JUMP JUMPDEST PUSH2 0x391 JUMP JUMPDEST PUSH2 0x14D PUSH2 0x3D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x174 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1A5 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x1CF PUSH0 PUSH2 0x3FF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C378D31 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP4 GT PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x245 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x296 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x44E JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F761675 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP8 SWAP1 MSTORE DUP6 DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP3 POP DUP3 AND SWAP1 PUSH4 0x5F761675 SWAP1 PUSH1 0x84 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x304 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 ADD DUP3 SSTORE PUSH0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD DUP8 DUP2 MSTORE SWAP1 SWAP3 POP PUSH32 0xA99C90577B80D735A56496629133B35ECC581A0E5D29B949147BBCA7730E6D5A SWAP2 POP PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x399 PUSH2 0x3D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3D0 DUP2 PUSH2 0x3FF JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1CF JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x459 DUP3 PUSH0 PUSH2 0x45F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SELFBALANCE LT ISZERO PUSH2 0x48A JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3BE JUMP JUMPDEST PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 DUP4 PUSH1 0x60 SHL PUSH1 0xE8 SHR OR PUSH0 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 DUP4 PUSH1 0x78 SHL OR PUSH1 0x20 MSTORE PUSH1 0x37 PUSH1 0x9 DUP4 CREATE SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB06EBF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x51E JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x527 DUP3 PUSH2 0x4F3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x53E JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x557 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x56E PUSH1 0x40 DUP6 ADD PUSH2 0x4F3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x1B473940862BC67C5AE0B215BEC3AA2A9013B12A655520CDF2848C4774 SSTORE PUSH26 0x64736F6C634300081C0033000000000000000000000000000000 ",
							"sourceMap": "263:3026:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3114:173;;;;;;:::i;:::-;;:::i;:::-;;393:27;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;778:32:13;;;760:51;;748:2;733:18;393:27:12;;;;;;;426:23;;;;;-1:-1:-1;;;;;426:23:12;;;2293:101:4;;;:::i;1638:85::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:4;1638:85;;339:48:12;;;;;2138:831;;;;;;:::i;:::-;;:::i;2543:215:4:-;;;;;;:::i;:::-;;:::i;3114:173:12:-;1531:13:4;:11;:13::i;:::-;-1:-1:-1;;;;;3196:25:12;::::1;3188:60;;;;-1:-1:-1::0;;;3188:60:12::1;;;;;;;;;;;;3258:8;:22:::0;;-1:-1:-1;;;;;;3258:22:12::1;-1:-1:-1::0;;;;;3258:22:12;;;::::1;::::0;;;::::1;::::0;;3114:173::o;393:27::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;393:27:12;;-1:-1:-1;393:27:12;:::o;2293:101:4:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;2138:831:12:-;2320:8;;2279:7;;-1:-1:-1;;;;;2320:8:12;2306:10;:22;2298:65;;;;-1:-1:-1;;;2298:65:12;;;;;;;;;;;;2401:1;2381:17;:21;2373:68;;;;-1:-1:-1;;;2373:68:12;;;;;;;;;;;;-1:-1:-1;;;;;2459:24:12;;2451:60;;;;-1:-1:-1;;;2451:60:12;;;;;;;;;;;;2529:11;2521:55;;;;-1:-1:-1;;;2521:55:12;;;;;;;;;;;;2587:22;2612:31;:23;-1:-1:-1;;;;;2612:29:12;;:31::i;:::-;2723:8;;2653:168;;-1:-1:-1;;;2653:168:12;;-1:-1:-1;;;;;2723:8:12;;;2653:168;;;1426:51:13;1493:18;;;1486:34;;;1556:32;;;1536:18;;;1529:60;1605:18;;;1598:34;;;2587:56:12;;-1:-1:-1;2653:56:12;;;;;1398:19:13;;2653:168:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2832:10:12;:31;;;;;;;-1:-1:-1;2832:31:12;;;;;;;;-1:-1:-1;;;;;;2832:31:12;-1:-1:-1;;;;;2832:31:12;;;;;;;;2879:51;;1789:25:13;;;2832:31:12;;-1:-1:-1;2879:51:12;;-1:-1:-1;1777:2:13;1762:18;2879:51:12;;;;;;;2948:14;2138:831;-1:-1:-1;;;;2138:831:12:o;2543:215:4:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:4;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:4;;2700:1:::1;2672:31;::::0;::::1;760:51:13::0;733:18;;2672:31:4::1;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:4;735:10:6;1855:23:4;1851:101;;1901:40;;-1:-1:-1;;;1901:40:4;;735:10:6;1901:40:4;;;760:51:13;733:18;;1901:40:4;614:203:13;2912:187:4;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:4;;;-1:-1:-1;;;;;;3020:17:4;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;1070:123:5:-;1127:16;1162:24;1168:14;1184:1;1162:5;:24::i;:::-;1155:31;1070:123;-1:-1:-1;;1070:123:5:o;1585:910::-;1657:16;1713:5;1689:21;:29;1685:123;;;1741:56;;-1:-1:-1;;;1741:56:5;;1768:21;1741:56;;;1999:25:13;2040:18;;;2033:34;;;1972:18;;1741:56:5;1825:248:13;1685:123:5;2094:48;2076:14;2070:4;2066:25;2060:4;2056:36;2053:90;2047:4;2040:104;2301:32;2284:14;2278:4;2274:25;2271:63;2265:4;2258:77;2380:4;2374;2367:5;2360:25;2348:37;-1:-1:-1;;;;;;2408:22:5;;2404:85;;2453:25;;-1:-1:-1;;;2453:25:5;;;;;;;;;;;14:173:13;82:20;;-1:-1:-1;;;;;131:31:13;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:13:o;383:226::-;442:6;495:2;483:9;474:7;470:23;466:32;463:52;;;511:1;508;501:12;463:52;-1:-1:-1;556:23:13;;383:226;-1:-1:-1;383:226:13:o;822:368::-;899:6;907;915;968:2;956:9;947:7;943:23;939:32;936:52;;;984:1;981;974:12;936:52;1007:23;;;-1:-1:-1;1099:2:13;1084:18;;1071:32;;-1:-1:-1;1146:38:13;1180:2;1165:18;;1146:38;:::i;:::-;1136:48;;822:368;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "290600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"createDispenser(bytes32,uint256,address)": "infinite",
								"director()": "2369",
								"dispenserImplementation()": "infinite",
								"dispensers(uint256)": "4622",
								"owner()": "2317",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "28395",
								"updateDirector(address)": "26768"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "A0"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 839,
									"end": 1317,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "tag",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 839,
									"end": 1317,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 958,
									"end": 964,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 725,
									"end": 776,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 698,
									"end": 716,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 698,
									"end": 716,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "10"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 4,
									"value": "10"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 997,
									"end": 1035,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 997,
									"end": 1035,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "325C055B"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "tag",
									"source": 12,
									"value": "13"
								},
								{
									"begin": 976,
									"end": 1089,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1107,
									"end": 1127,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1107,
									"end": 1127,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "16ED19F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "tag",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 1099,
									"end": 1151,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1169,
									"end": 1192,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1169,
									"end": 1192,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "74F166B"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "tag",
									"source": 12,
									"value": "15"
								},
								{
									"begin": 1161,
									"end": 1219,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1230,
									"end": 1280,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1230,
									"end": 1280,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1230,
									"end": 1280,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1230,
									"end": 1280,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 1230,
									"end": 1280,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1298,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1290,
									"end": 1310,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"modifierDepth": 1,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"modifierDepth": 1,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1290,
									"end": 1310,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "19"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 4,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 4
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 191,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "tag",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 574,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 284,
									"end": 290,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 298,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 300,
									"end": 306,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 353,
									"end": 355,
									"name": "PUSH",
									"source": 13,
									"value": "60"
								},
								{
									"begin": 341,
									"end": 350,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 332,
									"end": 339,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 328,
									"end": 351,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 324,
									"end": 356,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 321,
									"end": 373,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 321,
									"end": 373,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "23"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 369,
									"end": 370,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 366,
									"end": 367,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 359,
									"end": 371,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 321,
									"end": 373,
									"name": "tag",
									"source": 13,
									"value": "23"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 422,
									"end": 431,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 392,
									"end": 432,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 392,
									"end": 432,
									"name": "tag",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 382,
									"end": 432,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 382,
									"end": 432,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 451,
									"end": 500,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "25"
								},
								{
									"begin": 496,
									"end": 498,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 485,
									"end": 494,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 481,
									"end": 499,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 451,
									"end": 500,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 451,
									"end": 500,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 451,
									"end": 500,
									"name": "tag",
									"source": 13,
									"value": "25"
								},
								{
									"begin": 451,
									"end": 500,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 441,
									"end": 500,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 441,
									"end": 500,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 519,
									"end": 568,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "26"
								},
								{
									"begin": 564,
									"end": 566,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 553,
									"end": 562,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 549,
									"end": 567,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 519,
									"end": 568,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 519,
									"end": 568,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 519,
									"end": 568,
									"name": "tag",
									"source": 13,
									"value": "26"
								},
								{
									"begin": 519,
									"end": 568,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 509,
									"end": 568,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 509,
									"end": 568,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 196,
									"end": 574,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 579,
									"end": 782,
									"name": "tag",
									"source": 13,
									"value": "19"
								},
								{
									"begin": 579,
									"end": 782,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "2701"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 3289,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207c1b473940862bc67c5ae0b215bec3aa2a9013b12a655520cdf2848c4774557964736f6c634300081c0033",
									".code": [
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "7"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "9C8D69C5"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "D86F77FC"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "F2FDE38B"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "10"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "1DE933C7"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "335B7FA2"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "5AF82ABF"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "715018A6"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 3289,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "14"
										},
										{
											"begin": 3114,
											"end": 3287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 3114,
											"end": 3287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "STOP",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 393,
											"end": 420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 393,
											"end": 420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "tag",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 778,
											"end": 810,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 778,
											"end": 810,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 778,
											"end": 810,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 760,
											"end": 811,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 760,
											"end": 811,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 748,
											"end": 750,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 733,
											"end": 751,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 426,
											"end": 449,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 426,
											"end": 449,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 426,
											"end": 449,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 426,
											"end": 449,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 426,
											"end": 449,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 426,
											"end": 449,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 426,
											"end": 449,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 426,
											"end": 449,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 426,
											"end": 449,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 339,
											"end": 387,
											"name": "tag",
											"source": 12,
											"value": "8"
										},
										{
											"begin": 339,
											"end": 387,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 339,
											"end": 387,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 339,
											"end": 387,
											"name": "PUSHIMMUTABLE",
											"source": 12,
											"value": "2701"
										},
										{
											"begin": 339,
											"end": 387,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 339,
											"end": 387,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "16"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "35"
										},
										{
											"begin": 2138,
											"end": 2969,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "tag",
											"source": 12,
											"value": "34"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 2138,
											"end": 2969,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 3114,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3196,
											"end": 3221,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3196,
											"end": 3221,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "74F166B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "45"
										},
										{
											"begin": 3188,
											"end": 3248,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3266,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3258,
											"end": 3280,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"modifierDepth": 1,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3258,
											"end": 3280,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 3114,
											"end": 3287,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "KECCAK256",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 393,
											"end": 420,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 393,
											"end": 420,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 393,
											"end": 420,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2320,
											"end": 2328,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 2320,
											"end": 2328,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2279,
											"end": 2286,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2320,
											"end": 2328,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2306,
											"end": 2316,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 2306,
											"end": 2328,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C378D31"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "tag",
											"source": 12,
											"value": "55"
										},
										{
											"begin": 2298,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2401,
											"end": 2402,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2381,
											"end": 2402,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10E41573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 2373,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2459,
											"end": 2483,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2459,
											"end": 2483,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3588063"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "tag",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 2451,
											"end": 2511,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2529,
											"end": 2540,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9DD854D3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "tag",
											"source": 12,
											"value": "58"
										},
										{
											"begin": 2521,
											"end": 2576,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2587,
											"end": 2609,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2612,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 2612,
											"end": 2635,
											"name": "PUSHIMMUTABLE",
											"source": 12,
											"value": "2701"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2612,
											"end": 2641,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2641,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2612,
											"end": 2643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2643,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 2612,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2723,
											"end": 2731,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 2723,
											"end": 2731,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5F761675"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2723,
											"end": 2731,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2723,
											"end": 2731,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2723,
											"end": 2731,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1426,
											"end": 1477,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1493,
											"end": 1511,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1520,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1520,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1486,
											"end": 1520,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1588,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1588,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1588,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1536,
											"end": 1554,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 1536,
											"end": 1554,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1536,
											"end": 1554,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1529,
											"end": 1589,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1598,
											"end": 1632,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 1598,
											"end": 1632,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1598,
											"end": 1632,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2587,
											"end": 2643,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2587,
											"end": 2643,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2653,
											"end": 2709,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2709,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2709,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2709,
											"name": "PUSH",
											"source": 12,
											"value": "5F761675"
										},
										{
											"begin": 2653,
											"end": 2709,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "PUSH",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 1398,
											"end": 1417,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "tag",
											"source": 12,
											"value": "63"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2653,
											"end": 2821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2832,
											"end": 2842,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "PUSH",
											"source": 12,
											"value": "B10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6"
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "AND",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1789,
											"end": 1814,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 1789,
											"end": 1814,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1789,
											"end": 1814,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "PUSH",
											"source": 12,
											"value": "A99C90577B80D735A56496629133B35ECC581A0E5D29B949147BBCA7730E6D5A"
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1777,
											"end": 1779,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1762,
											"end": 1780,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2879,
											"end": 2930,
											"name": "LOG2",
											"source": 12
										},
										{
											"begin": 2948,
											"end": 2962,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2138,
											"end": 2969,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2138,
											"end": 2969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 760,
											"end": 811,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 733,
											"end": 751,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 733,
											"end": 751,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 760,
											"end": 811,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 733,
											"end": 751,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 733,
											"end": 751,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 614,
											"end": 817,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 4,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1070,
											"end": 1193,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1070,
											"end": 1193,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1127,
											"end": 1143,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1162,
											"end": 1186,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1168,
											"end": 1182,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1184,
											"end": 1185,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1162,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1162,
											"end": 1186,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1162,
											"end": 1186,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1162,
											"end": 1186,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1155,
											"end": 1186,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1070,
											"end": 1193,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1070,
											"end": 1193,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1585,
											"end": 2495,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1585,
											"end": 2495,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1657,
											"end": 1673,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1713,
											"end": 1718,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1689,
											"end": 1710,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 1689,
											"end": 1718,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 1685,
											"end": 1808,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1685,
											"end": 1808,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1685,
											"end": 1808,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CF479181"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1768,
											"end": 1789,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1999,
											"end": 2024,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2040,
											"end": 2058,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 2040,
											"end": 2058,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2040,
											"end": 2058,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2033,
											"end": 2067,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2033,
											"end": 2067,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2033,
											"end": 2067,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1972,
											"end": 1990,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 1972,
											"end": 1990,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 1825,
											"end": 2073,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1685,
											"end": 1808,
											"name": "tag",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1685,
											"end": 1808,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2094,
											"end": 2142,
											"name": "PUSH",
											"source": 5,
											"value": "3D602D80600A3D3981F3363D3D373D3D3D363D73000000"
										},
										{
											"begin": 2076,
											"end": 2090,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2070,
											"end": 2074,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 2066,
											"end": 2091,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2060,
											"end": 2064,
											"name": "PUSH",
											"source": 5,
											"value": "E8"
										},
										{
											"begin": 2056,
											"end": 2092,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 2053,
											"end": 2143,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 2047,
											"end": 2051,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2040,
											"end": 2144,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2301,
											"end": 2333,
											"name": "PUSH",
											"source": 5,
											"value": "5AF43D82803E903D91602B57FD5BF3"
										},
										{
											"begin": 2284,
											"end": 2298,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2278,
											"end": 2282,
											"name": "PUSH",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 2274,
											"end": 2299,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2271,
											"end": 2334,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 2265,
											"end": 2269,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2258,
											"end": 2335,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2380,
											"end": 2384,
											"name": "PUSH",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 2374,
											"end": 2378,
											"name": "PUSH",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 2367,
											"end": 2372,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2360,
											"end": 2385,
											"name": "CREATE",
											"source": 5
										},
										{
											"begin": 2348,
											"end": 2385,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2408,
											"end": 2430,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2408,
											"end": 2430,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2404,
											"end": 2489,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2404,
											"end": 2489,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B06EBF3D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2453,
											"end": 2478,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 111,
											"end": 181,
											"name": "tag",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 14,
											"end": 187,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 14,
											"end": 187,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 13,
											"value": "97"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 192,
											"end": 378,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 383,
											"end": 609,
											"name": "tag",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 383,
											"end": 609,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 442,
											"end": 448,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 495,
											"end": 497,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 483,
											"end": 492,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 474,
											"end": 481,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 470,
											"end": 493,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 466,
											"end": 498,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 463,
											"end": 515,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 463,
											"end": 515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 463,
											"end": 515,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 511,
											"end": 512,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 508,
											"end": 509,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 501,
											"end": 513,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 463,
											"end": 515,
											"name": "tag",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 463,
											"end": 515,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 556,
											"end": 579,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 556,
											"end": 579,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 383,
											"end": 609,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 383,
											"end": 609,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "tag",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 899,
											"end": 905,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 913,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 915,
											"end": 921,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 968,
											"end": 970,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 956,
											"end": 965,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 947,
											"end": 954,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 943,
											"end": 966,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 939,
											"end": 971,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 936,
											"end": 988,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 936,
											"end": 988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 936,
											"end": 988,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 984,
											"end": 985,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 981,
											"end": 982,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 974,
											"end": 986,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 936,
											"end": 988,
											"name": "tag",
											"source": 13,
											"value": "103"
										},
										{
											"begin": 936,
											"end": 988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1007,
											"end": 1030,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1007,
											"end": 1030,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1007,
											"end": 1030,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1099,
											"end": 1101,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1084,
											"end": 1102,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1084,
											"end": 1102,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1071,
											"end": 1103,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1071,
											"end": 1103,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1146,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 1180,
											"end": 1182,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1165,
											"end": 1183,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1165,
											"end": 1183,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1184,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "92"
										},
										{
											"begin": 1146,
											"end": 1184,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1146,
											"end": 1184,
											"name": "tag",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 1146,
											"end": 1184,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1136,
											"end": 1184,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1136,
											"end": 1184,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 822,
											"end": 1190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"src/ScholarshipFactory.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"createDispenser(bytes32,uint256,address)": "d86f77fc",
							"director()": "5af82abf",
							"dispenserImplementation()": "9c8d69c5",
							"dispensers(uint256)": "335b7fa2",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"updateDirector(address)": "1de933c7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispenserImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_director\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdminAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDirectorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDirectorCanCreateDispenser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StipendAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dispenserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdStipendAmount\",\"type\":\"uint256\"}],\"name\":\"DispenserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_usdStipendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"createDispenser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"director\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispenserImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dispensers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDirector\",\"type\":\"address\"}],\"name\":\"updateDirector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"createDispenser(bytes32,uint256,address)\":{\"details\":\"The Merkle root is used to verify if a student is eligible for the stipendThe Merkle root must be a valid bytes32 valueThe stipend amount must be greater than zeroThe price feed is used to convert the stipend amount from USD to ETHEmits a DispenserCreated event upon successful creation of the dispenser\",\"params\":{\"_merkleRoot\":\"The Merkle root for stipend eligibility verification\",\"_priceFeed\":\"The address of the Chainlink price feed contract for USD to ETH conversion\",\"_usdStipendAmount\":\"The stipend amount in USD cents (e.g., 1000 for $10.00)\"},\"returns\":{\"_0\":\"The address of the newly created Payroll clone\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDirector(address)\":{\"params\":{\"newDirector\":\"The new director address to be set\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDispenser(bytes32,uint256,address)\":{\"notice\":\"Director creates a new ScholarshipDispenser clone with the specified parameters\"},\"updateDirector(address)\":{\"notice\":\"Only the admin can update the director address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ScholarshipFactory.sol\":\"ScholarshipFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":{\"keccak256\":\"0x7162fa3c6971aa6f0a70160fed018edbb8b1db3af9b034ef3f7c224c3bdb7431\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f212d25e8f357209838ad7ce8ebc89de79906d9fe580566962e889ecb090e6b4\",\"dweb:/ipfs/QmdbLuLwX24VB1Gdrabke584WyaUkuJSWuDzzuRgqAMFge\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://866a11ad89c93ee918078f7a46ae31e17d89216ce64603f0d34be7ed0a5c520e\",\"dweb:/ipfs/QmW3ckLEJg2v2NzuVLNJFmRuerGSipw6Dzg6ntbmqbAGoC\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"src/ScholarshipDispenser.sol\":{\"keccak256\":\"0x97e36b2bf685ea1541d3b65e8b34ed6e6e23eaaa1f5bcf355a87cd26be909096\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1f8aebd50c4b005a094a89b6e25cfb4d2697447386c3b3ef5f19184671df6d25\",\"dweb:/ipfs/QmYKxp9rDrmCsXbNvqee1qVfd6MJz4Vbb5dR9cXpabsHP1\"]},\"src/ScholarshipFactory.sol\":{\"keccak256\":\"0x5ceb20355019cc2322e3f7094c61b5f7368a1e390ff4c289185c1cb15c5f1dcf\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://47ae578fa9be6c68639cf0ff07047dc395970206112d0c562217a29c5b874c27\",\"dweb:/ipfs/Qme9Y2Y6VmHxzWkuY7FRKPbLeH6KB7XckniV21du1t9iEN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 563,
								"contract": "src/ScholarshipFactory.sol:ScholarshipFactory",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 2704,
								"contract": "src/ScholarshipFactory.sol:ScholarshipFactory",
								"label": "dispensers",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 2706,
								"contract": "src/ScholarshipFactory.sol:ScholarshipFactory",
								"label": "director",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createDispenser(bytes32,uint256,address)": {
								"notice": "Director creates a new ScholarshipDispenser clone with the specified parameters"
							},
							"updateDirector(address)": {
								"notice": "Only the admin can update the director address"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
					"exportedSymbols": {
						"AggregatorV3Interface": [
							45
						]
					},
					"id": 46,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AggregatorV3Interface",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 45,
							"linearizedBaseContracts": [
								45
							],
							"name": "AggregatorV3Interface",
							"nameLocation": "120:21:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "313ce567",
									"id": 6,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "155:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "163:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "189:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "189:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "188:7:0"
									},
									"scope": 45,
									"src": "146:50:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7284e416",
									"id": 11,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "description",
									"nameLocation": "209:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "220:2:0"
									},
									"returnParameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "246:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 8,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "246:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "245:15:0"
									},
									"scope": 45,
									"src": "200:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "54fd4d50",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "version",
									"nameLocation": "274:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "307:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:0"
									},
									"scope": 45,
									"src": "265:51:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "9a6fc8f5",
									"id": 31,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoundData",
									"nameLocation": "329:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "_roundId",
												"nameLocation": "354:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "347:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 17,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "347:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:25:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "roundId",
												"nameLocation": "397:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "390:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 20,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "390:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "413:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "406:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 22,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "406:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "startedAt",
												"nameLocation": "429:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "421:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "421:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "updatedAt",
												"nameLocation": "448:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "440:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 26,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "answeredInRound",
												"nameLocation": "466:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "459:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 28,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "459:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "389:93:0"
									},
									"scope": 45,
									"src": "320:163:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "feaf968c",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "latestRoundData",
									"nameLocation": "496:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "511:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "roundId",
												"nameLocation": "556:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "549:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 33,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "549:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "572:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "565:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 35,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "565:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "startedAt",
												"nameLocation": "588:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "580:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "updatedAt",
												"nameLocation": "607:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "599:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "599:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "answeredInRound",
												"nameLocation": "625:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "618:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 41,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "618:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:93:0"
									},
									"scope": 45,
									"src": "487:155:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 46,
							"src": "110:534:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:613:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							554
						],
						"Initializable": [
							508
						],
						"OwnableUpgradeable": [
							240
						]
					},
					"id": 241,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 47,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:1"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 49,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 241,
							"sourceUnit": 555,
							"src": "128:67:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 48,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 554,
										"src": "136:18:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 51,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 241,
							"sourceUnit": 509,
							"src": "196:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 50,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 508,
										"src": "204:13:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 53,
										"name": "Initializable",
										"nameLocations": [
											"789:13:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 508,
										"src": "789:13:1"
									},
									"id": 54,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:1"
								},
								{
									"baseName": {
										"id": 55,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 554,
										"src": "804:18:1"
									},
									"id": 56,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:1"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 52,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 240,
							"linearizedBaseContracts": [
								240,
								554,
								508
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:1",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 60,
									"members": [
										{
											"constant": false,
											"id": 59,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 60,
											"src": "931:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 58,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:1",
									"nodeType": "StructDefinition",
									"scope": 240,
									"src": "899:53:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 63,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:1",
									"nodeType": "VariableDeclaration",
									"scope": 240,
									"src": "1069:116:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 61,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 62,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 70,
										"nodeType": "Block",
										"src": "1270:81:1",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1289:56:1",
													"nodeType": "YulBlock",
													"src": "1289:56:1",
													"statements": [
														{
															"nativeSrc": "1303:32:1",
															"nodeType": "YulAssignment",
															"src": "1303:32:1",
															"value": {
																"name": "OwnableStorageLocation",
																"nativeSrc": "1313:22:1",
																"nodeType": "YulIdentifier",
																"src": "1313:22:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1303:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 67,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 63,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:1",
														"valueSize": 1
													}
												],
												"id": 69,
												"nodeType": "InlineAssembly",
												"src": "1280:65:1"
											}
										]
									},
									"id": 71,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:1"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "1244:24:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 66,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 65,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 60,
														"src": "1244:14:1"
													},
													"referencedDeclaration": 60,
													"src": "1244:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:1"
									},
									"scope": 240,
									"src": "1192:159:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:1",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 76,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "1480:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:1"
									},
									"src": "1447:50:1"
								},
								{
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:1",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 81,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "1616:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 78,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:1"
									},
									"src": "1590:41:1"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 87,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "1664:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "1695:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:1"
									},
									"src": "1637:84:1"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "1919:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "1954:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 95,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "1929:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:1"
											}
										]
									},
									"documentation": {
										"id": 88,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:1",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 93,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 92,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "1902:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:1"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "1871:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 89,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:1"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:1"
									},
									"scope": 240,
									"src": "1847:127:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 126,
										"nodeType": "Block",
										"src": "2062:153:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 107,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 102,
														"src": "2076:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 108,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 111,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 121,
												"nodeType": "IfStatement",
												"src": "2072:95:1",
												"trueBody": {
													"id": 120,
													"nodeType": "Block",
													"src": "2104:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 116,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 114,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 113,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 81,
																	"src": "2125:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 119,
															"nodeType": "RevertStatement",
															"src": "2118:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 123,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 102,
															"src": "2195:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 122,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "2176:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 125,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:1"
											}
										]
									},
									"id": 127,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 105,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 104,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "2045:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:1"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "2014:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:1"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:1"
									},
									"scope": 240,
									"src": "1980:235:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "2324:41:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 130,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "2334:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:1"
											},
											{
												"id": 133,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:1"
											}
										]
									},
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 135,
									"name": "onlyOwner",
									"nameLocation": "2312:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:1"
									},
									"src": "2303:62:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "2496:89:1",
										"statements": [
											{
												"assignments": [
													143
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 150,
														"src": "2506:24:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 142,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 141,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 60,
																"src": "2506:14:1"
															},
															"referencedDeclaration": 60,
															"src": "2506:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 144,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "2533:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$60_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:1"
											},
											{
												"expression": {
													"expression": {
														"id": 147,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2570:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 148,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:1",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 59,
													"src": "2570:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 140,
												"id": 149,
												"nodeType": "Return",
												"src": "2563:15:1"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:1"
									},
									"returnParameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "2487:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:1"
									},
									"scope": 240,
									"src": "2441:144:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 167,
										"nodeType": "Block",
										"src": "2703:117:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 155,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "2717:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 157,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "2728:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 166,
												"nodeType": "IfStatement",
												"src": "2713:101:1",
												"trueBody": {
													"id": 165,
													"nodeType": "Block",
													"src": "2742:72:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 161,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "2790:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 160,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 76,
																	"src": "2763:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 164,
															"nodeType": "RevertStatement",
															"src": "2756:47:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:1"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:1"
									},
									"scope": 240,
									"src": "2658:162:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "3209:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 175,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 178,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 174,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "3219:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:1"
											}
										]
									},
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 172,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 171,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3199:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:1"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:1"
									},
									"scope": 240,
									"src": "3155:101:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 209,
										"nodeType": "Block",
										"src": "3475:145:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 190,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "3489:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 191,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 204,
												"nodeType": "IfStatement",
												"src": "3485:91:1",
												"trueBody": {
													"id": 203,
													"nodeType": "Block",
													"src": "3513:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 199,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 198,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 197,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 200,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 196,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 81,
																	"src": "3534:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 202,
															"nodeType": "RevertStatement",
															"src": "3527:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 206,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "3604:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 205,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "3585:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 208,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:1"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 210,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 188,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 187,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3465:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:1"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "3432:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:1"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:1"
									},
									"scope": 240,
									"src": "3405:215:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "3837:185:1",
										"statements": [
											{
												"assignments": [
													218
												],
												"declarations": [
													{
														"constant": false,
														"id": 218,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 238,
														"src": "3847:24:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 217,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 216,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 60,
																"src": "3847:14:1"
															},
															"referencedDeclaration": 60,
															"src": "3847:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 221,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 219,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "3874:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$60_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:1"
											},
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 238,
														"src": "3904:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 226,
												"initialValue": {
													"expression": {
														"id": 224,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3923:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 225,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:1",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 59,
													"src": "3923:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:1"
											},
											{
												"expression": {
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 227,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3941:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 229,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:1",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 59,
														"src": "3941:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 230,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "3952:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 234,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "3996:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 235,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "4006:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 233,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3975:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "EmitStatement",
												"src": "3970:45:1"
											}
										]
									},
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3802:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:1"
									},
									"scope": 240,
									"src": "3774:248:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 241,
							"src": "749:3275:1",
							"usedErrors": [
								76,
								81,
								257,
								260
							],
							"usedEvents": [
								87,
								265
							]
						}
					],
					"src": "102:3923:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							508
						]
					},
					"id": 509,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 242,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 243,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:2",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 508,
							"linearizedBaseContracts": [
								508
							],
							"name": "Initializable",
							"nameLocation": "2367:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:2",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 251,
									"members": [
										{
											"constant": false,
											"id": 247,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:2",
											"nodeType": "VariableDeclaration",
											"scope": 251,
											"src": "2813:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 246,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 250,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:2",
											"nodeType": "VariableDeclaration",
											"scope": 251,
											"src": "2950:18:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 249,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:2",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "2685:290:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 254,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:2",
									"nodeType": "VariableDeclaration",
									"scope": 508,
									"src": "3098:115:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 252,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 253,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:2",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 257,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:2"
									},
									"src": "3285:30:2"
								},
								{
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:2",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 260,
									"name": "NotInitializing",
									"nameLocation": "3389:15:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:2"
									},
									"src": "3383:24:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:2",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 265,
									"name": "Initialized",
									"nameLocation": "3514:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3526:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 262,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:2"
									},
									"src": "3508:34:2"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "4092:1079:2",
										"statements": [
											{
												"assignments": [
													270
												],
												"declarations": [
													{
														"constant": false,
														"id": 270,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4158:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 269,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 268,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "4158:20:2"
															},
															"referencedDeclaration": 251,
															"src": "4158:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 273,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 271,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "4191:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:2"
											},
											{
												"assignments": [
													275
												],
												"declarations": [
													{
														"constant": false,
														"id": 275,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4279:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 274,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 279,
												"initialValue": {
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:2",
													"subExpression": {
														"expression": {
															"id": 276,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "4302:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 277,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "4302:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:2"
											},
											{
												"assignments": [
													281
												],
												"declarations": [
													{
														"constant": false,
														"id": 281,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4327:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 280,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 284,
												"initialValue": {
													"expression": {
														"id": 282,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 270,
														"src": "4348:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 283,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:2",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 247,
													"src": "4348:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:2"
											},
											{
												"assignments": [
													286
												],
												"declarations": [
													{
														"constant": false,
														"id": 286,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4709:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4704:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 285,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4704:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 289,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 287,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4724:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4739:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4724:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 290,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 275,
														"src": "4744:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4724:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4704:54:2"
											},
											{
												"assignments": [
													294
												],
												"declarations": [
													{
														"constant": false,
														"id": 294,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4773:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4768:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 293,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4768:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 307,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 295,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4788:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4803:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4788:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 300,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4816:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$508",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$508",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4808:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 298,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4808:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4808:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4822:4:2",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4808:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4827:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4808:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 304,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4837:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4808:30:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4788:50:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4768:70:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 309,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4853:13:2",
														"subExpression": {
															"id": 308,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "4854:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4870:13:2",
														"subExpression": {
															"id": 310,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "4871:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4853:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 317,
												"nodeType": "IfStatement",
												"src": "4849:91:2",
												"trueBody": {
													"id": 316,
													"nodeType": "Block",
													"src": "4885:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 313,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "4906:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4906:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 315,
															"nodeType": "RevertStatement",
															"src": "4899:30:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 318,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "4949:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 320,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4951:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "4949:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 321,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4966:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4949:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "4949:18:2"
											},
											{
												"condition": {
													"id": 324,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 275,
													"src": "4981:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 332,
												"nodeType": "IfStatement",
												"src": "4977:67:2",
												"trueBody": {
													"id": 331,
													"nodeType": "Block",
													"src": "4997:47:2",
													"statements": [
														{
															"expression": {
																"id": 329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 325,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 270,
																		"src": "5011:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 327,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5013:13:2",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 250,
																	"src": "5011:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5029:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5011:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 330,
															"nodeType": "ExpressionStatement",
															"src": "5011:22:2"
														}
													]
												}
											},
											{
												"id": 333,
												"nodeType": "PlaceholderStatement",
												"src": "5053:1:2"
											},
											{
												"condition": {
													"id": 334,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 275,
													"src": "5068:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 346,
												"nodeType": "IfStatement",
												"src": "5064:101:2",
												"trueBody": {
													"id": 345,
													"nodeType": "Block",
													"src": "5084:81:2",
													"statements": [
														{
															"expression": {
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 335,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 270,
																		"src": "5098:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 337,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5100:13:2",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 250,
																	"src": "5098:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5116:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5098:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 340,
															"nodeType": "ExpressionStatement",
															"src": "5098:23:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5152:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 341,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "5140:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5140:14:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 344,
															"nodeType": "EmitStatement",
															"src": "5135:19:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:2",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 348,
									"name": "initializer",
									"nameLocation": "4078:11:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:2"
									},
									"src": "4069:1102:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "6289:392:2",
										"statements": [
											{
												"assignments": [
													355
												],
												"declarations": [
													{
														"constant": false,
														"id": 355,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6384:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 394,
														"src": "6355:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 354,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 353,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6355:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "6355:20:2"
															},
															"referencedDeclaration": 251,
															"src": "6355:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 358,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 356,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "6388:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6388:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6355:59:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 359,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6429:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 360,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6431:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6429:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 364,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 361,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 355,
																"src": "6448:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 362,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6450:12:2",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 247,
															"src": "6448:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 363,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "6466:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6448:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6429:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 370,
												"nodeType": "IfStatement",
												"src": "6425:105:2",
												"trueBody": {
													"id": 369,
													"nodeType": "Block",
													"src": "6475:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 366,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "6496:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6496:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 368,
															"nodeType": "RevertStatement",
															"src": "6489:30:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 371,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6539:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 373,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6541:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "6539:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 374,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "6556:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6539:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "6539:24:2"
											},
											{
												"expression": {
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 377,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6573:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 379,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6575:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6573:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 380,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6591:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6573:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "6573:22:2"
											},
											{
												"id": 383,
												"nodeType": "PlaceholderStatement",
												"src": "6605:1:2"
											},
											{
												"expression": {
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 384,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6616:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 386,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6618:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6616:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6634:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6616:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 389,
												"nodeType": "ExpressionStatement",
												"src": "6616:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 391,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "6666:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 390,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 265,
														"src": "6654:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6654:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 393,
												"nodeType": "EmitStatement",
												"src": "6649:25:2"
											}
										]
									},
									"documentation": {
										"id": 349,
										"nodeType": "StructuredDocumentation",
										"src": "5177:1068:2",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 395,
									"name": "reinitializer",
									"nameLocation": "6259:13:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6280:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "6273:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 350,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6273:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:16:2"
									},
									"src": "6250:431:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "6919:48:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 398,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "6929:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6929:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "6929:20:2"
											},
											{
												"id": 401,
												"nodeType": "PlaceholderStatement",
												"src": "6959:1:2"
											}
										]
									},
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "6687:199:2",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 403,
									"name": "onlyInitializing",
									"nameLocation": "6900:16:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6916:2:2"
									},
									"src": "6891:76:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "7134:89:2",
										"statements": [
											{
												"condition": {
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7148:18:2",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 407,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "7149:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7149:17:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "7144:73:2",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "7168:49:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 410,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "7189:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7189:17:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 412,
															"nodeType": "RevertStatement",
															"src": "7182:24:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "6973:104:2",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7091:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7109:2:2"
									},
									"returnParameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7134:0:2"
									},
									"scope": 508,
									"src": "7082:141:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "7758:373:2",
										"statements": [
											{
												"assignments": [
													422
												],
												"declarations": [
													{
														"constant": false,
														"id": 422,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7853:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 461,
														"src": "7824:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 421,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 420,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7824:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "7824:20:2"
															},
															"referencedDeclaration": 251,
															"src": "7824:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 425,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 423,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "7857:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7857:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7824:59:2"
											},
											{
												"condition": {
													"expression": {
														"id": 426,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "7898:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7900:13:2",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 250,
													"src": "7898:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 432,
												"nodeType": "IfStatement",
												"src": "7894:76:2",
												"trueBody": {
													"id": 431,
													"nodeType": "Block",
													"src": "7915:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 428,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "7936:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7936:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 430,
															"nodeType": "RevertStatement",
															"src": "7929:30:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 433,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "7983:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7985:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "7983:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8006:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 436,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8006:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 435,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8001:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8001:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 439,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8014:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8001:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7983:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 460,
												"nodeType": "IfStatement",
												"src": "7979:146:2",
												"trueBody": {
													"id": 459,
													"nodeType": "Block",
													"src": "8019:106:2",
													"statements": [
														{
															"expression": {
																"id": 449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 441,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 422,
																		"src": "8033:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 443,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8035:12:2",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 247,
																	"src": "8033:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 446,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8055:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 445,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8055:6:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 444,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8050:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 447,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8050:12:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8063:3:2",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8050:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8033:33:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 450,
															"nodeType": "ExpressionStatement",
															"src": "8033:33:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 454,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8102:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 453,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8102:6:2",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 452,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8097:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8097:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8110:3:2",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8097:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 451,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "8085:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8085:29:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 458,
															"nodeType": "EmitStatement",
															"src": "8080:34:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "7229:475:2",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7718:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7738:2:2"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7758:0:2"
									},
									"scope": 508,
									"src": "7709:422:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "8306:63:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 468,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 507,
															"src": "8323:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8323:26:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8350:12:2",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 247,
													"src": "8323:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 467,
												"id": 471,
												"nodeType": "Return",
												"src": "8316:46:2"
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "8137:99:2",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8250:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8272:2:2"
									},
									"returnParameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "8298:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 465,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8298:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8297:8:2"
									},
									"scope": 508,
									"src": "8241:128:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "8541:64:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 479,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 507,
															"src": "8558:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8558:26:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8585:13:2",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 250,
													"src": "8558:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 478,
												"id": 482,
												"nodeType": "Return",
												"src": "8551:47:2"
											}
										]
									},
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "8375:105:2",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8494:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8509:2:2"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "8535:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 476,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8535:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:6:2"
									},
									"scope": 508,
									"src": "8485:120:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "8896:45:2",
										"statements": [
											{
												"expression": {
													"id": 490,
													"name": "INITIALIZABLE_STORAGE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 254,
													"src": "8913:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 489,
												"id": 491,
												"nodeType": "Return",
												"src": "8906:28:2"
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "8611:203:2",
										"text": " @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n NOTE: Consider following the ERC-7201 formula to derive storage locations."
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initializableStorageSlot",
									"nameLocation": "8828:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8853:2:2"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "8887:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 487,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8886:9:2"
									},
									"scope": 508,
									"src": "8819:122:2",
									"stateMutability": "pure",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "9161:115:2",
										"statements": [
											{
												"assignments": [
													501
												],
												"declarations": [
													{
														"constant": false,
														"id": 501,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "9179:4:2",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "9171:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 500,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 502,
														"name": "_initializableStorageSlot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "9186:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:42:2"
											},
											{
												"AST": {
													"nativeSrc": "9232:38:2",
													"nodeType": "YulBlock",
													"src": "9232:38:2",
													"statements": [
														{
															"nativeSrc": "9246:14:2",
															"nodeType": "YulAssignment",
															"src": "9246:14:2",
															"value": {
																"name": "slot",
																"nativeSrc": "9256:4:2",
																"nodeType": "YulIdentifier",
																"src": "9256:4:2"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "9246:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "9246:6:2"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 498,
														"isOffset": false,
														"isSlot": true,
														"src": "9246:6:2",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 501,
														"isOffset": false,
														"isSlot": false,
														"src": "9256:4:2",
														"valueSize": 1
													}
												],
												"id": 505,
												"nodeType": "InlineAssembly",
												"src": "9223:47:2"
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "8947:67:2",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "9080:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9104:2:2"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "9158:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "9129:30:2",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 497,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 496,
														"name": "InitializableStorage",
														"nameLocations": [
															"9129:20:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 251,
														"src": "9129:20:2"
													},
													"referencedDeclaration": 251,
													"src": "9129:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9128:32:2"
									},
									"scope": 508,
									"src": "9071:205:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 509,
							"src": "2349:6929:2",
							"usedErrors": [
								257,
								260
							],
							"usedEvents": [
								265
							]
						}
					],
					"src": "113:9166:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							554
						],
						"Initializable": [
							508
						]
					},
					"id": 555,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 510,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 512,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 555,
							"sourceUnit": 509,
							"src": "126:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 511,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 508,
										"src": "134:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 514,
										"name": "Initializable",
										"nameLocations": [
											"728:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 508,
										"src": "728:13:3"
									},
									"id": 515,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:3"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 513,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 554,
							"linearizedBaseContracts": [
								554,
								508
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 520,
										"nodeType": "Block",
										"src": "800:7:3",
										"statements": []
									},
									"id": 521,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 518,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 517,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "783:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:3"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:3"
									},
									"returnParameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:3"
									},
									"scope": 554,
									"src": "748:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 526,
										"nodeType": "Block",
										"src": "875:7:3",
										"statements": []
									},
									"id": 527,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 524,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 523,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "858:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:3"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:3"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:3"
									},
									"scope": 554,
									"src": "813:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 535,
										"nodeType": "Block",
										"src": "949:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 532,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 531,
												"id": 534,
												"nodeType": "Return",
												"src": "959:17:3"
											}
										]
									},
									"id": 536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:3"
									},
									"returnParameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "940:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:3"
									},
									"scope": 554,
									"src": "887:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "1056:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 541,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:3",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 540,
												"id": 543,
												"nodeType": "Return",
												"src": "1066:15:3"
											}
										]
									},
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:3"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "1040:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 538,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:3"
									},
									"scope": 554,
									"src": "989:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "1166:25:3",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 549,
												"id": 551,
												"nodeType": "Return",
												"src": "1176:8:3"
											}
										]
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:3"
									},
									"returnParameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "1157:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:3"
									},
									"scope": 554,
									"src": "1094:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 555,
							"src": "688:505:3",
							"usedErrors": [
								257,
								260
							],
							"usedEvents": [
								265
							]
						}
					],
					"src": "101:1093:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1131
						],
						"Ownable": [
							702
						]
					},
					"id": 703,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 556,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:4"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 558,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 703,
							"sourceUnit": 1132,
							"src": "128:45:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 557,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1131,
										"src": "136:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 560,
										"name": "Context",
										"nameLocations": [
											"692:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1131,
										"src": "692:7:4"
									},
									"id": 561,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:4"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 559,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:4",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 702,
							"linearizedBaseContracts": [
								702,
								1131
							],
							"name": "Ownable",
							"nameLocation": "681:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 563,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 702,
									"src": "706:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 562,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:4",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 568,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "858:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:4"
									},
									"src": "825:50:4"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:4",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 573,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "994:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:4"
									},
									"src": "968:41:4"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 579,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1042:29:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "1073:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:4"
									},
									"src": "1015:84:4"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "1259:153:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 585,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "1273:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 588,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 586,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 589,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 599,
												"nodeType": "IfStatement",
												"src": "1269:95:4",
												"trueBody": {
													"id": 598,
													"nodeType": "Block",
													"src": "1301:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 594,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 593,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 592,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 591,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "1322:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 597,
															"nodeType": "RevertStatement",
															"src": "1315:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 601,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "1392:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 600,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 701,
														"src": "1373:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:4"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:4",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 605,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "1237:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:4"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:4"
									},
									"scope": 702,
									"src": "1225:187:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "1521:41:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 608,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "1531:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 610,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:4"
											},
											{
												"id": 611,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:4",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 613,
									"name": "onlyOwner",
									"nameLocation": "1509:9:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:4"
									},
									"src": "1500:62:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "1693:30:4",
										"statements": [
											{
												"expression": {
													"id": 619,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 563,
													"src": "1710:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 618,
												"id": 620,
												"nodeType": "Return",
												"src": "1703:13:4"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:4",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:4"
									},
									"returnParameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "1684:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:4"
									},
									"scope": 702,
									"src": "1638:85:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "1841:117:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 626,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 622,
															"src": "1855:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 627,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 628,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1113,
															"src": "1866:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 637,
												"nodeType": "IfStatement",
												"src": "1851:101:4",
												"trueBody": {
													"id": 636,
													"nodeType": "Block",
													"src": "1880:72:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 632,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1113,
																			"src": "1928:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 631,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 568,
																	"src": "1901:26:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 635,
															"nodeType": "RevertStatement",
															"src": "1894:47:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:4",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:4"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:4"
									},
									"scope": 702,
									"src": "1796:162:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "2347:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 646,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 645,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 701,
														"src": "2357:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 651,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:4"
											}
										]
									},
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:4",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 643,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 642,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 613,
												"src": "2337:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:4"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:4"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:4"
									},
									"scope": 702,
									"src": "2293:101:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 680,
										"nodeType": "Block",
										"src": "2613:145:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 661,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "2627:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 664,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 662,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 665,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 675,
												"nodeType": "IfStatement",
												"src": "2623:91:4",
												"trueBody": {
													"id": 674,
													"nodeType": "Block",
													"src": "2651:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 670,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 669,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 668,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 667,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "2672:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 673,
															"nodeType": "RevertStatement",
															"src": "2665:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 677,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 656,
															"src": "2742:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 676,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 701,
														"src": "2723:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:4"
											}
										]
									},
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 681,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 659,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 658,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 613,
												"src": "2603:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:4"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "2570:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:4"
									},
									"returnParameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:4"
									},
									"scope": 702,
									"src": "2543:215:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 700,
										"nodeType": "Block",
										"src": "2975:124:4",
										"statements": [
											{
												"assignments": [
													688
												],
												"declarations": [
													{
														"constant": false,
														"id": 688,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:4",
														"nodeType": "VariableDeclaration",
														"scope": 700,
														"src": "2985:16:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 687,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 690,
												"initialValue": {
													"id": 689,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 563,
													"src": "3004:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:4"
											},
											{
												"expression": {
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 691,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 563,
														"src": "3020:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 692,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 684,
														"src": "3029:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 694,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 696,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "3073:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 697,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "3083:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 695,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 579,
														"src": "3052:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 699,
												"nodeType": "EmitStatement",
												"src": "3047:45:4"
											}
										]
									},
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 701,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 701,
												"src": "2940:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:4"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:4"
									},
									"scope": 702,
									"src": "2912:187:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 703,
							"src": "663:2438:4",
							"usedErrors": [
								568,
								573
							],
							"usedEvents": [
								579
							]
						}
					],
					"src": "102:3000:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
					"exportedSymbols": {
						"Clones": [
							1101
						],
						"Create2": [
							1230
						],
						"Errors": [
							1252
						]
					},
					"id": 1102,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 704,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "100:24:5"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
							"file": "../utils/Create2.sol",
							"id": 706,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1102,
							"sourceUnit": 1231,
							"src": "126:45:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 705,
										"name": "Create2",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1230,
										"src": "134:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
							"file": "../utils/Errors.sol",
							"id": 708,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1102,
							"sourceUnit": 1253,
							"src": "172:43:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 707,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1252,
										"src": "180:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Clones",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 709,
								"nodeType": "StructuredDocumentation",
								"src": "217:599:5",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n deploying minimal proxy contracts, also known as \"clones\".\n > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n deterministic method."
							},
							"fullyImplemented": true,
							"id": 1101,
							"linearizedBaseContracts": [
								1101
							],
							"name": "Clones",
							"nameLocation": "825:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "94289054",
									"id": 711,
									"name": "CloneArgumentsTooLong",
									"nameLocation": "844:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:2:5"
									},
									"src": "838:30:5"
								},
								{
									"body": {
										"id": 724,
										"nodeType": "Block",
										"src": "1145:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 720,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "1168:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "30",
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1184:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 719,
														"name": "clone",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															725,
															770
														],
														"referencedDeclaration": 770,
														"src": "1162:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,uint256) returns (address)"
														}
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1162:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 718,
												"id": 723,
												"nodeType": "Return",
												"src": "1155:31:5"
											}
										]
									},
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "874:191:5",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n This function uses the create opcode, which should never revert."
									},
									"id": 725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clone",
									"nameLocation": "1079:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1093:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "1085:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1085:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1084:24:5"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "1135:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "1127:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1127:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1126:18:5"
									},
									"scope": 1101,
									"src": "1070:123:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "1675:820:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 737,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1697:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																],
																"id": 736,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1689:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 735,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1689:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1689:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 739,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1703:7:5",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1689:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 740,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "1713:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1689:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 754,
												"nodeType": "IfStatement",
												"src": "1685:123:5",
												"trueBody": {
													"id": 753,
													"nodeType": "Block",
													"src": "1720:88:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 747,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "1776:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 746,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1768:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 745,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1768:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1768:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1782:7:5",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "1768:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 750,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 730,
																		"src": "1791:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 742,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "1741:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 744,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1748:19:5",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1240,
																	"src": "1741:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1741:56:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 752,
															"nodeType": "RevertStatement",
															"src": "1734:63:5"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "1842:553:5",
													"nodeType": "YulBlock",
													"src": "1842:553:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2047:4:5",
																		"nodeType": "YulLiteral",
																		"src": "2047:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2060:4:5",
																						"nodeType": "YulLiteral",
																						"src": "2060:4:5",
																						"type": "",
																						"value": "0xe8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2070:4:5",
																								"nodeType": "YulLiteral",
																								"src": "2070:4:5",
																								"type": "",
																								"value": "0x60"
																							},
																							{
																								"name": "implementation",
																								"nativeSrc": "2076:14:5",
																								"nodeType": "YulIdentifier",
																								"src": "2076:14:5"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2066:3:5",
																							"nodeType": "YulIdentifier",
																							"src": "2066:3:5"
																						},
																						"nativeSrc": "2066:25:5",
																						"nodeType": "YulFunctionCall",
																						"src": "2066:25:5"
																					}
																				],
																				"functionName": {
																					"name": "shr",
																					"nativeSrc": "2056:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "2056:3:5"
																				},
																				"nativeSrc": "2056:36:5",
																				"nodeType": "YulFunctionCall",
																				"src": "2056:36:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2094:48:5",
																				"nodeType": "YulLiteral",
																				"src": "2094:48:5",
																				"type": "",
																				"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2053:2:5",
																			"nodeType": "YulIdentifier",
																			"src": "2053:2:5"
																		},
																		"nativeSrc": "2053:90:5",
																		"nodeType": "YulFunctionCall",
																		"src": "2053:90:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2040:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "2040:6:5"
																},
																"nativeSrc": "2040:104:5",
																"nodeType": "YulFunctionCall",
																"src": "2040:104:5"
															},
															"nativeSrc": "2040:104:5",
															"nodeType": "YulExpressionStatement",
															"src": "2040:104:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2265:4:5",
																		"nodeType": "YulLiteral",
																		"src": "2265:4:5",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2278:4:5",
																						"nodeType": "YulLiteral",
																						"src": "2278:4:5",
																						"type": "",
																						"value": "0x78"
																					},
																					{
																						"name": "implementation",
																						"nativeSrc": "2284:14:5",
																						"nodeType": "YulIdentifier",
																						"src": "2284:14:5"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2274:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "2274:3:5"
																				},
																				"nativeSrc": "2274:25:5",
																				"nodeType": "YulFunctionCall",
																				"src": "2274:25:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2301:32:5",
																				"nodeType": "YulLiteral",
																				"src": "2301:32:5",
																				"type": "",
																				"value": "0x5af43d82803e903d91602b57fd5bf3"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2271:2:5",
																			"nodeType": "YulIdentifier",
																			"src": "2271:2:5"
																		},
																		"nativeSrc": "2271:63:5",
																		"nodeType": "YulFunctionCall",
																		"src": "2271:63:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2258:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "2258:6:5"
																},
																"nativeSrc": "2258:77:5",
																"nodeType": "YulFunctionCall",
																"src": "2258:77:5"
															},
															"nativeSrc": "2258:77:5",
															"nodeType": "YulExpressionStatement",
															"src": "2258:77:5"
														},
														{
															"nativeSrc": "2348:37:5",
															"nodeType": "YulAssignment",
															"src": "2348:37:5",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2367:5:5",
																		"nodeType": "YulIdentifier",
																		"src": "2367:5:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2374:4:5",
																		"nodeType": "YulLiteral",
																		"src": "2374:4:5",
																		"type": "",
																		"value": "0x09"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2380:4:5",
																		"nodeType": "YulLiteral",
																		"src": "2380:4:5",
																		"type": "",
																		"value": "0x37"
																	}
																],
																"functionName": {
																	"name": "create",
																	"nativeSrc": "2360:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "2360:6:5"
																},
																"nativeSrc": "2360:25:5",
																"nodeType": "YulFunctionCall",
																"src": "2360:25:5"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "2348:8:5",
																	"nodeType": "YulIdentifier",
																	"src": "2348:8:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 728,
														"isOffset": false,
														"isSlot": false,
														"src": "2076:14:5",
														"valueSize": 1
													},
													{
														"declaration": 728,
														"isOffset": false,
														"isSlot": false,
														"src": "2284:14:5",
														"valueSize": 1
													},
													{
														"declaration": 733,
														"isOffset": false,
														"isSlot": false,
														"src": "2348:8:5",
														"valueSize": 1
													},
													{
														"declaration": 730,
														"isOffset": false,
														"isSlot": false,
														"src": "2367:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 755,
												"nodeType": "InlineAssembly",
												"src": "1817:578:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 756,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 733,
														"src": "2408:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 759,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2428:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2420:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 757,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2420:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 760,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2420:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2408:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 768,
												"nodeType": "IfStatement",
												"src": "2404:85:5",
												"trueBody": {
													"id": 767,
													"nodeType": "Block",
													"src": "2432:57:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 762,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "2453:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 764,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2460:16:5",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1246,
																	"src": "2453:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 765,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2453:25:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 766,
															"nodeType": "RevertStatement",
															"src": "2446:32:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 726,
										"nodeType": "StructuredDocumentation",
										"src": "1199:381:5",
										"text": " @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n to the new contract.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "clone",
									"nameLocation": "1594:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1608:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1600:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1600:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1632:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1624:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1599:39:5"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "1665:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "1657:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 732,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1657:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1656:18:5"
									},
									"scope": 1101,
									"src": "1585:910:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 786,
										"nodeType": "Block",
										"src": "2972:67:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 781,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "3008:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 782,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "3024:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"hexValue": "30",
															"id": 783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3030:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 780,
														"name": "cloneDeterministic",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															787,
															834
														],
														"referencedDeclaration": 834,
														"src": "2989:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes32,uint256) returns (address)"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2989:43:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 779,
												"id": 785,
												"nodeType": "Return",
												"src": "2982:50:5"
											}
										]
									},
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "2501:364:5",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n This function uses the create2 opcode and a `salt` to deterministically deploy\n the clone. Using the same `implementation` and `salt` multiple times will revert, since\n the clones cannot be deployed twice at the same address."
									},
									"id": 787,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministic",
									"nameLocation": "2879:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "2906:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "2898:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2898:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "2930:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "2922:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 774,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2922:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2897:38:5"
									},
									"returnParameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "2962:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "2954:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2954:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2953:18:5"
									},
									"scope": 1101,
									"src": "2870:169:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 833,
										"nodeType": "Block",
										"src": "3612:827:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 801,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3634:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																],
																"id": 800,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3626:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 799,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3626:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3626:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3640:7:5",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3626:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 804,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "3650:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3626:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 818,
												"nodeType": "IfStatement",
												"src": "3622:123:5",
												"trueBody": {
													"id": 817,
													"nodeType": "Block",
													"src": "3657:88:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 811,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "3713:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 810,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3705:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 809,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3705:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3705:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 813,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3719:7:5",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "3705:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 814,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 794,
																		"src": "3728:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 806,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "3678:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3685:19:5",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1240,
																	"src": "3678:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3678:56:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 816,
															"nodeType": "RevertStatement",
															"src": "3671:63:5"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "3779:560:5",
													"nodeType": "YulBlock",
													"src": "3779:560:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3984:4:5",
																		"nodeType": "YulLiteral",
																		"src": "3984:4:5",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3997:4:5",
																						"nodeType": "YulLiteral",
																						"src": "3997:4:5",
																						"type": "",
																						"value": "0xe8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4007:4:5",
																								"nodeType": "YulLiteral",
																								"src": "4007:4:5",
																								"type": "",
																								"value": "0x60"
																							},
																							{
																								"name": "implementation",
																								"nativeSrc": "4013:14:5",
																								"nodeType": "YulIdentifier",
																								"src": "4013:14:5"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "4003:3:5",
																							"nodeType": "YulIdentifier",
																							"src": "4003:3:5"
																						},
																						"nativeSrc": "4003:25:5",
																						"nodeType": "YulFunctionCall",
																						"src": "4003:25:5"
																					}
																				],
																				"functionName": {
																					"name": "shr",
																					"nativeSrc": "3993:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "3993:3:5"
																				},
																				"nativeSrc": "3993:36:5",
																				"nodeType": "YulFunctionCall",
																				"src": "3993:36:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4031:48:5",
																				"nodeType": "YulLiteral",
																				"src": "4031:48:5",
																				"type": "",
																				"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "3990:2:5",
																			"nodeType": "YulIdentifier",
																			"src": "3990:2:5"
																		},
																		"nativeSrc": "3990:90:5",
																		"nodeType": "YulFunctionCall",
																		"src": "3990:90:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3977:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "3977:6:5"
																},
																"nativeSrc": "3977:104:5",
																"nodeType": "YulFunctionCall",
																"src": "3977:104:5"
															},
															"nativeSrc": "3977:104:5",
															"nodeType": "YulExpressionStatement",
															"src": "3977:104:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4202:4:5",
																		"nodeType": "YulLiteral",
																		"src": "4202:4:5",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4215:4:5",
																						"nodeType": "YulLiteral",
																						"src": "4215:4:5",
																						"type": "",
																						"value": "0x78"
																					},
																					{
																						"name": "implementation",
																						"nativeSrc": "4221:14:5",
																						"nodeType": "YulIdentifier",
																						"src": "4221:14:5"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "4211:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "4211:3:5"
																				},
																				"nativeSrc": "4211:25:5",
																				"nodeType": "YulFunctionCall",
																				"src": "4211:25:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4238:32:5",
																				"nodeType": "YulLiteral",
																				"src": "4238:32:5",
																				"type": "",
																				"value": "0x5af43d82803e903d91602b57fd5bf3"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4208:2:5",
																			"nodeType": "YulIdentifier",
																			"src": "4208:2:5"
																		},
																		"nativeSrc": "4208:63:5",
																		"nodeType": "YulFunctionCall",
																		"src": "4208:63:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4195:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "4195:6:5"
																},
																"nativeSrc": "4195:77:5",
																"nodeType": "YulFunctionCall",
																"src": "4195:77:5"
															},
															"nativeSrc": "4195:77:5",
															"nodeType": "YulExpressionStatement",
															"src": "4195:77:5"
														},
														{
															"nativeSrc": "4285:44:5",
															"nodeType": "YulAssignment",
															"src": "4285:44:5",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4305:5:5",
																		"nodeType": "YulIdentifier",
																		"src": "4305:5:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4312:4:5",
																		"nodeType": "YulLiteral",
																		"src": "4312:4:5",
																		"type": "",
																		"value": "0x09"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4318:4:5",
																		"nodeType": "YulLiteral",
																		"src": "4318:4:5",
																		"type": "",
																		"value": "0x37"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "4324:4:5",
																		"nodeType": "YulIdentifier",
																		"src": "4324:4:5"
																	}
																],
																"functionName": {
																	"name": "create2",
																	"nativeSrc": "4297:7:5",
																	"nodeType": "YulIdentifier",
																	"src": "4297:7:5"
																},
																"nativeSrc": "4297:32:5",
																"nodeType": "YulFunctionCall",
																"src": "4297:32:5"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "4285:8:5",
																	"nodeType": "YulIdentifier",
																	"src": "4285:8:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 790,
														"isOffset": false,
														"isSlot": false,
														"src": "4013:14:5",
														"valueSize": 1
													},
													{
														"declaration": 790,
														"isOffset": false,
														"isSlot": false,
														"src": "4221:14:5",
														"valueSize": 1
													},
													{
														"declaration": 797,
														"isOffset": false,
														"isSlot": false,
														"src": "4285:8:5",
														"valueSize": 1
													},
													{
														"declaration": 792,
														"isOffset": false,
														"isSlot": false,
														"src": "4324:4:5",
														"valueSize": 1
													},
													{
														"declaration": 794,
														"isOffset": false,
														"isSlot": false,
														"src": "4305:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 819,
												"nodeType": "InlineAssembly",
												"src": "3754:585:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 820,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 797,
														"src": "4352:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 823,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4372:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4364:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 821,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4364:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4364:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4352:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 832,
												"nodeType": "IfStatement",
												"src": "4348:85:5",
												"trueBody": {
													"id": 831,
													"nodeType": "Block",
													"src": "4376:57:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 826,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "4397:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4404:16:5",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1246,
																	"src": "4397:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 829,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4397:25:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 830,
															"nodeType": "RevertStatement",
															"src": "4390:32:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "3045:415:5",
										"text": " @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n a `value` parameter to send native currency to the new contract.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministic",
									"nameLocation": "3474:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "3510:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "3502:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3502:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "3542:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "3534:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 791,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3534:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3564:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "3556:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3556:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3492:83:5"
									},
									"returnParameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "3602:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "3594:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3594:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3593:18:5"
									},
									"scope": 1101,
									"src": "3465:974:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 847,
										"nodeType": "Block",
										"src": "4714:537:5",
										"statements": [
											{
												"AST": {
													"nativeSrc": "4749:496:5",
													"nodeType": "YulBlock",
													"src": "4749:496:5",
													"statements": [
														{
															"nativeSrc": "4763:22:5",
															"nodeType": "YulVariableDeclaration",
															"src": "4763:22:5",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4780:4:5",
																		"nodeType": "YulLiteral",
																		"src": "4780:4:5",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4774:5:5",
																	"nodeType": "YulIdentifier",
																	"src": "4774:5:5"
																},
																"nativeSrc": "4774:11:5",
																"nodeType": "YulFunctionCall",
																"src": "4774:11:5"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "4767:3:5",
																	"nodeType": "YulTypedName",
																	"src": "4767:3:5",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4809:3:5",
																				"nodeType": "YulIdentifier",
																				"src": "4809:3:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4814:4:5",
																				"nodeType": "YulLiteral",
																				"src": "4814:4:5",
																				"type": "",
																				"value": "0x38"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4805:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "4805:3:5"
																		},
																		"nativeSrc": "4805:14:5",
																		"nodeType": "YulFunctionCall",
																		"src": "4805:14:5"
																	},
																	{
																		"name": "deployer",
																		"nativeSrc": "4821:8:5",
																		"nodeType": "YulIdentifier",
																		"src": "4821:8:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4798:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "4798:6:5"
																},
																"nativeSrc": "4798:32:5",
																"nodeType": "YulFunctionCall",
																"src": "4798:32:5"
															},
															"nativeSrc": "4798:32:5",
															"nodeType": "YulExpressionStatement",
															"src": "4798:32:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4854:3:5",
																				"nodeType": "YulIdentifier",
																				"src": "4854:3:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4859:4:5",
																				"nodeType": "YulLiteral",
																				"src": "4859:4:5",
																				"type": "",
																				"value": "0x24"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4850:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "4850:3:5"
																		},
																		"nativeSrc": "4850:14:5",
																		"nodeType": "YulFunctionCall",
																		"src": "4850:14:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4866:34:5",
																		"nodeType": "YulLiteral",
																		"src": "4866:34:5",
																		"type": "",
																		"value": "0x5af43d82803e903d91602b57fd5bf3ff"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4843:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "4843:6:5"
																},
																"nativeSrc": "4843:58:5",
																"nodeType": "YulFunctionCall",
																"src": "4843:58:5"
															},
															"nativeSrc": "4843:58:5",
															"nodeType": "YulExpressionStatement",
															"src": "4843:58:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4925:3:5",
																				"nodeType": "YulIdentifier",
																				"src": "4925:3:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4930:4:5",
																				"nodeType": "YulLiteral",
																				"src": "4930:4:5",
																				"type": "",
																				"value": "0x14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4921:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "4921:3:5"
																		},
																		"nativeSrc": "4921:14:5",
																		"nodeType": "YulFunctionCall",
																		"src": "4921:14:5"
																	},
																	{
																		"name": "implementation",
																		"nativeSrc": "4937:14:5",
																		"nodeType": "YulIdentifier",
																		"src": "4937:14:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4914:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "4914:6:5"
																},
																"nativeSrc": "4914:38:5",
																"nodeType": "YulFunctionCall",
																"src": "4914:38:5"
															},
															"nativeSrc": "4914:38:5",
															"nodeType": "YulExpressionStatement",
															"src": "4914:38:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "4972:3:5",
																		"nodeType": "YulIdentifier",
																		"src": "4972:3:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4977:42:5",
																		"nodeType": "YulLiteral",
																		"src": "4977:42:5",
																		"type": "",
																		"value": "0x3d602d80600a3d3981f3363d3d373d3d3d363d73"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4965:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "4965:6:5"
																},
																"nativeSrc": "4965:55:5",
																"nodeType": "YulFunctionCall",
																"src": "4965:55:5"
															},
															"nativeSrc": "4965:55:5",
															"nodeType": "YulExpressionStatement",
															"src": "4965:55:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "5044:3:5",
																				"nodeType": "YulIdentifier",
																				"src": "5044:3:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5049:4:5",
																				"nodeType": "YulLiteral",
																				"src": "5049:4:5",
																				"type": "",
																				"value": "0x58"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5040:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "5040:3:5"
																		},
																		"nativeSrc": "5040:14:5",
																		"nodeType": "YulFunctionCall",
																		"src": "5040:14:5"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "5056:4:5",
																		"nodeType": "YulIdentifier",
																		"src": "5056:4:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5033:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "5033:6:5"
																},
																"nativeSrc": "5033:28:5",
																"nodeType": "YulFunctionCall",
																"src": "5033:28:5"
															},
															"nativeSrc": "5033:28:5",
															"nodeType": "YulExpressionStatement",
															"src": "5033:28:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "5085:3:5",
																				"nodeType": "YulIdentifier",
																				"src": "5085:3:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5090:4:5",
																				"nodeType": "YulLiteral",
																				"src": "5090:4:5",
																				"type": "",
																				"value": "0x78"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5081:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "5081:3:5"
																		},
																		"nativeSrc": "5081:14:5",
																		"nodeType": "YulFunctionCall",
																		"src": "5081:14:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "ptr",
																						"nativeSrc": "5111:3:5",
																						"nodeType": "YulIdentifier",
																						"src": "5111:3:5"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5116:4:5",
																						"nodeType": "YulLiteral",
																						"src": "5116:4:5",
																						"type": "",
																						"value": "0x0c"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5107:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "5107:3:5"
																				},
																				"nativeSrc": "5107:14:5",
																				"nodeType": "YulFunctionCall",
																				"src": "5107:14:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5123:4:5",
																				"nodeType": "YulLiteral",
																				"src": "5123:4:5",
																				"type": "",
																				"value": "0x37"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "5097:9:5",
																			"nodeType": "YulIdentifier",
																			"src": "5097:9:5"
																		},
																		"nativeSrc": "5097:31:5",
																		"nodeType": "YulFunctionCall",
																		"src": "5097:31:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5074:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "5074:6:5"
																},
																"nativeSrc": "5074:55:5",
																"nodeType": "YulFunctionCall",
																"src": "5074:55:5"
															},
															"nativeSrc": "5074:55:5",
															"nodeType": "YulExpressionStatement",
															"src": "5074:55:5"
														},
														{
															"nativeSrc": "5142:93:5",
															"nodeType": "YulAssignment",
															"src": "5142:93:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "ptr",
																						"nativeSrc": "5173:3:5",
																						"nodeType": "YulIdentifier",
																						"src": "5173:3:5"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5178:4:5",
																						"nodeType": "YulLiteral",
																						"src": "5178:4:5",
																						"type": "",
																						"value": "0x43"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5169:3:5",
																					"nodeType": "YulIdentifier",
																					"src": "5169:3:5"
																				},
																				"nativeSrc": "5169:14:5",
																				"nodeType": "YulFunctionCall",
																				"src": "5169:14:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5185:4:5",
																				"nodeType": "YulLiteral",
																				"src": "5185:4:5",
																				"type": "",
																				"value": "0x55"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "5159:9:5",
																			"nodeType": "YulIdentifier",
																			"src": "5159:9:5"
																		},
																		"nativeSrc": "5159:31:5",
																		"nodeType": "YulFunctionCall",
																		"src": "5159:31:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5192:42:5",
																		"nodeType": "YulLiteral",
																		"src": "5192:42:5",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5155:3:5",
																	"nodeType": "YulIdentifier",
																	"src": "5155:3:5"
																},
																"nativeSrc": "5155:80:5",
																"nodeType": "YulFunctionCall",
																"src": "5155:80:5"
															},
															"variableNames": [
																{
																	"name": "predicted",
																	"nativeSrc": "5142:9:5",
																	"nodeType": "YulIdentifier",
																	"src": "5142:9:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 841,
														"isOffset": false,
														"isSlot": false,
														"src": "4821:8:5",
														"valueSize": 1
													},
													{
														"declaration": 837,
														"isOffset": false,
														"isSlot": false,
														"src": "4937:14:5",
														"valueSize": 1
													},
													{
														"declaration": 844,
														"isOffset": false,
														"isSlot": false,
														"src": "5142:9:5",
														"valueSize": 1
													},
													{
														"declaration": 839,
														"isOffset": false,
														"isSlot": false,
														"src": "5056:4:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 846,
												"nodeType": "InlineAssembly",
												"src": "4724:521:5"
											}
										]
									},
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "4445:99:5",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."
									},
									"id": 848,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddress",
									"nameLocation": "4558:27:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "4603:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4595:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4595:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "4635:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4627:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 838,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "4657:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4649:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4649:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:86:5"
									},
									"returnParameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "4703:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4695:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4695:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4694:19:5"
									},
									"scope": 1101,
									"src": "4549:702:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "5500:88:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 859,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "5545:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 860,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 853,
															"src": "5561:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 863,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5575:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																],
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5567:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 861,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5567:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5567:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 858,
														"name": "predictDeterministicAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															848,
															868
														],
														"referencedDeclaration": 848,
														"src": "5517:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,bytes32,address) pure returns (address)"
														}
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5517:64:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 857,
												"id": 866,
												"nodeType": "Return",
												"src": "5510:71:5"
											}
										]
									},
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "5257:99:5",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."
									},
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddress",
									"nameLocation": "5370:27:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "5415:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "5407:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5407:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5447:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "5439:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 852,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5439:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5397:60:5"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "5489:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "5481:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5481:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5480:19:5"
									},
									"scope": 1101,
									"src": "5361:227:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 884,
										"nodeType": "Block",
										"src": "6094:71:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 879,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "6134:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 880,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "6150:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 881,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6156:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 878,
														"name": "cloneWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															885,
															939
														],
														"referencedDeclaration": 939,
														"src": "6111:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,uint256) returns (address)"
														}
													},
													"id": 882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6111:47:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 877,
												"id": 883,
												"nodeType": "Return",
												"src": "6104:54:5"
											}
										]
									},
									"documentation": {
										"id": 869,
										"nodeType": "StructuredDocumentation",
										"src": "5594:384:5",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n access the arguments within the implementation, use {fetchCloneArgs}.\n This function uses the create opcode, which should never revert."
									},
									"id": 885,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneWithImmutableArgs",
									"nameLocation": "5992:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "6023:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "6015:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6015:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "6052:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "6039:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 872,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6039:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6014:43:5"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "6084:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "6076:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 875,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6076:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6075:18:5"
									},
									"scope": 1101,
									"src": "5983:182:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 938,
										"nodeType": "Block",
										"src": "6753:437:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 899,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6775:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																],
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6767:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 897,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6767:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6767:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 901,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6781:7:5",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "6767:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 902,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 892,
														"src": "6791:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6767:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 916,
												"nodeType": "IfStatement",
												"src": "6763:123:5",
												"trueBody": {
													"id": 915,
													"nodeType": "Block",
													"src": "6798:88:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 909,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "6854:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Clones_$1101",
																						"typeString": "library Clones"
																					}
																				],
																				"id": 908,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6846:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 907,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6846:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6846:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6860:7:5",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "6846:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 912,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 892,
																		"src": "6869:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 904,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "6819:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6826:19:5",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1240,
																	"src": "6819:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 913,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6819:56:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 914,
															"nodeType": "RevertStatement",
															"src": "6812:63:5"
														}
													]
												}
											},
											{
												"assignments": [
													918
												],
												"declarations": [
													{
														"constant": false,
														"id": 918,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "6908:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 938,
														"src": "6895:21:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 917,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6895:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 923,
												"initialValue": {
													"arguments": [
														{
															"id": 920,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 888,
															"src": "6947:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 921,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 890,
															"src": "6963:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 919,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "6919:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6919:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6895:73:5"
											},
											{
												"AST": {
													"nativeSrc": "7003:87:5",
													"nodeType": "YulBlock",
													"src": "7003:87:5",
													"statements": [
														{
															"nativeSrc": "7017:63:5",
															"nodeType": "YulAssignment",
															"src": "7017:63:5",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7036:5:5",
																		"nodeType": "YulIdentifier",
																		"src": "7036:5:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "7047:8:5",
																				"nodeType": "YulIdentifier",
																				"src": "7047:8:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7057:4:5",
																				"nodeType": "YulLiteral",
																				"src": "7057:4:5",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7043:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "7043:3:5"
																		},
																		"nativeSrc": "7043:19:5",
																		"nodeType": "YulFunctionCall",
																		"src": "7043:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "7070:8:5",
																				"nodeType": "YulIdentifier",
																				"src": "7070:8:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "7064:5:5",
																			"nodeType": "YulIdentifier",
																			"src": "7064:5:5"
																		},
																		"nativeSrc": "7064:15:5",
																		"nodeType": "YulFunctionCall",
																		"src": "7064:15:5"
																	}
																],
																"functionName": {
																	"name": "create",
																	"nativeSrc": "7029:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "7029:6:5"
																},
																"nativeSrc": "7029:51:5",
																"nodeType": "YulFunctionCall",
																"src": "7029:51:5"
															},
															"variableNames": [
																{
																	"name": "instance",
																	"nativeSrc": "7017:8:5",
																	"nodeType": "YulIdentifier",
																	"src": "7017:8:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 918,
														"isOffset": false,
														"isSlot": false,
														"src": "7047:8:5",
														"valueSize": 1
													},
													{
														"declaration": 918,
														"isOffset": false,
														"isSlot": false,
														"src": "7070:8:5",
														"valueSize": 1
													},
													{
														"declaration": 895,
														"isOffset": false,
														"isSlot": false,
														"src": "7017:8:5",
														"valueSize": 1
													},
													{
														"declaration": 892,
														"isOffset": false,
														"isSlot": false,
														"src": "7036:5:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 924,
												"nodeType": "InlineAssembly",
												"src": "6978:112:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 925,
														"name": "instance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "7103:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 928,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7123:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7115:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 926,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7115:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7115:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7103:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 937,
												"nodeType": "IfStatement",
												"src": "7099:85:5",
												"trueBody": {
													"id": 936,
													"nodeType": "Block",
													"src": "7127:57:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 931,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "7148:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7155:16:5",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1246,
																	"src": "7148:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7148:25:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 935,
															"nodeType": "RevertStatement",
															"src": "7141:32:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 886,
										"nodeType": "StructuredDocumentation",
										"src": "6171:421:5",
										"text": " @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n parameter to send native currency to the new contract.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneWithImmutableArgs",
									"nameLocation": "6606:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "6646:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "6638:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "6683:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "6670:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 889,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6670:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6705:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "6697:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6697:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6628:88:5"
									},
									"returnParameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "6743:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "6735:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6735:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6734:18:5"
									},
									"scope": 1101,
									"src": "6597:593:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 958,
										"nodeType": "Block",
										"src": "7934:90:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 952,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 942,
															"src": "7987:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 953,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "8003:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 954,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 946,
															"src": "8009:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"hexValue": "30",
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8015:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 951,
														"name": "cloneDeterministicWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															959,
															988
														],
														"referencedDeclaration": 988,
														"src": "7951:35:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,bytes32,uint256) returns (address)"
														}
													},
													"id": 956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7951:66:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 950,
												"id": 957,
												"nodeType": "Return",
												"src": "7944:73:5"
											}
										]
									},
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "7196:565:5",
										"text": " @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n access the arguments within the implementation, use {fetchCloneArgs}.\n This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n at the same address."
									},
									"id": 959,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministicWithImmutableArgs",
									"nameLocation": "7775:35:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "7828:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "7820:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7820:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "7865:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "7852:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7852:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "7887:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "7879:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 945,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7879:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7810:87:5"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "7924:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "7916:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7916:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7915:18:5"
									},
									"scope": 1101,
									"src": "7766:258:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 987,
										"nodeType": "Block",
										"src": "8681:144:5",
										"statements": [
											{
												"assignments": [
													974
												],
												"declarations": [
													{
														"constant": false,
														"id": 974,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "8704:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 987,
														"src": "8691:21:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 973,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "8691:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 979,
												"initialValue": {
													"arguments": [
														{
															"id": 976,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 962,
															"src": "8743:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 977,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "8759:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 975,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "8715:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8715:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8691:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 982,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "8796:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 983,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "8803:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 984,
															"name": "bytecode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 974,
															"src": "8809:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 980,
															"name": "Create2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "8781:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Create2_$1230_$",
																"typeString": "type(library Create2)"
															}
														},
														"id": 981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8789:6:5",
														"memberName": "deploy",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1195,
														"src": "8781:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (uint256,bytes32,bytes memory) returns (address)"
														}
													},
													"id": 985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8781:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 972,
												"id": 986,
												"nodeType": "Return",
												"src": "8774:44:5"
											}
										]
									},
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "8030:455:5",
										"text": " @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n but with a `value` parameter to send native currency to the new contract.\n NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n to always have enough balance for new deployments. Consider exposing this function under a payable method."
									},
									"id": 988,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "cloneDeterministicWithImmutableArgs",
									"nameLocation": "8499:35:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "8552:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "8544:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8544:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "8589:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "8576:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 963,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8576:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "8611:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "8603:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 965,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8603:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8633:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "8625:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8625:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:110:5"
									},
									"returnParameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "8671:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "8663:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8663:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8662:18:5"
									},
									"scope": 1101,
									"src": "8490:335:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1018,
										"nodeType": "Block",
										"src": "9161:166:5",
										"statements": [
											{
												"assignments": [
													1003
												],
												"declarations": [
													{
														"constant": false,
														"id": 1003,
														"mutability": "mutable",
														"name": "bytecode",
														"nameLocation": "9184:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1018,
														"src": "9171:21:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1002,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "9171:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1008,
												"initialValue": {
													"arguments": [
														{
															"id": 1005,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 991,
															"src": "9223:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1006,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 993,
															"src": "9239:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1004,
														"name": "_cloneCodeWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "9195:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9195:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1011,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 995,
															"src": "9284:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 1013,
																	"name": "bytecode",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1003,
																	"src": "9300:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1012,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "9290:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9290:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1015,
															"name": "deployer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 997,
															"src": "9311:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1009,
															"name": "Create2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "9261:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Create2_$1230_$",
																"typeString": "type(library Create2)"
															}
														},
														"id": 1010,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9269:14:5",
														"memberName": "computeAddress",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1229,
														"src": "9261:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes32,address) pure returns (address)"
														}
													},
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9261:59:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1001,
												"id": 1017,
												"nodeType": "Return",
												"src": "9254:66:5"
											}
										]
									},
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "8831:116:5",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}."
									},
									"id": 1019,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddressWithImmutableArgs",
									"nameLocation": "8961:44:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "9023:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9015:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9015:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "9060:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9047:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 992,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9047:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "9082:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9074:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 994,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9074:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "9104:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9096:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 996,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9096:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9005:113:5"
									},
									"returnParameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "9150:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "9142:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9142:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9141:19:5"
									},
									"scope": 1101,
									"src": "8952:375:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1041,
										"nodeType": "Block",
										"src": "9637:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1032,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1022,
															"src": "9699:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1033,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "9715:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1034,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "9721:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 1037,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "9735:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Clones_$1101",
																		"typeString": "library Clones"
																	}
																],
																"id": 1036,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9727:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1035,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9727:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1038,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9727:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1031,
														"name": "predictDeterministicAddressWithImmutableArgs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1019,
															1042
														],
														"referencedDeclaration": 1019,
														"src": "9654:44:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,bytes memory,bytes32,address) pure returns (address)"
														}
													},
													"id": 1039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9654:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1030,
												"id": 1040,
												"nodeType": "Return",
												"src": "9647:94:5"
											}
										]
									},
									"documentation": {
										"id": 1020,
										"nodeType": "StructuredDocumentation",
										"src": "9333:116:5",
										"text": " @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}."
									},
									"id": 1042,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "predictDeterministicAddressWithImmutableArgs",
									"nameLocation": "9463:44:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "9525:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "9517:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1021,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9517:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "9562:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "9549:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1023,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9549:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "9584:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "9576:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1025,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9576:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9507:87:5"
									},
									"returnParameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "predicted",
												"nameLocation": "9626:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "9618:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9618:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9617:19:5"
									},
									"scope": 1101,
									"src": "9454:294:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1064,
										"nodeType": "Block",
										"src": "10441:246:5",
										"statements": [
											{
												"assignments": [
													1051
												],
												"declarations": [
													{
														"constant": false,
														"id": 1051,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10464:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1064,
														"src": "10451:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1050,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "10451:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1060,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"expression": {
																		"id": 1054,
																		"name": "instance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1045,
																		"src": "10483:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"id": 1055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10492:4:5",
																	"memberName": "code",
																	"nodeType": "MemberAccess",
																	"src": "10483:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10497:6:5",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "10483:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"hexValue": "3435",
																"id": 1057,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10506:2:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_45_by_1",
																	"typeString": "int_const 45"
																},
																"value": "45"
															},
															"src": "10483:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1053,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "10473:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1052,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "10477:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10473:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10451:58:5"
											},
											{
												"AST": {
													"nativeSrc": "10577:81:5",
													"nodeType": "YulBlock",
													"src": "10577:81:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "instance",
																		"nativeSrc": "10603:8:5",
																		"nodeType": "YulIdentifier",
																		"src": "10603:8:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "result",
																				"nativeSrc": "10617:6:5",
																				"nodeType": "YulIdentifier",
																				"src": "10617:6:5"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10625:2:5",
																				"nodeType": "YulLiteral",
																				"src": "10625:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10613:3:5",
																			"nodeType": "YulIdentifier",
																			"src": "10613:3:5"
																		},
																		"nativeSrc": "10613:15:5",
																		"nodeType": "YulFunctionCall",
																		"src": "10613:15:5"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10630:2:5",
																		"nodeType": "YulLiteral",
																		"src": "10630:2:5",
																		"type": "",
																		"value": "45"
																	},
																	{
																		"arguments": [
																			{
																				"name": "result",
																				"nativeSrc": "10640:6:5",
																				"nodeType": "YulIdentifier",
																				"src": "10640:6:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "10634:5:5",
																			"nodeType": "YulIdentifier",
																			"src": "10634:5:5"
																		},
																		"nativeSrc": "10634:13:5",
																		"nodeType": "YulFunctionCall",
																		"src": "10634:13:5"
																	}
																],
																"functionName": {
																	"name": "extcodecopy",
																	"nativeSrc": "10591:11:5",
																	"nodeType": "YulIdentifier",
																	"src": "10591:11:5"
																},
																"nativeSrc": "10591:57:5",
																"nodeType": "YulFunctionCall",
																"src": "10591:57:5"
															},
															"nativeSrc": "10591:57:5",
															"nodeType": "YulExpressionStatement",
															"src": "10591:57:5"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1045,
														"isOffset": false,
														"isSlot": false,
														"src": "10603:8:5",
														"valueSize": 1
													},
													{
														"declaration": 1051,
														"isOffset": false,
														"isSlot": false,
														"src": "10617:6:5",
														"valueSize": 1
													},
													{
														"declaration": 1051,
														"isOffset": false,
														"isSlot": false,
														"src": "10640:6:5",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1061,
												"nodeType": "InlineAssembly",
												"src": "10552:106:5"
											},
											{
												"expression": {
													"id": 1062,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1051,
													"src": "10674:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1049,
												"id": 1063,
												"nodeType": "Return",
												"src": "10667:13:5"
											}
										]
									},
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "9754:603:5",
										"text": " @dev Get the immutable args attached to a clone.\n - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n   function will return an empty array.\n - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n   creation.\n - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n   function should only be used to check addresses that are known to be clones."
									},
									"id": 1065,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fetchCloneArgs",
									"nameLocation": "10371:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "instance",
												"nameLocation": "10394:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "10386:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10386:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10385:18:5"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "10427:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1047,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10427:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10426:14:5"
									},
									"scope": 1101,
									"src": "10362:325:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1099,
										"nodeType": "Block",
										"src": "11476:362:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1075,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "11490:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11495:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "11490:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3234353331",
														"id": 1077,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11504:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_24531_by_1",
															"typeString": "int_const 24531"
														},
														"value": "24531"
													},
													"src": "11490:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1082,
												"nodeType": "IfStatement",
												"src": "11486:55:5",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1079,
															"name": "CloneArgumentsTooLong",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "11518:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 1080,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11518:23:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 1081,
													"nodeType": "RevertStatement",
													"src": "11511:30:5"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "61",
															"id": 1085,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11604:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																"typeString": "literal_string \"a\""
															},
															"value": "a"
														},
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1091,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1088,
																			"name": "args",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1070,
																			"src": "11636:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1089,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "11641:6:5",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "11636:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3435",
																		"id": 1090,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11650:2:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_45_by_1",
																			"typeString": "int_const 45"
																		},
																		"value": "45"
																	},
																	"src": "11636:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11629:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint16_$",
																	"typeString": "type(uint16)"
																},
																"typeName": {
																	"id": 1086,
																	"name": "uint16",
																	"nodeType": "ElementaryTypeName",
																	"src": "11629:6:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11629:24:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															}
														},
														{
															"hexValue": "3d81600a3d39f3363d3d373d3d3d363d73",
															"id": 1093,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11671:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d24ab45bb33e00f98da9dec50b1e1620d91f81025faf3be3a44e9d69371096d4",
																"typeString": "literal_string hex\"3d81600a3d39f3363d3d373d3d3d363d73\""
															}
														},
														{
															"id": 1094,
															"name": "implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1068,
															"src": "11728:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "5af43d82803e903d91602b57fd5bf3",
															"id": 1095,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11760:35:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_11a195f66c9175f46895bae2006d40848a680c7068b9fc4af248ff9a54a47e45",
																"typeString": "literal_string hex\"5af43d82803e903d91602b57fd5bf3\""
															}
														},
														{
															"id": 1096,
															"name": "args",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "11813:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																"typeString": "literal_string \"a\""
															},
															{
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															{
																"typeIdentifier": "t_stringliteral_d24ab45bb33e00f98da9dec50b1e1620d91f81025faf3be3a44e9d69371096d4",
																"typeString": "literal_string hex\"3d81600a3d39f3363d3d373d3d3d363d73\""
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_stringliteral_11a195f66c9175f46895bae2006d40848a680c7068b9fc4af248ff9a54a47e45",
																"typeString": "literal_string hex\"5af43d82803e903d91602b57fd5bf3\""
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1083,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "11570:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1084,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11574:12:5",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "11570:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11570:261:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1074,
												"id": 1098,
												"nodeType": "Return",
												"src": "11551:280:5"
											}
										]
									},
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "10693:640:5",
										"text": " @dev Helper that prepares the initcode of the proxy with immutable args.\n An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n abi.encodePacked is more expensive but also more portable and easier to review.\n NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes."
									},
									"id": 1100,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_cloneCodeWithImmutableArgs",
									"nameLocation": "11347:27:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "11392:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "11384:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11384:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "args",
												"nameLocation": "11429:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "11416:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1069,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11416:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11374:65:5"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1100,
												"src": "11462:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1072,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11462:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11461:14:5"
									},
									"scope": 1101,
									"src": "11338:500:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1102,
							"src": "817:11023:5",
							"usedErrors": [
								711
							],
							"usedEvents": []
						}
					],
					"src": "100:11741:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1131
						]
					},
					"id": 1132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1103,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1104,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1131,
							"linearizedBaseContracts": [
								1131
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1112,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1109,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1108,
												"id": 1111,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 1113,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 1131,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1121,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1118,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1117,
												"id": 1120,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 1122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1122,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1115,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 1131,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1126,
												"id": 1128,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 1131,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1132,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Create2.sol",
					"exportedSymbols": {
						"Create2": [
							1230
						],
						"Errors": [
							1252
						]
					},
					"id": 1231,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:7"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
							"file": "./Errors.sol",
							"id": 1135,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1231,
							"sourceUnit": 1253,
							"src": "127:36:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1134,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1252,
										"src": "135:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Create2",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1136,
								"nodeType": "StructuredDocumentation",
								"src": "165:367:7",
								"text": " @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n `CREATE2` can be used to compute in advance the address where a smart\n contract will be deployed, which allows for interesting new mechanisms known\n as 'counterfactual interactions'.\n See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n information."
							},
							"fullyImplemented": true,
							"id": 1230,
							"linearizedBaseContracts": [
								1230
							],
							"name": "Create2",
							"nameLocation": "541:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "555:50:7",
										"text": " @dev There's no code to deploy."
									},
									"errorSelector": "4ca249dc",
									"id": 1139,
									"name": "Create2EmptyBytecode",
									"nameLocation": "616:20:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "636:2:7"
									},
									"src": "610:29:7"
								},
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "1311:746:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1153,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1333:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Create2_$1230",
																		"typeString": "library Create2"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Create2_$1230",
																		"typeString": "library Create2"
																	}
																],
																"id": 1152,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1325:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1151,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1325:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1325:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1155,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1339:7:7",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1325:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1156,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1142,
														"src": "1349:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1325:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1170,
												"nodeType": "IfStatement",
												"src": "1321:125:7",
												"trueBody": {
													"id": 1169,
													"nodeType": "Block",
													"src": "1357:89:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1163,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "1413:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Create2_$1230",
																						"typeString": "library Create2"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Create2_$1230",
																						"typeString": "library Create2"
																					}
																				],
																				"id": 1162,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1405:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1161,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1405:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1164,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1405:13:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 1165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1419:7:7",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "1405:21:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1166,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1142,
																		"src": "1428:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1158,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "1378:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 1160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1385:19:7",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1240,
																	"src": "1378:26:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1167,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1378:57:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1168,
															"nodeType": "RevertStatement",
															"src": "1371:64:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1171,
															"name": "bytecode",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "1459:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1468:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1459:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1173,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1478:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1459:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1179,
												"nodeType": "IfStatement",
												"src": "1455:80:7",
												"trueBody": {
													"id": 1178,
													"nodeType": "Block",
													"src": "1481:54:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1175,
																	"name": "Create2EmptyBytecode",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1139,
																	"src": "1502:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1502:22:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1177,
															"nodeType": "RevertStatement",
															"src": "1495:29:7"
														}
													]
												}
											},
											{
												"AST": {
													"nativeSrc": "1569:392:7",
													"nodeType": "YulBlock",
													"src": "1569:392:7",
													"statements": [
														{
															"nativeSrc": "1583:67:7",
															"nodeType": "YulAssignment",
															"src": "1583:67:7",
															"value": {
																"arguments": [
																	{
																		"name": "amount",
																		"nativeSrc": "1599:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "1599:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "1611:8:7",
																				"nodeType": "YulIdentifier",
																				"src": "1611:8:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1621:4:7",
																				"nodeType": "YulLiteral",
																				"src": "1621:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1607:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1607:3:7"
																		},
																		"nativeSrc": "1607:19:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1607:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "bytecode",
																				"nativeSrc": "1634:8:7",
																				"nodeType": "YulIdentifier",
																				"src": "1634:8:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "1628:5:7",
																			"nodeType": "YulIdentifier",
																			"src": "1628:5:7"
																		},
																		"nativeSrc": "1628:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1628:15:7"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "1645:4:7",
																		"nodeType": "YulIdentifier",
																		"src": "1645:4:7"
																	}
																],
																"functionName": {
																	"name": "create2",
																	"nativeSrc": "1591:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "1591:7:7"
																},
																"nativeSrc": "1591:59:7",
																"nodeType": "YulFunctionCall",
																"src": "1591:59:7"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nativeSrc": "1583:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1583:4:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1800:151:7",
																"nodeType": "YulBlock",
																"src": "1800:151:7",
																"statements": [
																	{
																		"nativeSrc": "1818:20:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1818:20:7",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1833:4:7",
																					"nodeType": "YulLiteral",
																					"src": "1833:4:7",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "1827:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "1827:5:7"
																			},
																			"nativeSrc": "1827:11:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1827:11:7"
																		},
																		"variables": [
																			{
																				"name": "p",
																				"nativeSrc": "1822:1:7",
																				"nodeType": "YulTypedName",
																				"src": "1822:1:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "p",
																					"nativeSrc": "1870:1:7",
																					"nodeType": "YulIdentifier",
																					"src": "1870:1:7"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1873:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1873:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "1876:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "1876:14:7"
																					},
																					"nativeSrc": "1876:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "1876:16:7"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "1855:14:7",
																				"nodeType": "YulIdentifier",
																				"src": "1855:14:7"
																			},
																			"nativeSrc": "1855:38:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1855:38:7"
																		},
																		"nativeSrc": "1855:38:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1855:38:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "p",
																					"nativeSrc": "1917:1:7",
																					"nodeType": "YulIdentifier",
																					"src": "1917:1:7"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "1920:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "1920:14:7"
																					},
																					"nativeSrc": "1920:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "1920:16:7"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1910:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1910:6:7"
																			},
																			"nativeSrc": "1910:27:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1910:27:7"
																		},
																		"nativeSrc": "1910:27:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1910:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "addr",
																				"nativeSrc": "1762:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "1762:4:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1755:6:7",
																			"nodeType": "YulIdentifier",
																			"src": "1755:6:7"
																		},
																		"nativeSrc": "1755:12:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1755:12:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nativeSrc": "1780:14:7",
																							"nodeType": "YulIdentifier",
																							"src": "1780:14:7"
																						},
																						"nativeSrc": "1780:16:7",
																						"nodeType": "YulFunctionCall",
																						"src": "1780:16:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1773:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "1773:6:7"
																				},
																				"nativeSrc": "1773:24:7",
																				"nodeType": "YulFunctionCall",
																				"src": "1773:24:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1769:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1769:3:7"
																		},
																		"nativeSrc": "1769:29:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1769:29:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1751:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1751:3:7"
																},
																"nativeSrc": "1751:48:7",
																"nodeType": "YulFunctionCall",
																"src": "1751:48:7"
															},
															"nativeSrc": "1748:203:7",
															"nodeType": "YulIf",
															"src": "1748:203:7"
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1149,
														"isOffset": false,
														"isSlot": false,
														"src": "1583:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1149,
														"isOffset": false,
														"isSlot": false,
														"src": "1762:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1142,
														"isOffset": false,
														"isSlot": false,
														"src": "1599:6:7",
														"valueSize": 1
													},
													{
														"declaration": 1146,
														"isOffset": false,
														"isSlot": false,
														"src": "1611:8:7",
														"valueSize": 1
													},
													{
														"declaration": 1146,
														"isOffset": false,
														"isSlot": false,
														"src": "1634:8:7",
														"valueSize": 1
													},
													{
														"declaration": 1144,
														"isOffset": false,
														"isSlot": false,
														"src": "1645:4:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1180,
												"nodeType": "InlineAssembly",
												"src": "1544:417:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1181,
														"name": "addr",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1149,
														"src": "1974:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1184,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1990:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1183,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1982:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1182,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1982:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1982:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1974:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1193,
												"nodeType": "IfStatement",
												"src": "1970:81:7",
												"trueBody": {
													"id": 1192,
													"nodeType": "Block",
													"src": "1994:57:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1187,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1252,
																		"src": "2015:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$1252_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 1189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2022:16:7",
																	"memberName": "FailedDeployment",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1246,
																	"src": "2015:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2015:25:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1191,
															"nodeType": "RevertStatement",
															"src": "2008:32:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1140,
										"nodeType": "StructuredDocumentation",
										"src": "645:560:7",
										"text": " @dev Deploys a contract using `CREATE2`. The address where the contract\n will be deployed can be known in advance via {computeAddress}.\n The bytecode for a contract can be obtained from Solidity with\n `type(contractName).creationCode`.\n Requirements:\n - `bytecode` must not be empty.\n - `salt` must have not been used for `bytecode` already.\n - the factory must have a balance of at least `amount`.\n - if `amount` is non-zero, `bytecode` must have a `payable` constructor."
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deploy",
									"nameLocation": "1219:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1234:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1226:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "1250:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1242:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "bytecode",
												"nameLocation": "1269:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1256:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1145,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1256:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1225:53:7"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "1305:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "1297:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1297:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1296:14:7"
									},
									"scope": 1230,
									"src": "1210:847:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1214,
										"nodeType": "Block",
										"src": "2353:73:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1206,
															"name": "salt",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1198,
															"src": "2385:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1207,
															"name": "bytecodeHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1200,
															"src": "2391:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 1210,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2413:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Create2_$1230",
																		"typeString": "library Create2"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Create2_$1230",
																		"typeString": "library Create2"
																	}
																],
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2405:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1208,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2405:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2405:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1205,
														"name": "computeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1215,
															1229
														],
														"referencedDeclaration": 1229,
														"src": "2370:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes32,address) pure returns (address)"
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2370:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1204,
												"id": 1213,
												"nodeType": "Return",
												"src": "2363:56:7"
											}
										]
									},
									"documentation": {
										"id": 1196,
										"nodeType": "StructuredDocumentation",
										"src": "2063:193:7",
										"text": " @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n `bytecodeHash` or `salt` will result in a new destination address."
									},
									"id": 1215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "2270:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "2293:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "2285:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2285:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "bytecodeHash",
												"nameLocation": "2307:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "2299:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2299:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2284:36:7"
									},
									"returnParameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "2344:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2343:9:7"
									},
									"scope": 1230,
									"src": "2261:165:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "2784:1679:7",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2819:1638:7",
													"nodeType": "YulBlock",
													"src": "2819:1638:7",
													"statements": [
														{
															"nativeSrc": "2833:22:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2833:22:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2850:4:7",
																		"nodeType": "YulLiteral",
																		"src": "2850:4:7",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2844:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "2844:5:7"
																},
																"nativeSrc": "2844:11:7",
																"nodeType": "YulFunctionCall",
																"src": "2844:11:7"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "2837:3:7",
																	"nodeType": "YulTypedName",
																	"src": "2837:3:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4057:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4057:3:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4062:4:7",
																				"nodeType": "YulLiteral",
																				"src": "4062:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4053:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4053:3:7"
																		},
																		"nativeSrc": "4053:14:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4053:14:7"
																	},
																	{
																		"name": "bytecodeHash",
																		"nativeSrc": "4069:12:7",
																		"nodeType": "YulIdentifier",
																		"src": "4069:12:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4046:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4046:6:7"
																},
																"nativeSrc": "4046:36:7",
																"nodeType": "YulFunctionCall",
																"src": "4046:36:7"
															},
															"nativeSrc": "4046:36:7",
															"nodeType": "YulExpressionStatement",
															"src": "4046:36:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "4106:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4106:3:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4111:4:7",
																				"nodeType": "YulLiteral",
																				"src": "4111:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4102:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4102:3:7"
																		},
																		"nativeSrc": "4102:14:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4102:14:7"
																	},
																	{
																		"name": "salt",
																		"nativeSrc": "4118:4:7",
																		"nodeType": "YulIdentifier",
																		"src": "4118:4:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4095:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4095:6:7"
																},
																"nativeSrc": "4095:28:7",
																"nodeType": "YulFunctionCall",
																"src": "4095:28:7"
															},
															"nativeSrc": "4095:28:7",
															"nodeType": "YulExpressionStatement",
															"src": "4095:28:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "4143:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4143:3:7"
																	},
																	{
																		"name": "deployer",
																		"nativeSrc": "4148:8:7",
																		"nodeType": "YulIdentifier",
																		"src": "4148:8:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4136:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4136:6:7"
																},
																"nativeSrc": "4136:21:7",
																"nodeType": "YulFunctionCall",
																"src": "4136:21:7"
															},
															"nativeSrc": "4136:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "4136:21:7"
														},
														{
															"nativeSrc": "4219:27:7",
															"nodeType": "YulVariableDeclaration",
															"src": "4219:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "4236:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4236:3:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4241:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4241:4:7",
																		"type": "",
																		"value": "0x0b"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4232:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4232:3:7"
																},
																"nativeSrc": "4232:14:7",
																"nodeType": "YulFunctionCall",
																"src": "4232:14:7"
															},
															"variables": [
																{
																	"name": "start",
																	"nativeSrc": "4223:5:7",
																	"nodeType": "YulTypedName",
																	"src": "4223:5:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "4345:5:7",
																		"nodeType": "YulIdentifier",
																		"src": "4345:5:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4352:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4352:4:7",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "mstore8",
																	"nativeSrc": "4337:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "4337:7:7"
																},
																"nativeSrc": "4337:20:7",
																"nodeType": "YulFunctionCall",
																"src": "4337:20:7"
															},
															"nativeSrc": "4337:20:7",
															"nodeType": "YulExpressionStatement",
															"src": "4337:20:7"
														},
														{
															"nativeSrc": "4370:77:7",
															"nodeType": "YulAssignment",
															"src": "4370:77:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "start",
																				"nativeSrc": "4392:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "4392:5:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4399:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4399:2:7",
																				"type": "",
																				"value": "85"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nativeSrc": "4382:9:7",
																			"nodeType": "YulIdentifier",
																			"src": "4382:9:7"
																		},
																		"nativeSrc": "4382:20:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4382:20:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4404:42:7",
																		"nodeType": "YulLiteral",
																		"src": "4404:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4378:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4378:3:7"
																},
																"nativeSrc": "4378:69:7",
																"nodeType": "YulFunctionCall",
																"src": "4378:69:7"
															},
															"variableNames": [
																{
																	"name": "addr",
																	"nativeSrc": "4370:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "4370:4:7"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1225,
														"isOffset": false,
														"isSlot": false,
														"src": "4370:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1220,
														"isOffset": false,
														"isSlot": false,
														"src": "4069:12:7",
														"valueSize": 1
													},
													{
														"declaration": 1222,
														"isOffset": false,
														"isSlot": false,
														"src": "4148:8:7",
														"valueSize": 1
													},
													{
														"declaration": 1218,
														"isOffset": false,
														"isSlot": false,
														"src": "4118:4:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1227,
												"nodeType": "InlineAssembly",
												"src": "2794:1663:7"
											}
										]
									},
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "2432:232:7",
										"text": " @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."
									},
									"id": 1229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "2678:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "2701:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "2693:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1217,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "bytecodeHash",
												"nameLocation": "2715:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "2707:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2707:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "2737:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "2729:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2729:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2692:54:7"
									},
									"returnParameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2778:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "2770:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:14:7"
									},
									"scope": 1230,
									"src": "2669:1794:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1231,
							"src": "533:3932:7",
							"usedErrors": [
								1139
							],
							"usedEvents": []
						}
					],
					"src": "101:4365:7"
				},
				"id": 7
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							1252
						]
					},
					"id": 1253,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1232,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "100:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1233,
								"nodeType": "StructuredDocumentation",
								"src": "126:284:8",
								"text": " @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 1252,
							"linearizedBaseContracts": [
								1252
							],
							"name": "Errors",
							"nameLocation": "419:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1234,
										"nodeType": "StructuredDocumentation",
										"src": "432:94:8",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cf479181",
									"id": 1240,
									"name": "InsufficientBalance",
									"nameLocation": "537:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "565:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "557:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "557:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "582:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "574:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "574:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "556:33:8"
									},
									"src": "531:59:8"
								},
								{
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "596:89:8",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "d6bda275",
									"id": 1243,
									"name": "FailedCall",
									"nameLocation": "696:10:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "706:2:8"
									},
									"src": "690:19:8"
								},
								{
									"documentation": {
										"id": 1244,
										"nodeType": "StructuredDocumentation",
										"src": "715:46:8",
										"text": " @dev The deployment failed."
									},
									"errorSelector": "b06ebf3d",
									"id": 1246,
									"name": "FailedDeployment",
									"nameLocation": "772:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "788:2:8"
									},
									"src": "766:25:8"
								},
								{
									"documentation": {
										"id": 1247,
										"nodeType": "StructuredDocumentation",
										"src": "797:58:8",
										"text": " @dev A necessary precompile is missing."
									},
									"errorSelector": "42b01bce",
									"id": 1251,
									"name": "MissingPrecompile",
									"nameLocation": "866:17:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1251,
												"src": "884:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "884:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "883:9:8"
									},
									"src": "860:33:8"
								}
							],
							"scope": 1253,
							"src": "411:484:8",
							"usedErrors": [
								1240,
								1243,
								1246,
								1251
							],
							"usedEvents": []
						}
					],
					"src": "100:796:8"
				},
				"id": 8
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
					"exportedSymbols": {
						"Hashes": [
							1292
						]
					},
					"id": 1293,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1254,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Hashes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1255,
								"nodeType": "StructuredDocumentation",
								"src": "139:81:9",
								"text": " @dev Library of standard hash functions.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 1292,
							"linearizedBaseContracts": [
								1292
							],
							"name": "Hashes",
							"nameLocation": "229:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1278,
										"nodeType": "Block",
										"src": "588:83:9",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1265,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "605:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1266,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "609:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "605:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 1273,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1260,
																"src": "659:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1274,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1258,
																"src": "662:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1272,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1291,
															"src": "640:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 1275,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "640:24:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "605:59:9",
													"trueExpression": {
														"arguments": [
															{
																"id": 1269,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1258,
																"src": "632:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1270,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1260,
																"src": "635:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1268,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1291,
															"src": "613:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 1271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "613:24:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1264,
												"id": 1277,
												"nodeType": "Return",
												"src": "598:66:9"
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "242:257:9",
										"text": " @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."
									},
									"id": 1279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "commutativeKeccak256",
									"nameLocation": "513:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "542:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "534:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "534:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "553:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "545:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "533:22:9"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "579:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1262,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "579:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "578:9:9"
									},
									"scope": 1292,
									"src": "504:167:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1290,
										"nodeType": "Block",
										"src": "879:151:9",
										"statements": [
											{
												"AST": {
													"nativeSrc": "914:110:9",
													"nodeType": "YulBlock",
													"src": "914:110:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "935:4:9",
																		"nodeType": "YulLiteral",
																		"src": "935:4:9",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nativeSrc": "941:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "941:1:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "928:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "928:6:9"
																},
																"nativeSrc": "928:15:9",
																"nodeType": "YulFunctionCall",
																"src": "928:15:9"
															},
															"nativeSrc": "928:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "928:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "963:4:9",
																		"nodeType": "YulLiteral",
																		"src": "963:4:9",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nativeSrc": "969:1:9",
																		"nodeType": "YulIdentifier",
																		"src": "969:1:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "956:6:9",
																	"nodeType": "YulIdentifier",
																	"src": "956:6:9"
																},
																"nativeSrc": "956:15:9",
																"nodeType": "YulFunctionCall",
																"src": "956:15:9"
															},
															"nativeSrc": "956:15:9",
															"nodeType": "YulExpressionStatement",
															"src": "956:15:9"
														},
														{
															"nativeSrc": "984:30:9",
															"nodeType": "YulAssignment",
															"src": "984:30:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1003:4:9",
																		"nodeType": "YulLiteral",
																		"src": "1003:4:9",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1009:4:9",
																		"nodeType": "YulLiteral",
																		"src": "1009:4:9",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "993:9:9",
																	"nodeType": "YulIdentifier",
																	"src": "993:9:9"
																},
																"nativeSrc": "993:21:9",
																"nodeType": "YulFunctionCall",
																"src": "993:21:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "984:5:9",
																	"nodeType": "YulIdentifier",
																	"src": "984:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1282,
														"isOffset": false,
														"isSlot": false,
														"src": "941:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "969:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1287,
														"isOffset": false,
														"isSlot": false,
														"src": "984:5:9",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1289,
												"nodeType": "InlineAssembly",
												"src": "889:135:9"
											}
										]
									},
									"documentation": {
										"id": 1280,
										"nodeType": "StructuredDocumentation",
										"src": "677:109:9",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 1291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "efficientKeccak256",
									"nameLocation": "800:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "827:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "819:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "838:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "830:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1283,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "830:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:22:9"
									},
									"returnParameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "872:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1291,
												"src": "864:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1286,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "864:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "863:15:9"
									},
									"scope": 1292,
									"src": "791:239:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1293,
							"src": "221:811:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "113:920:9"
				},
				"id": 9
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"Hashes": [
							1292
						],
						"MerkleProof": [
							2365
						]
					},
					"id": 2366,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1294,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "206:24:10"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
							"file": "./Hashes.sol",
							"id": 1296,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2366,
							"sourceUnit": 1293,
							"src": "232:36:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1295,
										"name": "Hashes",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1292,
										"src": "240:6:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1297,
								"nodeType": "StructuredDocumentation",
								"src": "270:1082:10",
								"text": " @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."
							},
							"fullyImplemented": true,
							"id": 2365,
							"linearizedBaseContracts": [
								2365
							],
							"name": "MerkleProof",
							"nameLocation": "1361:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "1379:60:10",
										"text": "@dev The multiproof provided is not valid."
									},
									"errorSelector": "35140492",
									"id": 1300,
									"name": "MerkleProofInvalidMultiproof",
									"nameLocation": "1450:28:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1478:2:10"
									},
									"src": "1444:37:10"
								},
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "1999:57:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1314,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1304,
																"src": "2029:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1315,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "2036:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1313,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1362,
																1444
															],
															"referencedDeclaration": 1362,
															"src": "2016:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 1316,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2016:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1317,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "2045:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2016:33:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1312,
												"id": 1319,
												"nodeType": "Return",
												"src": "2009:40:10"
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "1487:410:10",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1911:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1304,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1935:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1918:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1302,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1918:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1303,
													"nodeType": "ArrayTypeName",
													"src": "1918:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1950:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1942:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1305,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1942:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1964:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1956:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1307,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1917:52:10"
									},
									"returnParameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1993:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1310,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1993:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1992:6:10"
									},
									"scope": 2365,
									"src": "1902:154:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "2549:216:10",
										"statements": [
											{
												"assignments": [
													1333
												],
												"declarations": [
													{
														"constant": false,
														"id": 1333,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2567:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1361,
														"src": "2559:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1332,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2559:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1335,
												"initialValue": {
													"id": 1334,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1327,
													"src": "2582:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2559:27:10"
											},
											{
												"body": {
													"id": 1357,
													"nodeType": "Block",
													"src": "2639:91:10",
													"statements": [
														{
															"expression": {
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1347,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1333,
																	"src": "2653:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1350,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1333,
																			"src": "2696:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 1351,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1325,
																				"src": "2710:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 1353,
																			"indexExpression": {
																				"id": 1352,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1337,
																				"src": "2716:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2710:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1348,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "2668:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$1292_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2675:20:10",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1279,
																		"src": "2668:27:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2668:51:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2653:66:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1356,
															"nodeType": "ExpressionStatement",
															"src": "2653:66:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1340,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1337,
														"src": "2616:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1341,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "2620:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 1342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2626:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2620:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2616:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1358,
												"initializationExpression": {
													"assignments": [
														1337
													],
													"declarations": [
														{
															"constant": false,
															"id": 1337,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2609:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1358,
															"src": "2601:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1336,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2601:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1339,
													"initialValue": {
														"hexValue": "30",
														"id": 1338,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2613:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2601:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2634:3:10",
														"subExpression": {
															"id": 1344,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1337,
															"src": "2634:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1346,
													"nodeType": "ExpressionStatement",
													"src": "2634:3:10"
												},
												"nodeType": "ForStatement",
												"src": "2596:134:10"
											},
											{
												"expression": {
													"id": 1359,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1333,
													"src": "2746:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1331,
												"id": 1360,
												"nodeType": "Return",
												"src": "2739:19:10"
											}
										]
									},
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "2062:390:10",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "2466:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2496:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "2479:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1323,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2479:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1324,
													"nodeType": "ArrayTypeName",
													"src": "2479:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2511:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "2503:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1326,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:38:10"
									},
									"returnParameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "2540:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1329,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:9:10"
									},
									"scope": 2365,
									"src": "2457:308:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1393,
										"nodeType": "Block",
										"src": "3376:65:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1386,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1366,
																"src": "3406:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1387,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1370,
																"src": "3413:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1388,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1380,
																"src": "3419:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1385,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1362,
																1444
															],
															"referencedDeclaration": 1444,
															"src": "3393:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3393:33:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1390,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1368,
														"src": "3430:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3393:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1384,
												"id": 1392,
												"nodeType": "Return",
												"src": "3386:48:10"
											}
										]
									},
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "2771:407:10",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 1394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "3192:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3225:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3208:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1364,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3208:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1365,
													"nodeType": "ArrayTypeName",
													"src": "3208:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3248:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3240:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1367,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3240:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3270:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3262:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3334:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3284:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1379,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1375,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1372,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1379,
																"src": "3293:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1371,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3293:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1374,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1379,
																"src": "3302:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1373,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3292:18:10"
													},
													"returnParameterTypes": {
														"id": 1378,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1377,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1379,
																"src": "3325:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1376,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3325:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3324:9:10"
													},
													"src": "3284:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3198:148:10"
									},
									"returnParameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "3370:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1382,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3370:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:6:10"
									},
									"scope": 2365,
									"src": "3183:258:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1443,
										"nodeType": "Block",
										"src": "4019:195:10",
										"statements": [
											{
												"assignments": [
													1416
												],
												"declarations": [
													{
														"constant": false,
														"id": 1416,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "4037:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1443,
														"src": "4029:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1415,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4029:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1418,
												"initialValue": {
													"id": 1417,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1400,
													"src": "4052:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4029:27:10"
											},
											{
												"body": {
													"id": 1439,
													"nodeType": "Block",
													"src": "4109:70:10",
													"statements": [
														{
															"expression": {
																"id": 1437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1430,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1416,
																	"src": "4123:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1432,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1416,
																			"src": "4145:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 1433,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1398,
																				"src": "4159:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 1435,
																			"indexExpression": {
																				"id": 1434,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1420,
																				"src": "4165:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4159:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1431,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1410,
																		"src": "4138:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4138:30:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "4123:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1438,
															"nodeType": "ExpressionStatement",
															"src": "4123:45:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1423,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1420,
														"src": "4086:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1424,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1398,
															"src": "4090:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 1425,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4096:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4090:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4086:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1440,
												"initializationExpression": {
													"assignments": [
														1420
													],
													"declarations": [
														{
															"constant": false,
															"id": 1420,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4079:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1440,
															"src": "4071:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1419,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4071:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1422,
													"initialValue": {
														"hexValue": "30",
														"id": 1421,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4083:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4071:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4104:3:10",
														"subExpression": {
															"id": 1427,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1420,
															"src": "4104:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1429,
													"nodeType": "ExpressionStatement",
													"src": "4104:3:10"
												},
												"nodeType": "ForStatement",
												"src": "4066:113:10"
											},
											{
												"expression": {
													"id": 1441,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1416,
													"src": "4195:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1414,
												"id": 1442,
												"nodeType": "Return",
												"src": "4188:19:10"
											}
										]
									},
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "3447:387:10",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 1444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "3848:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3887:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1444,
												"src": "3870:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1396,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3870:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1397,
													"nodeType": "ArrayTypeName",
													"src": "3870:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3910:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1444,
												"src": "3902:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1399,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3974:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1444,
												"src": "3924:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1409,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1405,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1402,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1409,
																"src": "3933:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1401,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3933:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1404,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1409,
																"src": "3942:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1403,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3942:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3932:18:10"
													},
													"returnParameterTypes": {
														"id": 1408,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1407,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1409,
																"src": "3965:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1406,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3965:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3964:9:10"
													},
													"src": "3924:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3860:126:10"
									},
									"returnParameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1444,
												"src": "4010:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4009:9:10"
									},
									"scope": 2365,
									"src": "3839:375:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1464,
										"nodeType": "Block",
										"src": "4744:65:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1458,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1448,
																"src": "4782:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1459,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1452,
																"src": "4789:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1457,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1506,
																1588
															],
															"referencedDeclaration": 1506,
															"src": "4761:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32) pure returns (bytes32)"
															}
														},
														"id": 1460,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4761:33:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1461,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1450,
														"src": "4798:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4761:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1456,
												"id": 1463,
												"nodeType": "Return",
												"src": "4754:48:10"
											}
										]
									},
									"documentation": {
										"id": 1445,
										"nodeType": "StructuredDocumentation",
										"src": "4220:412:10",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 1465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "4646:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "4680:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "4661:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1446,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4661:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1447,
													"nodeType": "ArrayTypeName",
													"src": "4661:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "4695:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "4687:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1449,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "4709:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "4701:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1451,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:54:10"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "4738:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4738:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4737:6:10"
									},
									"scope": 2365,
									"src": "4637:172:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1505,
										"nodeType": "Block",
										"src": "5314:216:10",
										"statements": [
											{
												"assignments": [
													1477
												],
												"declarations": [
													{
														"constant": false,
														"id": 1477,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "5332:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1505,
														"src": "5324:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1476,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5324:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1479,
												"initialValue": {
													"id": 1478,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1471,
													"src": "5347:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5324:27:10"
											},
											{
												"body": {
													"id": 1501,
													"nodeType": "Block",
													"src": "5404:91:10",
													"statements": [
														{
															"expression": {
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1491,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1477,
																	"src": "5418:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1494,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1477,
																			"src": "5461:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 1495,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1469,
																				"src": "5475:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 1497,
																			"indexExpression": {
																				"id": 1496,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1481,
																				"src": "5481:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5475:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1492,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "5433:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$1292_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5440:20:10",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1279,
																		"src": "5433:27:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5433:51:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "5418:66:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1500,
															"nodeType": "ExpressionStatement",
															"src": "5418:66:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1484,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1481,
														"src": "5381:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1485,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1469,
															"src": "5385:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 1486,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5391:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5385:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5381:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1502,
												"initializationExpression": {
													"assignments": [
														1481
													],
													"declarations": [
														{
															"constant": false,
															"id": 1481,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5374:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1502,
															"src": "5366:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1480,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5366:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1483,
													"initialValue": {
														"hexValue": "30",
														"id": 1482,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5378:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5366:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5399:3:10",
														"subExpression": {
															"id": 1488,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1481,
															"src": "5399:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1490,
													"nodeType": "ExpressionStatement",
													"src": "5399:3:10"
												},
												"nodeType": "ForStatement",
												"src": "5361:134:10"
											},
											{
												"expression": {
													"id": 1503,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1477,
													"src": "5511:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1475,
												"id": 1504,
												"nodeType": "Return",
												"src": "5504:19:10"
											}
										]
									},
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "4815:392:10",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 1506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "5221:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "5261:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1506,
												"src": "5242:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1467,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5242:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1468,
													"nodeType": "ArrayTypeName",
													"src": "5242:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "5276:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1506,
												"src": "5268:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5241:40:10"
									},
									"returnParameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1506,
												"src": "5305:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1473,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5305:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5304:9:10"
									},
									"scope": 2365,
									"src": "5212:318:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1537,
										"nodeType": "Block",
										"src": "6153:73:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1530,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1510,
																"src": "6191:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1531,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1514,
																"src": "6198:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1532,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1524,
																"src": "6204:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1529,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1506,
																1588
															],
															"referencedDeclaration": 1588,
															"src": "6170:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1533,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6170:41:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1534,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1512,
														"src": "6215:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "6170:49:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1528,
												"id": 1536,
												"nodeType": "Return",
												"src": "6163:56:10"
											}
										]
									},
									"documentation": {
										"id": 1507,
										"nodeType": "StructuredDocumentation",
										"src": "5536:409:10",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 1538,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "5959:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6002:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "5983:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1508,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5983:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1509,
													"nodeType": "ArrayTypeName",
													"src": "5983:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "6025:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6017:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1511,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6017:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6047:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6039:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1513,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6111:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6061:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1523,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1519,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1516,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1523,
																"src": "6070:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1515,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6070:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1518,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1523,
																"src": "6079:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1517,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6079:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6069:18:10"
													},
													"returnParameterTypes": {
														"id": 1522,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1521,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1523,
																"src": "6102:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1520,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6102:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6101:9:10"
													},
													"src": "6061:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "5973:150:10"
									},
									"returnParameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6147:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6147:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:6:10"
									},
									"scope": 2365,
									"src": "5950:276:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1587,
										"nodeType": "Block",
										"src": "6816:195:10",
										"statements": [
											{
												"assignments": [
													1560
												],
												"declarations": [
													{
														"constant": false,
														"id": 1560,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "6834:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1587,
														"src": "6826:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1559,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6826:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1562,
												"initialValue": {
													"id": 1561,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1544,
													"src": "6849:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6826:27:10"
											},
											{
												"body": {
													"id": 1583,
													"nodeType": "Block",
													"src": "6906:70:10",
													"statements": [
														{
															"expression": {
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1574,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1560,
																	"src": "6920:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1576,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1560,
																			"src": "6942:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 1577,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1542,
																				"src": "6956:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 1579,
																			"indexExpression": {
																				"id": 1578,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1564,
																				"src": "6962:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6956:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1575,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1554,
																		"src": "6935:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1580,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6935:30:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "6920:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1582,
															"nodeType": "ExpressionStatement",
															"src": "6920:45:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1567,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1564,
														"src": "6883:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1568,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1542,
															"src": "6887:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 1569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6893:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6887:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6883:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1584,
												"initializationExpression": {
													"assignments": [
														1564
													],
													"declarations": [
														{
															"constant": false,
															"id": 1564,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6876:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1584,
															"src": "6868:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1563,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6868:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1566,
													"initialValue": {
														"hexValue": "30",
														"id": 1565,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6880:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6868:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1572,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6901:3:10",
														"subExpression": {
															"id": 1571,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1564,
															"src": "6901:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1573,
													"nodeType": "ExpressionStatement",
													"src": "6901:3:10"
												},
												"nodeType": "ForStatement",
												"src": "6863:113:10"
											},
											{
												"expression": {
													"id": 1585,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1560,
													"src": "6992:12:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1558,
												"id": 1586,
												"nodeType": "Return",
												"src": "6985:19:10"
											}
										]
									},
									"documentation": {
										"id": 1539,
										"nodeType": "StructuredDocumentation",
										"src": "6232:389:10",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 1588,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "6635:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6684:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "6665:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1540,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6665:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1541,
													"nodeType": "ArrayTypeName",
													"src": "6665:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6707:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "6699:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1543,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6699:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6771:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "6721:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1553,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1549,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1546,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1553,
																"src": "6730:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1545,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6730:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1548,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1553,
																"src": "6739:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1547,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6739:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6729:18:10"
													},
													"returnParameterTypes": {
														"id": 1552,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1551,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1553,
																"src": "6762:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1550,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6762:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6761:9:10"
													},
													"src": "6721:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "6655:128:10"
									},
									"returnParameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "6807:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1556,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6807:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6806:9:10"
									},
									"scope": 2365,
									"src": "6626:385:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1613,
										"nodeType": "Block",
										"src": "7797:76:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1606,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1592,
																"src": "7832:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1607,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1595,
																"src": "7839:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1608,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1600,
																"src": "7851:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1605,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1772,
																1976
															],
															"referencedDeclaration": 1772,
															"src": "7814:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7814:44:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1610,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1597,
														"src": "7862:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7814:52:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1604,
												"id": 1612,
												"nodeType": "Return",
												"src": "7807:59:10"
											}
										]
									},
									"documentation": {
										"id": 1589,
										"nodeType": "StructuredDocumentation",
										"src": "7017:593:10",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1614,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "7624:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "7667:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "7650:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1590,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7650:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1591,
													"nodeType": "ArrayTypeName",
													"src": "7650:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "7696:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "7682:24:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1593,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "7682:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1594,
													"nodeType": "ArrayTypeName",
													"src": "7682:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1597,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "7724:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "7716:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1596,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "7755:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "7738:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1598,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7738:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1599,
													"nodeType": "ArrayTypeName",
													"src": "7738:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7640:127:10"
									},
									"returnParameters": {
										"id": 1604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "7791:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1602,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7791:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7790:6:10"
									},
									"scope": 2365,
									"src": "7615:258:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1771,
										"nodeType": "Block",
										"src": "9159:2104:10",
										"statements": [
											{
												"assignments": [
													1630
												],
												"declarations": [
													{
														"constant": false,
														"id": 1630,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "9551:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "9543:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1629,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9543:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1633,
												"initialValue": {
													"expression": {
														"id": 1631,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1624,
														"src": "9563:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9570:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9563:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9543:33:10"
											},
											{
												"assignments": [
													1635
												],
												"declarations": [
													{
														"constant": false,
														"id": 1635,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "9594:13:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "9586:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1634,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9586:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1638,
												"initialValue": {
													"expression": {
														"id": 1636,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1621,
														"src": "9610:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9621:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9610:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9586:41:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1639,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1630,
															"src": "9675:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1640,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1618,
																"src": "9687:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9693:6:10",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "9687:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9675:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1645,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1643,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "9703:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9719:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "9703:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9675:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1651,
												"nodeType": "IfStatement",
												"src": "9671:113:10",
												"trueBody": {
													"id": 1650,
													"nodeType": "Block",
													"src": "9722:62:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1647,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1300,
																	"src": "9743:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1648,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9743:30:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1649,
															"nodeType": "RevertStatement",
															"src": "9736:37:10"
														}
													]
												}
											},
											{
												"assignments": [
													1656
												],
												"declarations": [
													{
														"constant": false,
														"id": 1656,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "10045:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "10028:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1654,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10028:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1655,
															"nodeType": "ArrayTypeName",
															"src": "10028:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1662,
												"initialValue": {
													"arguments": [
														{
															"id": 1660,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "10068:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1659,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "10054:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1657,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10058:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1658,
															"nodeType": "ArrayTypeName",
															"src": "10058:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10054:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10028:54:10"
											},
											{
												"assignments": [
													1664
												],
												"declarations": [
													{
														"constant": false,
														"id": 1664,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "10100:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "10092:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1663,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10092:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1666,
												"initialValue": {
													"hexValue": "30",
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10110:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10092:19:10"
											},
											{
												"assignments": [
													1668
												],
												"declarations": [
													{
														"constant": false,
														"id": 1668,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "10129:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "10121:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1667,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10121:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1670,
												"initialValue": {
													"hexValue": "30",
													"id": 1669,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10139:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10121:19:10"
											},
											{
												"assignments": [
													1672
												],
												"declarations": [
													{
														"constant": false,
														"id": 1672,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "10158:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1771,
														"src": "10150:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1671,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10150:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1674,
												"initialValue": {
													"hexValue": "30",
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10169:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10150:20:10"
											},
											{
												"body": {
													"id": 1734,
													"nodeType": "Block",
													"src": "10590:310:10",
													"statements": [
														{
															"assignments": [
																1686
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1686,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "10612:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1734,
																	"src": "10604:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1685,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1699,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1687,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1664,
																		"src": "10616:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1688,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1630,
																		"src": "10626:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10616:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1694,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1656,
																		"src": "10658:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1697,
																	"indexExpression": {
																		"id": 1696,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10665:9:10",
																		"subExpression": {
																			"id": 1695,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1668,
																			"src": "10665:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10658:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1698,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10616:59:10",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1690,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1624,
																		"src": "10638:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1693,
																	"indexExpression": {
																		"id": 1692,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10645:9:10",
																		"subExpression": {
																			"id": 1691,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1664,
																			"src": "10645:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10638:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10604:71:10"
														},
														{
															"assignments": [
																1701
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1701,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "10697:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1734,
																	"src": "10689:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1700,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10689:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1723,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1702,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1621,
																		"src": "10701:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1704,
																	"indexExpression": {
																		"id": 1703,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1676,
																		"src": "10712:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10701:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1718,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1618,
																		"src": "10813:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1721,
																	"indexExpression": {
																		"id": 1720,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10819:10:10",
																		"subExpression": {
																			"id": 1719,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1672,
																			"src": "10819:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10813:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1722,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10701:129:10",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1707,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1705,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1664,
																					"src": "10734:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1706,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1630,
																					"src": "10744:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10734:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1712,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1656,
																					"src": "10776:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1715,
																				"indexExpression": {
																					"id": 1714,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10783:9:10",
																					"subExpression": {
																						"id": 1713,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1668,
																						"src": "10783:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10776:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1716,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "10734:59:10",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1708,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1624,
																					"src": "10756:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1711,
																				"indexExpression": {
																					"id": 1710,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10763:9:10",
																					"subExpression": {
																						"id": 1709,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1664,
																						"src": "10763:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10756:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1717,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10733:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10689:141:10"
														},
														{
															"expression": {
																"id": 1732,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1724,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1656,
																		"src": "10844:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1726,
																	"indexExpression": {
																		"id": 1725,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1676,
																		"src": "10851:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "10844:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1729,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1686,
																			"src": "10884:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1730,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1701,
																			"src": "10887:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1727,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "10856:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$1292_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10863:20:10",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1279,
																		"src": "10856:27:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1731,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10856:33:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "10844:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1733,
															"nodeType": "ExpressionStatement",
															"src": "10844:45:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1679,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "10566:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1680,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1635,
														"src": "10570:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10566:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1735,
												"initializationExpression": {
													"assignments": [
														1676
													],
													"declarations": [
														{
															"constant": false,
															"id": 1676,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10559:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1735,
															"src": "10551:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1675,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "10551:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1678,
													"initialValue": {
														"hexValue": "30",
														"id": 1677,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10563:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10551:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1683,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10585:3:10",
														"subExpression": {
															"id": 1682,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "10585:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1684,
													"nodeType": "ExpressionStatement",
													"src": "10585:3:10"
												},
												"nodeType": "ForStatement",
												"src": "10546:354:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1736,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1635,
														"src": "10914:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10930:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10914:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1758,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1756,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1630,
															"src": "11155:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1757,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11167:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11155:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1768,
														"nodeType": "Block",
														"src": "11217:40:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1764,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1618,
																		"src": "11238:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1766,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1765,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11244:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11238:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1628,
																"id": 1767,
																"nodeType": "Return",
																"src": "11231:15:10"
															}
														]
													},
													"id": 1769,
													"nodeType": "IfStatement",
													"src": "11151:106:10",
													"trueBody": {
														"id": 1763,
														"nodeType": "Block",
														"src": "11170:41:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1759,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1624,
																		"src": "11191:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1761,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11198:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11191:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1628,
																"id": 1762,
																"nodeType": "Return",
																"src": "11184:16:10"
															}
														]
													}
												},
												"id": 1770,
												"nodeType": "IfStatement",
												"src": "10910:347:10",
												"trueBody": {
													"id": 1755,
													"nodeType": "Block",
													"src": "10933:212:10",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1742,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1739,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1672,
																	"src": "10951:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1740,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1618,
																		"src": "10963:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1741,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10969:6:10",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "10963:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10951:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1747,
															"nodeType": "IfStatement",
															"src": "10947:100:10",
															"trueBody": {
																"id": 1746,
																"nodeType": "Block",
																"src": "10977:70:10",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1743,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1300,
																				"src": "11002:28:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1744,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11002:30:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1745,
																		"nodeType": "RevertStatement",
																		"src": "10995:37:10"
																	}
																]
															}
														},
														{
															"id": 1754,
															"nodeType": "UncheckedBlock",
															"src": "11060:75:10",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1748,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1656,
																			"src": "11095:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1752,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1751,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1749,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1635,
																				"src": "11102:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1750,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11118:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "11102:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "11095:25:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1628,
																	"id": 1753,
																	"nodeType": "Return",
																	"src": "11088:32:10"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1615,
										"nodeType": "StructuredDocumentation",
										"src": "7879:1100:10",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "8993:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1618,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "9037:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "9020:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1616,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9020:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1617,
													"nodeType": "ArrayTypeName",
													"src": "9020:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1621,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "9066:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "9052:24:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1619,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "9052:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1620,
													"nodeType": "ArrayTypeName",
													"src": "9052:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1624,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "9103:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "9086:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1622,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9086:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1623,
													"nodeType": "ArrayTypeName",
													"src": "9086:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:105:10"
									},
									"returnParameters": {
										"id": 1628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1627,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "9147:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1772,
												"src": "9139:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1626,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9139:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:20:10"
									},
									"scope": 2365,
									"src": "8984:2279:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1808,
										"nodeType": "Block",
										"src": "12112:84:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1800,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1776,
																"src": "12147:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1801,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1779,
																"src": "12154:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1802,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1784,
																"src": "12166:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1803,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1794,
																"src": "12174:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1799,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1772,
																1976
															],
															"referencedDeclaration": 1976,
															"src": "12129:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12129:52:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1805,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1781,
														"src": "12185:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "12129:60:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1798,
												"id": 1807,
												"nodeType": "Return",
												"src": "12122:67:10"
											}
										]
									},
									"documentation": {
										"id": 1773,
										"nodeType": "StructuredDocumentation",
										"src": "11269:590:10",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1809,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "11873:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "11916:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "11899:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1774,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11899:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1775,
													"nodeType": "ArrayTypeName",
													"src": "11899:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1779,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "11945:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "11931:24:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1777,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "11931:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1778,
													"nodeType": "ArrayTypeName",
													"src": "11931:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "11973:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "11965:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1780,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11965:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "12004:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "11987:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1782,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11987:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1783,
													"nodeType": "ArrayTypeName",
													"src": "11987:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "12070:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "12020:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1793,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1789,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1786,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1793,
																"src": "12029:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1785,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12029:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1788,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1793,
																"src": "12038:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1787,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12038:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12028:18:10"
													},
													"returnParameterTypes": {
														"id": 1792,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1791,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1793,
																"src": "12061:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1790,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12061:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12060:9:10"
													},
													"src": "12020:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "11889:193:10"
									},
									"returnParameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1797,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "12106:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1796,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12106:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12105:6:10"
									},
									"scope": 2365,
									"src": "11864:332:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1975,
										"nodeType": "Block",
										"src": "13545:2083:10",
										"statements": [
											{
												"assignments": [
													1835
												],
												"declarations": [
													{
														"constant": false,
														"id": 1835,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "13937:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "13929:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1834,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13929:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1838,
												"initialValue": {
													"expression": {
														"id": 1836,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1819,
														"src": "13949:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "13956:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13949:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13929:33:10"
											},
											{
												"assignments": [
													1840
												],
												"declarations": [
													{
														"constant": false,
														"id": 1840,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "13980:13:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "13972:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1839,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13972:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1843,
												"initialValue": {
													"expression": {
														"id": 1841,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1816,
														"src": "13996:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "14007:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13996:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13972:41:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1847,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1844,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1835,
															"src": "14061:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1845,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1813,
																"src": "14073:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14079:6:10",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "14073:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "14061:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1850,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1848,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1840,
															"src": "14089:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1849,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14105:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "14089:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14061:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1856,
												"nodeType": "IfStatement",
												"src": "14057:113:10",
												"trueBody": {
													"id": 1855,
													"nodeType": "Block",
													"src": "14108:62:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1852,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1300,
																	"src": "14129:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14129:30:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1854,
															"nodeType": "RevertStatement",
															"src": "14122:37:10"
														}
													]
												}
											},
											{
												"assignments": [
													1861
												],
												"declarations": [
													{
														"constant": false,
														"id": 1861,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "14431:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "14414:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1859,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14414:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1860,
															"nodeType": "ArrayTypeName",
															"src": "14414:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1867,
												"initialValue": {
													"arguments": [
														{
															"id": 1865,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1840,
															"src": "14454:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "14440:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1862,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14444:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1863,
															"nodeType": "ArrayTypeName",
															"src": "14444:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14440:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14414:54:10"
											},
											{
												"assignments": [
													1869
												],
												"declarations": [
													{
														"constant": false,
														"id": 1869,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "14486:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "14478:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1868,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14478:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1871,
												"initialValue": {
													"hexValue": "30",
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14496:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14478:19:10"
											},
											{
												"assignments": [
													1873
												],
												"declarations": [
													{
														"constant": false,
														"id": 1873,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "14515:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "14507:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1872,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14507:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1875,
												"initialValue": {
													"hexValue": "30",
													"id": 1874,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14525:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14507:19:10"
											},
											{
												"assignments": [
													1877
												],
												"declarations": [
													{
														"constant": false,
														"id": 1877,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "14544:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1975,
														"src": "14536:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1876,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14536:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1879,
												"initialValue": {
													"hexValue": "30",
													"id": 1878,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14555:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14536:20:10"
											},
											{
												"body": {
													"id": 1938,
													"nodeType": "Block",
													"src": "14976:289:10",
													"statements": [
														{
															"assignments": [
																1891
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1891,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "14998:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1938,
																	"src": "14990:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1890,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "14990:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1904,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1892,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1869,
																		"src": "15002:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1893,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1835,
																		"src": "15012:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15002:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1899,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1861,
																		"src": "15044:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1902,
																	"indexExpression": {
																		"id": 1901,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15051:9:10",
																		"subExpression": {
																			"id": 1900,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1873,
																			"src": "15051:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15044:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15002:59:10",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1895,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1819,
																		"src": "15024:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1898,
																	"indexExpression": {
																		"id": 1897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15031:9:10",
																		"subExpression": {
																			"id": 1896,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1869,
																			"src": "15031:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15024:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "14990:71:10"
														},
														{
															"assignments": [
																1906
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1906,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "15083:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1938,
																	"src": "15075:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1905,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "15075:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1928,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1907,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1816,
																		"src": "15087:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1909,
																	"indexExpression": {
																		"id": 1908,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1881,
																		"src": "15098:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15087:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1923,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1813,
																		"src": "15199:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1926,
																	"indexExpression": {
																		"id": 1925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15205:10:10",
																		"subExpression": {
																			"id": 1924,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1877,
																			"src": "15205:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15199:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15087:129:10",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1912,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1910,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1869,
																					"src": "15120:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1911,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1835,
																					"src": "15130:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15120:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1917,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1861,
																					"src": "15162:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1920,
																				"indexExpression": {
																					"id": 1919,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15169:9:10",
																					"subExpression": {
																						"id": 1918,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1873,
																						"src": "15169:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15162:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1921,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "15120:59:10",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1913,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1819,
																					"src": "15142:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1916,
																				"indexExpression": {
																					"id": 1915,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15149:9:10",
																					"subExpression": {
																						"id": 1914,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1869,
																						"src": "15149:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15142:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1922,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "15119:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "15075:141:10"
														},
														{
															"expression": {
																"id": 1936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1929,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1861,
																		"src": "15230:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1931,
																	"indexExpression": {
																		"id": 1930,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1881,
																		"src": "15237:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "15230:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1933,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1891,
																			"src": "15249:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1934,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1906,
																			"src": "15252:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1932,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1829,
																		"src": "15242:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15242:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "15230:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1937,
															"nodeType": "ExpressionStatement",
															"src": "15230:24:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1884,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1881,
														"src": "14952:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1885,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1840,
														"src": "14956:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14952:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1939,
												"initializationExpression": {
													"assignments": [
														1881
													],
													"declarations": [
														{
															"constant": false,
															"id": 1881,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "14945:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 1939,
															"src": "14937:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1880,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "14937:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1883,
													"initialValue": {
														"hexValue": "30",
														"id": 1882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14949:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14937:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14971:3:10",
														"subExpression": {
															"id": 1887,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1881,
															"src": "14971:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1889,
													"nodeType": "ExpressionStatement",
													"src": "14971:3:10"
												},
												"nodeType": "ForStatement",
												"src": "14932:333:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1940,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1840,
														"src": "15279:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1941,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15295:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15279:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1962,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1960,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1835,
															"src": "15520:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15532:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "15520:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1972,
														"nodeType": "Block",
														"src": "15582:40:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1968,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1813,
																		"src": "15603:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1970,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15609:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15603:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1833,
																"id": 1971,
																"nodeType": "Return",
																"src": "15596:15:10"
															}
														]
													},
													"id": 1973,
													"nodeType": "IfStatement",
													"src": "15516:106:10",
													"trueBody": {
														"id": 1967,
														"nodeType": "Block",
														"src": "15535:41:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1963,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1819,
																		"src": "15556:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1965,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1964,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15563:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15556:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1833,
																"id": 1966,
																"nodeType": "Return",
																"src": "15549:16:10"
															}
														]
													}
												},
												"id": 1974,
												"nodeType": "IfStatement",
												"src": "15275:347:10",
												"trueBody": {
													"id": 1959,
													"nodeType": "Block",
													"src": "15298:212:10",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1943,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1877,
																	"src": "15316:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1944,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1813,
																		"src": "15328:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1945,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15334:6:10",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "15328:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15316:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1951,
															"nodeType": "IfStatement",
															"src": "15312:100:10",
															"trueBody": {
																"id": 1950,
																"nodeType": "Block",
																"src": "15342:70:10",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1947,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1300,
																				"src": "15367:28:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15367:30:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1949,
																		"nodeType": "RevertStatement",
																		"src": "15360:37:10"
																	}
																]
															}
														},
														{
															"id": 1958,
															"nodeType": "UncheckedBlock",
															"src": "15425:75:10",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1952,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1861,
																			"src": "15460:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1956,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1955,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1953,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1840,
																				"src": "15467:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1954,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "15483:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "15467:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "15460:25:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1833,
																	"id": 1957,
																	"nodeType": "Return",
																	"src": "15453:32:10"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1810,
										"nodeType": "StructuredDocumentation",
										"src": "12202:1097:10",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1976,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "13313:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "13357:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1976,
												"src": "13340:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1811,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13340:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1812,
													"nodeType": "ArrayTypeName",
													"src": "13340:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1816,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "13386:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1976,
												"src": "13372:24:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1814,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13372:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1815,
													"nodeType": "ArrayTypeName",
													"src": "13372:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1819,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "13423:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1976,
												"src": "13406:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1817,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13406:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1818,
													"nodeType": "ArrayTypeName",
													"src": "13406:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1829,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "13489:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1976,
												"src": "13439:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1828,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1824,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1821,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1828,
																"src": "13448:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1820,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13448:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1823,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1828,
																"src": "13457:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1822,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13457:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13447:18:10"
													},
													"returnParameterTypes": {
														"id": 1827,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1826,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1828,
																"src": "13480:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1825,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13480:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13479:9:10"
													},
													"src": "13439:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "13330:171:10"
									},
									"returnParameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "13533:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1976,
												"src": "13525:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1831,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13525:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13524:20:10"
									},
									"scope": 2365,
									"src": "13304:2324:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2001,
										"nodeType": "Block",
										"src": "16436:84:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1994,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1980,
																"src": "16479:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1995,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1983,
																"src": "16486:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1996,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1988,
																"src": "16498:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1993,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																2160,
																2364
															],
															"referencedDeclaration": 2160,
															"src": "16453:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1997,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16453:52:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1998,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "16509:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "16453:60:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1992,
												"id": 2000,
												"nodeType": "Return",
												"src": "16446:67:10"
											}
										]
									},
									"documentation": {
										"id": 1977,
										"nodeType": "StructuredDocumentation",
										"src": "15634:603:10",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 2002,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "16251:24:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "16304:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "16285:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1978,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16285:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1979,
													"nodeType": "ArrayTypeName",
													"src": "16285:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1983,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "16335:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "16319:26:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1981,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "16319:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1982,
													"nodeType": "ArrayTypeName",
													"src": "16319:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "16363:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "16355:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1984,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16355:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "16394:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "16377:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1986,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16377:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1987,
													"nodeType": "ArrayTypeName",
													"src": "16377:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:131:10"
									},
									"returnParameters": {
										"id": 1992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1991,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "16430:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1990,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16430:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16429:6:10"
									},
									"scope": 2365,
									"src": "16242:278:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2159,
										"nodeType": "Block",
										"src": "17820:2104:10",
										"statements": [
											{
												"assignments": [
													2018
												],
												"declarations": [
													{
														"constant": false,
														"id": 2018,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "18212:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18204:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2017,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18204:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2021,
												"initialValue": {
													"expression": {
														"id": 2019,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2012,
														"src": "18224:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 2020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18231:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18224:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18204:33:10"
											},
											{
												"assignments": [
													2023
												],
												"declarations": [
													{
														"constant": false,
														"id": 2023,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "18255:13:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18247:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2022,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18247:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2026,
												"initialValue": {
													"expression": {
														"id": 2024,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2009,
														"src": "18271:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 2025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18282:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18271:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18247:41:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2030,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2027,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2018,
															"src": "18336:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 2028,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2006,
																"src": "18348:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 2029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18354:6:10",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "18348:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "18336:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2033,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2031,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2023,
															"src": "18364:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2032,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18380:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "18364:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18336:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2039,
												"nodeType": "IfStatement",
												"src": "18332:113:10",
												"trueBody": {
													"id": 2038,
													"nodeType": "Block",
													"src": "18383:62:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2035,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1300,
																	"src": "18404:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 2036,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18404:30:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2037,
															"nodeType": "RevertStatement",
															"src": "18397:37:10"
														}
													]
												}
											},
											{
												"assignments": [
													2044
												],
												"declarations": [
													{
														"constant": false,
														"id": 2044,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "18706:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18689:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 2042,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18689:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2043,
															"nodeType": "ArrayTypeName",
															"src": "18689:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2050,
												"initialValue": {
													"arguments": [
														{
															"id": 2048,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2023,
															"src": "18729:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2047,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "18715:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 2045,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18719:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2046,
															"nodeType": "ArrayTypeName",
															"src": "18719:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 2049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18715:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18689:54:10"
											},
											{
												"assignments": [
													2052
												],
												"declarations": [
													{
														"constant": false,
														"id": 2052,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "18761:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18753:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2051,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18753:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2054,
												"initialValue": {
													"hexValue": "30",
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18771:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18753:19:10"
											},
											{
												"assignments": [
													2056
												],
												"declarations": [
													{
														"constant": false,
														"id": 2056,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "18790:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18782:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2055,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18782:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2058,
												"initialValue": {
													"hexValue": "30",
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18800:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18782:19:10"
											},
											{
												"assignments": [
													2060
												],
												"declarations": [
													{
														"constant": false,
														"id": 2060,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "18819:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 2159,
														"src": "18811:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2059,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18811:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2062,
												"initialValue": {
													"hexValue": "30",
													"id": 2061,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18830:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18811:20:10"
											},
											{
												"body": {
													"id": 2122,
													"nodeType": "Block",
													"src": "19251:310:10",
													"statements": [
														{
															"assignments": [
																2074
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2074,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "19273:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2122,
																	"src": "19265:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2073,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19265:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2087,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2075,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2052,
																		"src": "19277:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 2076,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2018,
																		"src": "19287:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "19277:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 2082,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2044,
																		"src": "19319:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2085,
																	"indexExpression": {
																		"id": 2084,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19326:9:10",
																		"subExpression": {
																			"id": 2083,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2056,
																			"src": "19326:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19319:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 2086,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19277:59:10",
																"trueExpression": {
																	"baseExpression": {
																		"id": 2078,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2012,
																		"src": "19299:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2081,
																	"indexExpression": {
																		"id": 2080,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19306:9:10",
																		"subExpression": {
																			"id": 2079,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2052,
																			"src": "19306:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19299:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19265:71:10"
														},
														{
															"assignments": [
																2089
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2089,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "19358:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2122,
																	"src": "19350:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2088,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19350:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2111,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 2090,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2009,
																		"src": "19362:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 2092,
																	"indexExpression": {
																		"id": 2091,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2064,
																		"src": "19373:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19362:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 2106,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2006,
																		"src": "19474:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2109,
																	"indexExpression": {
																		"id": 2108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19480:10:10",
																		"subExpression": {
																			"id": 2107,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2060,
																			"src": "19480:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19474:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 2110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19362:129:10",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2095,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2093,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2052,
																					"src": "19395:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2094,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2018,
																					"src": "19405:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "19395:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 2100,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2044,
																					"src": "19437:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 2103,
																				"indexExpression": {
																					"id": 2102,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19444:9:10",
																					"subExpression": {
																						"id": 2101,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2056,
																						"src": "19444:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19437:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 2104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "19395:59:10",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 2096,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2012,
																					"src": "19417:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 2099,
																				"indexExpression": {
																					"id": 2098,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19424:9:10",
																					"subExpression": {
																						"id": 2097,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2052,
																						"src": "19424:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19417:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 2105,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "19394:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19350:141:10"
														},
														{
															"expression": {
																"id": 2120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2112,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2044,
																		"src": "19505:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2114,
																	"indexExpression": {
																		"id": 2113,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2064,
																		"src": "19512:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "19505:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2117,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2074,
																			"src": "19545:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 2118,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2089,
																			"src": "19548:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 2115,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "19517:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$1292_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 2116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "19524:20:10",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1279,
																		"src": "19517:27:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 2119,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "19517:33:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "19505:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2121,
															"nodeType": "ExpressionStatement",
															"src": "19505:45:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2067,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2064,
														"src": "19227:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2068,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2023,
														"src": "19231:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19227:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2123,
												"initializationExpression": {
													"assignments": [
														2064
													],
													"declarations": [
														{
															"constant": false,
															"id": 2064,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "19220:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 2123,
															"src": "19212:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2063,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "19212:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2066,
													"initialValue": {
														"hexValue": "30",
														"id": 2065,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19224:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "19212:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 2071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "19246:3:10",
														"subExpression": {
															"id": 2070,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2064,
															"src": "19246:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2072,
													"nodeType": "ExpressionStatement",
													"src": "19246:3:10"
												},
												"nodeType": "ForStatement",
												"src": "19207:354:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2124,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2023,
														"src": "19575:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2125,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19591:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19575:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2144,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2018,
															"src": "19816:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19828:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "19816:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2156,
														"nodeType": "Block",
														"src": "19878:40:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 2152,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2006,
																		"src": "19899:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2154,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 2153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19905:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19899:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 2016,
																"id": 2155,
																"nodeType": "Return",
																"src": "19892:15:10"
															}
														]
													},
													"id": 2157,
													"nodeType": "IfStatement",
													"src": "19812:106:10",
													"trueBody": {
														"id": 2151,
														"nodeType": "Block",
														"src": "19831:41:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 2147,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2012,
																		"src": "19852:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2149,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 2148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19859:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19852:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 2016,
																"id": 2150,
																"nodeType": "Return",
																"src": "19845:16:10"
															}
														]
													}
												},
												"id": 2158,
												"nodeType": "IfStatement",
												"src": "19571:347:10",
												"trueBody": {
													"id": 2143,
													"nodeType": "Block",
													"src": "19594:212:10",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2127,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2060,
																	"src": "19612:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 2128,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2006,
																		"src": "19624:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "19630:6:10",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "19624:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "19612:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2135,
															"nodeType": "IfStatement",
															"src": "19608:100:10",
															"trueBody": {
																"id": 2134,
																"nodeType": "Block",
																"src": "19638:70:10",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2131,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1300,
																				"src": "19663:28:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 2132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "19663:30:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2133,
																		"nodeType": "RevertStatement",
																		"src": "19656:37:10"
																	}
																]
															}
														},
														{
															"id": 2142,
															"nodeType": "UncheckedBlock",
															"src": "19721:75:10",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 2136,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2044,
																			"src": "19756:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 2140,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2139,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2137,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2023,
																				"src": "19763:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 2138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "19779:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "19763:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "19756:25:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 2016,
																	"id": 2141,
																	"nodeType": "Return",
																	"src": "19749:32:10"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2003,
										"nodeType": "StructuredDocumentation",
										"src": "16526:1102:10",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 2160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "17642:25:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "17696:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "17677:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2004,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17677:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2005,
													"nodeType": "ArrayTypeName",
													"src": "17677:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2009,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "17727:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "17711:26:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 2007,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "17711:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2008,
													"nodeType": "ArrayTypeName",
													"src": "17711:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "17764:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "17747:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2010,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17747:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2011,
													"nodeType": "ArrayTypeName",
													"src": "17747:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17667:109:10"
									},
									"returnParameters": {
										"id": 2016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "17808:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2160,
												"src": "17800:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2014,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17800:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17799:20:10"
									},
									"scope": 2365,
									"src": "17633:2291:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2196,
										"nodeType": "Block",
										"src": "20795:92:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 2194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2188,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2164,
																"src": "20838:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 2189,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2167,
																"src": "20845:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 2190,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2172,
																"src": "20857:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 2191,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2182,
																"src": "20865:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 2187,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																2160,
																2364
															],
															"referencedDeclaration": 2364,
															"src": "20812:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 2192,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20812:60:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 2193,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2169,
														"src": "20876:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "20812:68:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2186,
												"id": 2195,
												"nodeType": "Return",
												"src": "20805:75:10"
											}
										]
									},
									"documentation": {
										"id": 2161,
										"nodeType": "StructuredDocumentation",
										"src": "19930:600:10",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 2197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "20544:24:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2164,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "20597:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20578:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2162,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20578:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2163,
													"nodeType": "ArrayTypeName",
													"src": "20578:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2167,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "20628:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20612:26:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 2165,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "20612:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2166,
													"nodeType": "ArrayTypeName",
													"src": "20612:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2169,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "20656:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20648:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2168,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20648:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2172,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "20687:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20670:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2170,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20670:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2171,
													"nodeType": "ArrayTypeName",
													"src": "20670:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2182,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "20753:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20703:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 2181,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 2177,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 2174,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2181,
																"src": "20712:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2173,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20712:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 2176,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2181,
																"src": "20721:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2175,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20721:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20711:18:10"
													},
													"returnParameterTypes": {
														"id": 2180,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 2179,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2181,
																"src": "20744:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2178,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20744:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20743:9:10"
													},
													"src": "20703:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "20568:197:10"
									},
									"returnParameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "20789:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2184,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20789:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20788:6:10"
									},
									"scope": 2365,
									"src": "20535:352:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2363,
										"nodeType": "Block",
										"src": "22250:2083:10",
										"statements": [
											{
												"assignments": [
													2223
												],
												"declarations": [
													{
														"constant": false,
														"id": 2223,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "22642:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "22634:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2222,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22634:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2226,
												"initialValue": {
													"expression": {
														"id": 2224,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2207,
														"src": "22654:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 2225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22661:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22654:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22634:33:10"
											},
											{
												"assignments": [
													2228
												],
												"declarations": [
													{
														"constant": false,
														"id": 2228,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "22685:13:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "22677:21:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2227,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22677:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2231,
												"initialValue": {
													"expression": {
														"id": 2229,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2204,
														"src": "22701:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 2230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22712:6:10",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22701:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22677:41:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2235,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2232,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2223,
															"src": "22766:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 2233,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2201,
																"src": "22778:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 2234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "22784:6:10",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "22778:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "22766:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2238,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2236,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "22794:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "22810:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "22794:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "22766:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2244,
												"nodeType": "IfStatement",
												"src": "22762:113:10",
												"trueBody": {
													"id": 2243,
													"nodeType": "Block",
													"src": "22813:62:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2240,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1300,
																	"src": "22834:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 2241,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "22834:30:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2242,
															"nodeType": "RevertStatement",
															"src": "22827:37:10"
														}
													]
												}
											},
											{
												"assignments": [
													2249
												],
												"declarations": [
													{
														"constant": false,
														"id": 2249,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "23136:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "23119:23:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 2247,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23119:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2248,
															"nodeType": "ArrayTypeName",
															"src": "23119:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2255,
												"initialValue": {
													"arguments": [
														{
															"id": 2253,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2228,
															"src": "23159:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2252,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "23145:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 2250,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23149:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2251,
															"nodeType": "ArrayTypeName",
															"src": "23149:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 2254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23145:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23119:54:10"
											},
											{
												"assignments": [
													2257
												],
												"declarations": [
													{
														"constant": false,
														"id": 2257,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "23191:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "23183:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2256,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23183:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2259,
												"initialValue": {
													"hexValue": "30",
													"id": 2258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23201:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23183:19:10"
											},
											{
												"assignments": [
													2261
												],
												"declarations": [
													{
														"constant": false,
														"id": 2261,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "23220:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "23212:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2260,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23212:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2263,
												"initialValue": {
													"hexValue": "30",
													"id": 2262,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23230:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23212:19:10"
											},
											{
												"assignments": [
													2265
												],
												"declarations": [
													{
														"constant": false,
														"id": 2265,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "23249:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 2363,
														"src": "23241:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2264,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23241:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2267,
												"initialValue": {
													"hexValue": "30",
													"id": 2266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23260:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23241:20:10"
											},
											{
												"body": {
													"id": 2326,
													"nodeType": "Block",
													"src": "23681:289:10",
													"statements": [
														{
															"assignments": [
																2279
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2279,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "23703:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2326,
																	"src": "23695:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2278,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23695:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2292,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2280,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2257,
																		"src": "23707:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 2281,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2223,
																		"src": "23717:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "23707:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 2287,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2249,
																		"src": "23749:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2290,
																	"indexExpression": {
																		"id": 2289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23756:9:10",
																		"subExpression": {
																			"id": 2288,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2261,
																			"src": "23756:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23749:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 2291,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23707:59:10",
																"trueExpression": {
																	"baseExpression": {
																		"id": 2283,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2207,
																		"src": "23729:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2286,
																	"indexExpression": {
																		"id": 2285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23736:9:10",
																		"subExpression": {
																			"id": 2284,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2257,
																			"src": "23736:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23729:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23695:71:10"
														},
														{
															"assignments": [
																2294
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2294,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "23788:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2326,
																	"src": "23780:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2293,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23780:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2316,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 2295,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2204,
																		"src": "23792:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 2297,
																	"indexExpression": {
																		"id": 2296,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2269,
																		"src": "23803:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23792:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 2311,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2201,
																		"src": "23904:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2314,
																	"indexExpression": {
																		"id": 2313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23910:10:10",
																		"subExpression": {
																			"id": 2312,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "23910:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23904:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 2315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23792:129:10",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2300,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2298,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2257,
																					"src": "23825:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2299,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2223,
																					"src": "23835:9:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "23825:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 2305,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2249,
																					"src": "23867:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 2308,
																				"indexExpression": {
																					"id": 2307,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23874:9:10",
																					"subExpression": {
																						"id": 2306,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2261,
																						"src": "23874:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23867:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 2309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "23825:59:10",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 2301,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2207,
																					"src": "23847:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 2304,
																				"indexExpression": {
																					"id": 2303,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23854:9:10",
																					"subExpression": {
																						"id": 2302,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2257,
																						"src": "23854:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23847:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 2310,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "23824:61:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23780:141:10"
														},
														{
															"expression": {
																"id": 2324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2317,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2249,
																		"src": "23935:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2319,
																	"indexExpression": {
																		"id": 2318,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2269,
																		"src": "23942:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "23935:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 2321,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2279,
																			"src": "23954:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 2322,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2294,
																			"src": "23957:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 2320,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2217,
																		"src": "23947:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 2323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "23947:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "23935:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 2325,
															"nodeType": "ExpressionStatement",
															"src": "23935:24:10"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2272,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "23657:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2273,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2228,
														"src": "23661:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "23657:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2327,
												"initializationExpression": {
													"assignments": [
														2269
													],
													"declarations": [
														{
															"constant": false,
															"id": 2269,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "23650:1:10",
															"nodeType": "VariableDeclaration",
															"scope": 2327,
															"src": "23642:9:10",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2268,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "23642:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2271,
													"initialValue": {
														"hexValue": "30",
														"id": 2270,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23654:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "23642:13:10"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 2276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "23676:3:10",
														"subExpression": {
															"id": 2275,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2269,
															"src": "23676:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2277,
													"nodeType": "ExpressionStatement",
													"src": "23676:3:10"
												},
												"nodeType": "ForStatement",
												"src": "23637:333:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2328,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2228,
														"src": "23984:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2329,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "24000:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "23984:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2348,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2223,
															"src": "24225:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "24237:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "24225:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 2360,
														"nodeType": "Block",
														"src": "24287:40:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 2356,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2201,
																		"src": "24308:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2358,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 2357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24314:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24308:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 2221,
																"id": 2359,
																"nodeType": "Return",
																"src": "24301:15:10"
															}
														]
													},
													"id": 2361,
													"nodeType": "IfStatement",
													"src": "24221:106:10",
													"trueBody": {
														"id": 2355,
														"nodeType": "Block",
														"src": "24240:41:10",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 2351,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2207,
																		"src": "24261:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 2353,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 2352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24268:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24261:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 2221,
																"id": 2354,
																"nodeType": "Return",
																"src": "24254:16:10"
															}
														]
													}
												},
												"id": 2362,
												"nodeType": "IfStatement",
												"src": "23980:347:10",
												"trueBody": {
													"id": 2347,
													"nodeType": "Block",
													"src": "24003:212:10",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2334,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2331,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2265,
																	"src": "24021:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 2332,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2201,
																		"src": "24033:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 2333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "24039:6:10",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "24033:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "24021:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2339,
															"nodeType": "IfStatement",
															"src": "24017:100:10",
															"trueBody": {
																"id": 2338,
																"nodeType": "Block",
																"src": "24047:70:10",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2335,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1300,
																				"src": "24072:28:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 2336,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "24072:30:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2337,
																		"nodeType": "RevertStatement",
																		"src": "24065:37:10"
																	}
																]
															}
														},
														{
															"id": 2346,
															"nodeType": "UncheckedBlock",
															"src": "24130:75:10",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 2340,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2249,
																			"src": "24165:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 2344,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2341,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2228,
																				"src": "24172:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 2342,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "24188:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "24172:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "24165:25:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 2221,
																	"id": 2345,
																	"nodeType": "Return",
																	"src": "24158:32:10"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2198,
										"nodeType": "StructuredDocumentation",
										"src": "20893:1099:10",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 2364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "22006:25:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "22060:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "22041:24:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2199,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22041:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2200,
													"nodeType": "ArrayTypeName",
													"src": "22041:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "22091:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "22075:26:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 2202,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "22075:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2203,
													"nodeType": "ArrayTypeName",
													"src": "22075:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "22128:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "22111:23:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2205,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22111:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2206,
													"nodeType": "ArrayTypeName",
													"src": "22111:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2217,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "22194:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "22144:56:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 2216,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 2212,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 2209,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2216,
																"src": "22153:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2208,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22153:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 2211,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2216,
																"src": "22162:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2210,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22162:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22152:18:10"
													},
													"returnParameterTypes": {
														"id": 2215,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 2214,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 2216,
																"src": "22185:7:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2213,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22185:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22184:9:10"
													},
													"src": "22144:56:10",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "22031:175:10"
									},
									"returnParameters": {
										"id": 2221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2220,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "22238:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2364,
												"src": "22230:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22230:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22229:20:10"
									},
									"scope": 2365,
									"src": "21997:2336:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2366,
							"src": "1353:22982:10",
							"usedErrors": [
								1300
							],
							"usedEvents": []
						}
					],
					"src": "206:24130:10"
				},
				"id": 10
			},
			"src/ScholarshipDispenser.sol": {
				"ast": {
					"absolutePath": "src/ScholarshipDispenser.sol",
					"exportedSymbols": {
						"AggregatorV3Interface": [
							45
						],
						"MerkleProof": [
							2365
						],
						"OwnableUpgradeable": [
							240
						],
						"ScholarshipDispenser": [
							2686
						]
					},
					"id": 2687,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2367,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:11"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 2369,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2687,
							"sourceUnit": 241,
							"src": "64:101:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2368,
										"name": "OwnableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 240,
										"src": "72:18:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 2371,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2687,
							"sourceUnit": 2366,
							"src": "166:87:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2370,
										"name": "MerkleProof",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2365,
										"src": "174:11:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
							"file": "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
							"id": 2373,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2687,
							"sourceUnit": 46,
							"src": "254:112:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2372,
										"name": "AggregatorV3Interface",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 45,
										"src": "262:21:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2374,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"401:18:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 240,
										"src": "401:18:11"
									},
									"id": 2375,
									"nodeType": "InheritanceSpecifier",
									"src": "401:18:11"
								}
							],
							"canonicalName": "ScholarshipDispenser",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2686,
							"linearizedBaseContracts": [
								2686,
								240,
								554,
								508
							],
							"name": "ScholarshipDispenser",
							"nameLocation": "377:20:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "e65bf545",
									"id": 2377,
									"mutability": "mutable",
									"name": "usdStipendAmount",
									"nameLocation": "441:16:11",
									"nodeType": "VariableDeclaration",
									"scope": 2686,
									"src": "426:31:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2376,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "426:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "741bef1a",
									"id": 2380,
									"mutability": "mutable",
									"name": "priceFeed",
									"nameLocation": "526:9:11",
									"nodeType": "VariableDeclaration",
									"scope": 2686,
									"src": "497:38:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
										"typeString": "contract AggregatorV3Interface"
									},
									"typeName": {
										"id": 2379,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2378,
											"name": "AggregatorV3Interface",
											"nameLocations": [
												"497:21:11"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 45,
											"src": "497:21:11"
										},
										"referencedDeclaration": 45,
										"src": "497:21:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
											"typeString": "contract AggregatorV3Interface"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 2382,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "556:10:11",
									"nodeType": "VariableDeclaration",
									"scope": 2686,
									"src": "541:25:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2381,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "541:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "26317008",
									"id": 2386,
									"mutability": "mutable",
									"name": "claimedStipends",
									"nameLocation": "604:15:11",
									"nodeType": "VariableDeclaration",
									"scope": 2686,
									"src": "572:47:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 2385,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2383,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "580:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "572:24:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 2384,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "591:4:11",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a",
									"id": 2394,
									"name": "StipendClaimed",
									"nameLocation": "632:14:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2388,
												"indexed": true,
												"mutability": "mutable",
												"name": "student",
												"nameLocation": "672:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "656:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2390,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdAmount",
												"nameLocation": "697:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "689:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2392,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "724:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "716:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "716:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "646:93:11"
									},
									"src": "626:114:11"
								},
								{
									"anonymous": false,
									"eventSelector": "9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b842",
									"id": 2400,
									"name": "DirectorFundedStipendPayouts",
									"nameLocation": "751:28:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2396,
												"indexed": true,
												"mutability": "mutable",
												"name": "director",
												"nameLocation": "805:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "789:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "789:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2398,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "831:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2400,
												"src": "823:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "779:64:11"
									},
									"src": "745:99:11"
								},
								{
									"anonymous": false,
									"eventSelector": "7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5",
									"id": 2406,
									"name": "Withdrawn",
									"nameLocation": "855:9:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2402,
												"indexed": true,
												"mutability": "mutable",
												"name": "director",
												"nameLocation": "881:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "865:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2404,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "899:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "891:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2403,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:42:11"
									},
									"src": "849:58:11"
								},
								{
									"errorSelector": "3a78b358",
									"id": 2408,
									"name": "InvalidDirectorAddress",
									"nameLocation": "919:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "941:2:11"
									},
									"src": "913:31:11"
								},
								{
									"errorSelector": "e3588063",
									"id": 2410,
									"name": "InvalidPriceFeedAddress",
									"nameLocation": "955:23:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "978:2:11"
									},
									"src": "949:32:11"
								},
								{
									"errorSelector": "9dd854d3",
									"id": 2412,
									"name": "InvalidMerkleRoot",
									"nameLocation": "992:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1009:2:11"
									},
									"src": "986:26:11"
								},
								{
									"errorSelector": "0093f5a1",
									"id": 2414,
									"name": "StipendAlreadyClaimed",
									"nameLocation": "1023:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1044:2:11"
									},
									"src": "1017:30:11"
								},
								{
									"errorSelector": "b05e92fa",
									"id": 2416,
									"name": "InvalidMerkleProof",
									"nameLocation": "1058:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1076:2:11"
									},
									"src": "1052:27:11"
								},
								{
									"errorSelector": "439055cc",
									"id": 2418,
									"name": "StipendAmountMustBeGreaterThanZero",
									"nameLocation": "1090:34:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1124:2:11"
									},
									"src": "1084:43:11"
								},
								{
									"errorSelector": "96187bd5",
									"id": 2420,
									"name": "InvalidPriceFeedData",
									"nameLocation": "1138:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1158:2:11"
									},
									"src": "1132:29:11"
								},
								{
									"errorSelector": "786e0a99",
									"id": 2422,
									"name": "InsufficientContractBalance",
									"nameLocation": "1172:27:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1199:2:11"
									},
									"src": "1166:36:11"
								},
								{
									"errorSelector": "b12d13eb",
									"id": 2424,
									"name": "ETHTransferFailed",
									"nameLocation": "1213:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1230:2:11"
									},
									"src": "1207:26:11"
								},
								{
									"body": {
										"id": 2431,
										"nodeType": "Block",
										"src": "1306:39:11",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2428,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "1316:20:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1316:22:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2430,
												"nodeType": "ExpressionStatement",
												"src": "1316:22:11"
											}
										]
									},
									"documentation": {
										"id": 2425,
										"nodeType": "StructuredDocumentation",
										"src": "1239:48:11",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 2432,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1303:2:11"
									},
									"returnParameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1306:0:11"
									},
									"scope": 2686,
									"src": "1292:53:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2505,
										"nodeType": "Block",
										"src": "1567:460:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2447,
																"name": "_director",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2435,
																"src": "1585:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1606:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1598:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2448,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1598:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2451,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1598:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1585:23:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2453,
																"name": "InvalidDirectorAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2408,
																"src": "1610:22:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1610:24:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2446,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1577:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1577:58:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2456,
												"nodeType": "ExpressionStatement",
												"src": "1577:58:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2458,
																"name": "_usdStipendAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2437,
																"src": "1653:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1673:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1653:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2461,
																"name": "StipendAmountMustBeGreaterThanZero",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2418,
																"src": "1676:34:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1676:36:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2457,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1645:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1645:68:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2464,
												"nodeType": "ExpressionStatement",
												"src": "1645:68:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2466,
																"name": "_priceFeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2439,
																"src": "1731:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1753:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1745:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2467,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1745:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2470,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1745:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1731:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2472,
																"name": "InvalidPriceFeedAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2410,
																"src": "1757:23:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1757:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2465,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1723:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1723:60:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2475,
												"nodeType": "ExpressionStatement",
												"src": "1723:60:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2477,
																"name": "_merkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2441,
																"src": "1801:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1824:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1816:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2478,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1816:7:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1816:10:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "1801:25:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2483,
																"name": "InvalidMerkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2412,
																"src": "1828:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1828:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2476,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1793:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1793:55:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2486,
												"nodeType": "ExpressionStatement",
												"src": "1793:55:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2488,
															"name": "_director",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2435,
															"src": "1874:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2487,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "1859:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1859:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2490,
												"nodeType": "ExpressionStatement",
												"src": "1859:25:11"
											},
											{
												"expression": {
													"id": 2493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2491,
														"name": "usdStipendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2377,
														"src": "1895:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2492,
														"name": "_usdStipendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2437,
														"src": "1914:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1895:36:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2494,
												"nodeType": "ExpressionStatement",
												"src": "1895:36:11"
											},
											{
												"expression": {
													"id": 2499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2495,
														"name": "priceFeed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2380,
														"src": "1941:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
															"typeString": "contract AggregatorV3Interface"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2497,
																"name": "_priceFeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2439,
																"src": "1975:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2496,
															"name": "AggregatorV3Interface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1953:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$45_$",
																"typeString": "type(contract AggregatorV3Interface)"
															}
														},
														"id": 2498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1953:33:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
															"typeString": "contract AggregatorV3Interface"
														}
													},
													"src": "1941:45:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
														"typeString": "contract AggregatorV3Interface"
													}
												},
												"id": 2500,
												"nodeType": "ExpressionStatement",
												"src": "1941:45:11"
											},
											{
												"expression": {
													"id": 2503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2501,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2382,
														"src": "1996:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2502,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2441,
														"src": "2009:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1996:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2504,
												"nodeType": "ExpressionStatement",
												"src": "1996:24:11"
											}
										]
									},
									"documentation": {
										"id": 2433,
										"nodeType": "StructuredDocumentation",
										"src": "1351:47:11",
										"text": "@custom:oz-upgrades-validate-as-initializer"
									},
									"functionSelector": "5f761675",
									"id": 2506,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2444,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2443,
												"name": "initializer",
												"nameLocations": [
													"1555:11:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 348,
												"src": "1555:11:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "1555:11:11"
										}
									],
									"name": "initialize",
									"nameLocation": "1412:10:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2435,
												"mutability": "mutable",
												"name": "_director",
												"nameLocation": "1440:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "1432:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2437,
												"mutability": "mutable",
												"name": "_usdStipendAmount",
												"nameLocation": "1467:17:11",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "1459:25:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "_priceFeed",
												"nameLocation": "1502:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "1494:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1530:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "1522:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2440,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1422:125:11"
									},
									"returnParameters": {
										"id": 2445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1567:0:11"
									},
									"scope": 2686,
									"src": "1403:624:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2598,
										"nodeType": "Block",
										"src": "2303:949:11",
										"statements": [
											{
												"assignments": [
													2514
												],
												"declarations": [
													{
														"constant": false,
														"id": 2514,
														"mutability": "mutable",
														"name": "student",
														"nameLocation": "2321:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 2598,
														"src": "2313:15:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2513,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2313:7:11",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2517,
												"initialValue": {
													"expression": {
														"id": 2515,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2331:3:11",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2335:6:11",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "2331:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2313:28:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2359:25:11",
															"subExpression": {
																"baseExpression": {
																	"id": 2519,
																	"name": "claimedStipends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2386,
																	"src": "2360:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 2521,
																"indexExpression": {
																	"id": 2520,
																	"name": "student",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2514,
																	"src": "2376:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2360:24:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2523,
																"name": "StipendAlreadyClaimed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2414,
																"src": "2386:21:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2386:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2518,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2351:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2351:59:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2526,
												"nodeType": "ExpressionStatement",
												"src": "2351:59:11"
											},
											{
												"assignments": [
													2528
												],
												"declarations": [
													{
														"constant": false,
														"id": 2528,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "2429:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 2598,
														"src": "2421:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2527,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2421:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2536,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2532,
																	"name": "student",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2514,
																	"src": "2457:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2533,
																	"name": "usdStipendAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2377,
																	"src": "2466:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2530,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2446:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2531,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2450:6:11",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2446:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2446:37:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2529,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2436:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2436:48:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2421:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2540,
																	"name": "merkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2510,
																	"src": "2551:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	}
																},
																{
																	"id": 2541,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2382,
																	"src": "2580:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 2545,
																					"name": "leaf",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2528,
																					"src": "2635:4:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"expression": {
																					"id": 2543,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2618:3:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 2544,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "2622:12:11",
																				"memberName": "encodePacked",
																				"nodeType": "MemberAccess",
																				"src": "2618:16:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 2546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2618:22:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 2542,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "2608:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 2547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2608:33:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 2538,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2365,
																	"src": "2515:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$2365_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 2539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2527:6:11",
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1321,
																"src": "2515:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 2548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2515:140:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2549,
																"name": "InvalidMerkleProof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2416,
																"src": "2669:18:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2669:20:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2537,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2494:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2494:205:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2552,
												"nodeType": "ExpressionStatement",
												"src": "2494:205:11"
											},
											{
												"assignments": [
													2554
												],
												"declarations": [
													{
														"constant": false,
														"id": 2554,
														"mutability": "mutable",
														"name": "ethAmount",
														"nameLocation": "2718:9:11",
														"nodeType": "VariableDeclaration",
														"scope": 2598,
														"src": "2710:17:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2553,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2710:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2558,
												"initialValue": {
													"arguments": [
														{
															"id": 2556,
															"name": "usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2377,
															"src": "2746:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2555,
														"name": "convertUsdToEth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2636,
														"src": "2730:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 2557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2730:33:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2710:53:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2562,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2802:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ScholarshipDispenser_$2686",
																				"typeString": "contract ScholarshipDispenser"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ScholarshipDispenser_$2686",
																				"typeString": "contract ScholarshipDispenser"
																			}
																		],
																		"id": 2561,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2794:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2560,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2794:7:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2794:13:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2564,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2808:7:11",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2794:21:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2565,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2554,
																"src": "2819:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2794:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2567,
																"name": "InsufficientContractBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2422,
																"src": "2842:27:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2842:29:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2559,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2773:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2773:108:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2570,
												"nodeType": "ExpressionStatement",
												"src": "2773:108:11"
											},
											{
												"expression": {
													"id": 2575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2571,
															"name": "claimedStipends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2386,
															"src": "3035:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2573,
														"indexExpression": {
															"id": 2572,
															"name": "student",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2514,
															"src": "3051:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3035:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 2574,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3062:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3035:31:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2576,
												"nodeType": "ExpressionStatement",
												"src": "3035:31:11"
											},
											{
												"assignments": [
													2578,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2578,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3083:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 2598,
														"src": "3078:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2577,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3078:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2585,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2583,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3127:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2579,
																"name": "student",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2514,
																"src": "3096:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3104:4:11",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3096:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2582,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2581,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2554,
																"src": "3116:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3096:30:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3096:34:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3077:53:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2587,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2578,
															"src": "3148:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2588,
																"name": "ETHTransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2424,
																"src": "3157:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3157:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2586,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3140:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3140:37:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2591,
												"nodeType": "ExpressionStatement",
												"src": "3140:37:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2593,
															"name": "student",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2514,
															"src": "3208:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2594,
															"name": "usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2377,
															"src": "3217:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2595,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2554,
															"src": "3235:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2592,
														"name": "StipendClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2394,
														"src": "3193:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 2596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3193:52:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2597,
												"nodeType": "EmitStatement",
												"src": "3188:57:11"
											}
										]
									},
									"documentation": {
										"id": 2507,
										"nodeType": "StructuredDocumentation",
										"src": "2033:202:11",
										"text": " @notice This function allows students to claim their stipend if they are included in the Merkle tree\n @param merkleProof The Merkle proof that verifies the student's eligibility"
									},
									"functionSelector": "f32ae7dd",
									"id": 2599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimStipend",
									"nameLocation": "2249:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2510,
												"mutability": "mutable",
												"name": "merkleProof",
												"nameLocation": "2281:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "2262:30:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2508,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2262:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2509,
													"nodeType": "ArrayTypeName",
													"src": "2262:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:32:11"
									},
									"returnParameters": {
										"id": 2512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2303:0:11"
									},
									"scope": 2686,
									"src": "2240:1012:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2635,
										"nodeType": "Block",
										"src": "3355:263:11",
										"statements": [
											{
												"assignments": [
													null,
													2607,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 2607,
														"mutability": "mutable",
														"name": "price",
														"nameLocation": "3375:5:11",
														"nodeType": "VariableDeclaration",
														"scope": 2635,
														"src": "3368:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2606,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "3368:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 2611,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2608,
															"name": "priceFeed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2380,
															"src": "3390:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
																"typeString": "contract AggregatorV3Interface"
															}
														},
														"id": 2609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3400:15:11",
														"memberName": "latestRoundData",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 44,
														"src": "3390:25:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
															"typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
														}
													},
													"id": 2610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3390:27:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
														"typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3365:52:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 2615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2613,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2607,
																"src": "3435:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3443:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3435:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2616,
																"name": "InvalidPriceFeedData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2420,
																"src": "3446:20:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3446:22:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2612,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3427:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3427:42:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2619,
												"nodeType": "ExpressionStatement",
												"src": "3427:42:11"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "31",
																	"id": 2620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3555:7:11",
																	"subdenomination": "ether",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2625,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2621,
																				"name": "usdAmountInCents",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2601,
																				"src": "3566:16:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_rational_1000000_by_1",
																					"typeString": "int_const 1000000"
																				},
																				"id": 2624,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3130",
																					"id": 2622,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3585:2:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "**",
																				"rightExpression": {
																					"hexValue": "36",
																					"id": 2623,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3591:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_6_by_1",
																						"typeString": "int_const 6"
																					},
																					"value": "6"
																				},
																				"src": "3585:7:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000000_by_1",
																					"typeString": "int_const 1000000"
																				}
																			},
																			"src": "3566:26:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2626,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3565:28:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3555:38:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2628,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3554:40:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"arguments": [
															{
																"id": 2631,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2607,
																"src": "3605:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 2630,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3597:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2629,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3597:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 2632,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3597:14:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3554:57:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2605,
												"id": 2634,
												"nodeType": "Return",
												"src": "3547:64:11"
											}
										]
									},
									"id": 2636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertUsdToEth",
									"nameLocation": "3267:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2601,
												"mutability": "mutable",
												"name": "usdAmountInCents",
												"nameLocation": "3300:16:11",
												"nodeType": "VariableDeclaration",
												"scope": 2636,
												"src": "3292:24:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3292:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3282:40:11"
									},
									"returnParameters": {
										"id": 2605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2636,
												"src": "3346:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3346:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3345:9:11"
									},
									"scope": 2686,
									"src": "3258:360:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2648,
										"nodeType": "Block",
										"src": "3780:73:11",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2642,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3824:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3828:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3824:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2644,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3836:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3840:5:11",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "3836:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2641,
														"name": "DirectorFundedStipendPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2400,
														"src": "3795:28:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3795:51:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2647,
												"nodeType": "EmitStatement",
												"src": "3790:56:11"
											}
										]
									},
									"id": 2649,
									"implemented": true,
									"kind": "receive",
									"modifiers": [
										{
											"id": 2639,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2638,
												"name": "onlyOwner",
												"nameLocations": [
													"3770:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3770:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "3770:9:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3750:2:11"
									},
									"returnParameters": {
										"id": 2640,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3780:0:11"
									},
									"scope": 2686,
									"src": "3743:110:11",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2684,
										"nodeType": "Block",
										"src": "3953:237:11",
										"statements": [
											{
												"assignments": [
													2655
												],
												"declarations": [
													{
														"constant": false,
														"id": 2655,
														"mutability": "mutable",
														"name": "contractBalance",
														"nameLocation": "3971:15:11",
														"nodeType": "VariableDeclaration",
														"scope": 2684,
														"src": "3963:23:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2654,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3963:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2661,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 2658,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3997:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ScholarshipDispenser_$2686",
																	"typeString": "contract ScholarshipDispenser"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_ScholarshipDispenser_$2686",
																	"typeString": "contract ScholarshipDispenser"
																}
															],
															"id": 2657,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3989:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2656,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3989:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 2659,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3989:13:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4003:7:11",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3989:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3963:47:11"
											},
											{
												"assignments": [
													2663,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2663,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4026:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 2684,
														"src": "4021:12:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2662,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4021:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2671,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2669,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4079:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"expression": {
																	"id": 2664,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4039:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4043:6:11",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4039:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4050:4:11",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4039:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2668,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2667,
																"name": "contractBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2655,
																"src": "4062:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4039:39:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4039:43:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4020:62:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2673,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2663,
															"src": "4100:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2674,
																"name": "ETHTransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2424,
																"src": "4109:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4109:19:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2672,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4092:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4092:37:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2677,
												"nodeType": "ExpressionStatement",
												"src": "4092:37:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2679,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4155:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4159:6:11",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4155:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2681,
															"name": "contractBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2655,
															"src": "4167:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2678,
														"name": "Withdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2406,
														"src": "4145:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4145:38:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2683,
												"nodeType": "EmitStatement",
												"src": "4140:43:11"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 2685,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2652,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2651,
												"name": "onlyOwner",
												"nameLocations": [
													"3943:9:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3943:9:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "3943:9:11"
										}
									],
									"name": "withdraw",
									"nameLocation": "3923:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2650,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3931:2:11"
									},
									"returnParameters": {
										"id": 2653,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3953:0:11"
									},
									"scope": 2686,
									"src": "3914:276:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2687,
							"src": "368:3824:11",
							"usedErrors": [
								76,
								81,
								257,
								260,
								2408,
								2410,
								2412,
								2414,
								2416,
								2418,
								2420,
								2422,
								2424
							],
							"usedEvents": [
								87,
								265,
								2394,
								2400,
								2406
							]
						}
					],
					"src": "39:4154:11"
				},
				"id": 11
			},
			"src/ScholarshipFactory.sol": {
				"ast": {
					"absolutePath": "src/ScholarshipFactory.sol",
					"exportedSymbols": {
						"Clones": [
							1101
						],
						"Ownable": [
							702
						],
						"ScholarshipDispenser": [
							2686
						],
						"ScholarshipFactory": [
							2889
						]
					},
					"id": 2890,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2688,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:12"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Clones.sol",
							"file": "@openzeppelin/contracts/proxy/Clones.sol",
							"id": 2690,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2890,
							"sourceUnit": 1102,
							"src": "64:64:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2689,
										"name": "Clones",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1101,
										"src": "72:6:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 2692,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2890,
							"sourceUnit": 703,
							"src": "129:67:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2691,
										"name": "Ownable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 702,
										"src": "137:7:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/ScholarshipDispenser.sol",
							"file": "./ScholarshipDispenser.sol",
							"id": 2694,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2890,
							"sourceUnit": 2687,
							"src": "197:64:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2693,
										"name": "ScholarshipDispenser",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2686,
										"src": "205:20:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2695,
										"name": "Ownable",
										"nameLocations": [
											"294:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 702,
										"src": "294:7:12"
									},
									"id": 2696,
									"nodeType": "InheritanceSpecifier",
									"src": "294:7:12"
								}
							],
							"canonicalName": "ScholarshipFactory",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2889,
							"linearizedBaseContracts": [
								2889,
								702,
								1131
							],
							"name": "ScholarshipFactory",
							"nameLocation": "272:18:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2699,
									"libraryName": {
										"id": 2697,
										"name": "Clones",
										"nameLocations": [
											"314:6:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1101,
										"src": "314:6:12"
									},
									"nodeType": "UsingForDirective",
									"src": "308:25:12",
									"typeName": {
										"id": 2698,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "325:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "9c8d69c5",
									"id": 2701,
									"mutability": "immutable",
									"name": "dispenserImplementation",
									"nameLocation": "364:23:12",
									"nodeType": "VariableDeclaration",
									"scope": 2889,
									"src": "339:48:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2700,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "339:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "335b7fa2",
									"id": 2704,
									"mutability": "mutable",
									"name": "dispensers",
									"nameLocation": "410:10:12",
									"nodeType": "VariableDeclaration",
									"scope": 2889,
									"src": "393:27:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 2702,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "393:7:12",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 2703,
										"nodeType": "ArrayTypeName",
										"src": "393:9:12",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5af82abf",
									"id": 2706,
									"mutability": "mutable",
									"name": "director",
									"nameLocation": "441:8:12",
									"nodeType": "VariableDeclaration",
									"scope": 2889,
									"src": "426:23:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2705,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "426:7:12",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "a99c90577b80d735a56496629133b35ecc581a0e5d29b949147bbca7730e6d5a",
									"id": 2712,
									"name": "DispenserCreated",
									"nameLocation": "462:16:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2708,
												"indexed": true,
												"mutability": "mutable",
												"name": "dispenserAddress",
												"nameLocation": "504:16:12",
												"nodeType": "VariableDeclaration",
												"scope": 2712,
												"src": "488:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2707,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "488:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2710,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdStipendAmount",
												"nameLocation": "538:16:12",
												"nodeType": "VariableDeclaration",
												"scope": 2712,
												"src": "530:24:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "530:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "478:82:12"
									},
									"src": "456:105:12"
								},
								{
									"errorSelector": "c970156c",
									"id": 2714,
									"name": "InvalidImplementationAddress",
									"nameLocation": "573:28:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "601:2:12"
									},
									"src": "567:37:12"
								},
								{
									"errorSelector": "05bb467c",
									"id": 2716,
									"name": "InvalidAdminAddress",
									"nameLocation": "615:19:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2715,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "634:2:12"
									},
									"src": "609:28:12"
								},
								{
									"errorSelector": "e3588063",
									"id": 2718,
									"name": "InvalidPriceFeedAddress",
									"nameLocation": "648:23:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2717,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "671:2:12"
									},
									"src": "642:32:12"
								},
								{
									"errorSelector": "9dd854d3",
									"id": 2720,
									"name": "InvalidMerkleRoot",
									"nameLocation": "685:17:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "702:2:12"
									},
									"src": "679:26:12"
								},
								{
									"errorSelector": "439055cc",
									"id": 2722,
									"name": "StipendAmountMustBeGreaterThanZero",
									"nameLocation": "716:34:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "750:2:12"
									},
									"src": "710:43:12"
								},
								{
									"errorSelector": "3a78b358",
									"id": 2724,
									"name": "InvalidDirectorAddress",
									"nameLocation": "764:22:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "786:2:12"
									},
									"src": "758:31:12"
								},
								{
									"errorSelector": "b86f1a62",
									"id": 2726,
									"name": "OnlyDirectorCanCreateDispenser",
									"nameLocation": "800:30:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "830:2:12"
									},
									"src": "794:39:12"
								},
								{
									"body": {
										"id": 2779,
										"nodeType": "Block",
										"src": "966:351:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2739,
																"name": "_dispenserImplementation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2728,
																"src": "997:24:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2742,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1033:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2741,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1025:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2740,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1025:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2743,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1025:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "997:38:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2745,
																"name": "InvalidImplementationAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2714,
																"src": "1049:28:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2746,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1049:30:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2738,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "976:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "976:113:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2748,
												"nodeType": "ExpressionStatement",
												"src": "976:113:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2750,
																"name": "_admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2730,
																"src": "1107:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2753,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1125:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1117:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2751,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1117:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2754,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1117:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1107:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2756,
																"name": "InvalidAdminAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2716,
																"src": "1129:19:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1129:21:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2749,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1099:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1099:52:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2759,
												"nodeType": "ExpressionStatement",
												"src": "1099:52:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2761,
																"name": "_director",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2732,
																"src": "1169:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1190:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1182:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2762,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1182:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2765,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1182:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1169:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2767,
																"name": "InvalidDirectorAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2724,
																"src": "1194:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1194:24:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2760,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1161:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:58:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2770,
												"nodeType": "ExpressionStatement",
												"src": "1161:58:12"
											},
											{
												"expression": {
													"id": 2773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2771,
														"name": "dispenserImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2701,
														"src": "1230:23:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2772,
														"name": "_dispenserImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2728,
														"src": "1256:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1230:50:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2774,
												"nodeType": "ExpressionStatement",
												"src": "1230:50:12"
											},
											{
												"expression": {
													"id": 2777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2775,
														"name": "director",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2706,
														"src": "1290:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2776,
														"name": "_director",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2732,
														"src": "1301:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1290:20:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2778,
												"nodeType": "ExpressionStatement",
												"src": "1290:20:12"
											}
										]
									},
									"id": 2780,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2735,
													"name": "_admin",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2730,
													"src": "958:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 2736,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 2734,
												"name": "Ownable",
												"nameLocations": [
													"950:7:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 702,
												"src": "950:7:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "950:15:12"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2728,
												"mutability": "mutable",
												"name": "_dispenserImplementation",
												"nameLocation": "868:24:12",
												"nodeType": "VariableDeclaration",
												"scope": 2780,
												"src": "860:32:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2730,
												"mutability": "mutable",
												"name": "_admin",
												"nameLocation": "910:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2780,
												"src": "902:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "902:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2732,
												"mutability": "mutable",
												"name": "_director",
												"nameLocation": "934:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2780,
												"src": "926:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "850:99:12"
									},
									"returnParameters": {
										"id": 2737,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "966:0:12"
									},
									"scope": 2889,
									"src": "839:478:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2863,
										"nodeType": "Block",
										"src": "2288:681:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2793,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2306:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2310:6:12",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2306:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2795,
																"name": "director",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2706,
																"src": "2320:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2306:22:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2797,
																"name": "OnlyDirectorCanCreateDispenser",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2726,
																"src": "2330:30:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2330:32:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2792,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2298:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2298:65:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2800,
												"nodeType": "ExpressionStatement",
												"src": "2298:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2802,
																"name": "_usdStipendAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2785,
																"src": "2381:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2803,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2401:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2381:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2805,
																"name": "StipendAmountMustBeGreaterThanZero",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2722,
																"src": "2404:34:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2404:36:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2801,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2373:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2373:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2808,
												"nodeType": "ExpressionStatement",
												"src": "2373:68:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2810,
																"name": "_priceFeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2787,
																"src": "2459:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2813,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2481:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2812,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2473:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2811,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2473:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2814,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2473:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2459:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2816,
																"name": "InvalidPriceFeedAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2718,
																"src": "2485:23:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2485:25:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2809,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2451:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2451:60:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2819,
												"nodeType": "ExpressionStatement",
												"src": "2451:60:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2821,
																"name": "_merkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2783,
																"src": "2529:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2824,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2552:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2544:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2822,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2544:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2544:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "2529:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2827,
																"name": "InvalidMerkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2720,
																"src": "2556:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2828,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2556:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2820,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2521:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2521:55:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2830,
												"nodeType": "ExpressionStatement",
												"src": "2521:55:12"
											},
											{
												"assignments": [
													2832
												],
												"declarations": [
													{
														"constant": false,
														"id": 2832,
														"mutability": "mutable",
														"name": "dispenserClone",
														"nameLocation": "2595:14:12",
														"nodeType": "VariableDeclaration",
														"scope": 2863,
														"src": "2587:22:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2831,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2587:7:12",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2836,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2833,
															"name": "dispenserImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2701,
															"src": "2612:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2834,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2636:5:12",
														"memberName": "clone",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 725,
														"src": "2612:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_address_$attached_to$_t_address_$",
															"typeString": "function (address) returns (address)"
														}
													},
													"id": 2835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2612:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2587:56:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2844,
															"name": "director",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2706,
															"src": "2723:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2845,
															"name": "_usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2785,
															"src": "2745:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2846,
															"name": "_priceFeed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2787,
															"src": "2776:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2847,
															"name": "_merkleRoot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2783,
															"src": "2800:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2840,
																			"name": "dispenserClone",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2832,
																			"src": "2682:14:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2674:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_payable_$",
																			"typeString": "type(address payable)"
																		},
																		"typeName": {
																			"id": 2838,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2674:8:12",
																			"stateMutability": "payable",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2674:23:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 2837,
																"name": "ScholarshipDispenser",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2686,
																"src": "2653:20:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ScholarshipDispenser_$2686_$",
																	"typeString": "type(contract ScholarshipDispenser)"
																}
															},
															"id": 2842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2653:45:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ScholarshipDispenser_$2686",
																"typeString": "contract ScholarshipDispenser"
															}
														},
														"id": 2843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2699:10:12",
														"memberName": "initialize",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2506,
														"src": "2653:56:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bytes32_$returns$__$",
															"typeString": "function (address,uint256,address,bytes32) external"
														}
													},
													"id": 2848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2653:168:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2849,
												"nodeType": "ExpressionStatement",
												"src": "2653:168:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2853,
															"name": "dispenserClone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2832,
															"src": "2848:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 2850,
															"name": "dispensers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2704,
															"src": "2832:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2852,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2843:4:12",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2832:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 2854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2832:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2855,
												"nodeType": "ExpressionStatement",
												"src": "2832:31:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2857,
															"name": "dispenserClone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2832,
															"src": "2896:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2858,
															"name": "_usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2785,
															"src": "2912:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2856,
														"name": "DispenserCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2712,
														"src": "2879:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2879:51:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2860,
												"nodeType": "EmitStatement",
												"src": "2874:56:12"
											},
											{
												"expression": {
													"id": 2861,
													"name": "dispenserClone",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2832,
													"src": "2948:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2791,
												"id": 2862,
												"nodeType": "Return",
												"src": "2941:21:12"
											}
										]
									},
									"documentation": {
										"id": 2781,
										"nodeType": "StructuredDocumentation",
										"src": "1323:810:12",
										"text": " @notice Director creates a new ScholarshipDispenser clone with the specified parameters\n @param _merkleRoot The Merkle root for stipend eligibility verification\n @param _usdStipendAmount The stipend amount in USD cents (e.g., 1000 for $10.00)\n @param _priceFeed The address of the Chainlink price feed contract for USD to ETH conversion\n @return The address of the newly created Payroll clone\n @dev The Merkle root is used to verify if a student is eligible for the stipend\n @dev The Merkle root must be a valid bytes32 value\n @dev The stipend amount must be greater than zero\n @dev The price feed is used to convert the stipend amount from USD to ETH\n @dev Emits a DispenserCreated event upon successful creation of the dispenser"
									},
									"functionSelector": "d86f77fc",
									"id": 2864,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createDispenser",
									"nameLocation": "2147:15:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2783,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "2180:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 2864,
												"src": "2172:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2782,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2785,
												"mutability": "mutable",
												"name": "_usdStipendAmount",
												"nameLocation": "2209:17:12",
												"nodeType": "VariableDeclaration",
												"scope": 2864,
												"src": "2201:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2201:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2787,
												"mutability": "mutable",
												"name": "_priceFeed",
												"nameLocation": "2244:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2864,
												"src": "2236:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2786,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2236:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2162:98:12"
									},
									"returnParameters": {
										"id": 2791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2864,
												"src": "2279:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2279:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2278:9:12"
									},
									"scope": 2889,
									"src": "2138:831:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2887,
										"nodeType": "Block",
										"src": "3178:109:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2873,
																"name": "newDirector",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2867,
																"src": "3196:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2876,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3219:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3211:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2874,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3211:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 2877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3211:10:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3196:25:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2879,
																"name": "InvalidDirectorAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2724,
																"src": "3223:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3223:24:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2872,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3188:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3188:60:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2882,
												"nodeType": "ExpressionStatement",
												"src": "3188:60:12"
											},
											{
												"expression": {
													"id": 2885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2883,
														"name": "director",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2706,
														"src": "3258:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2884,
														"name": "newDirector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2867,
														"src": "3269:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3258:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2886,
												"nodeType": "ExpressionStatement",
												"src": "3258:22:12"
											}
										]
									},
									"documentation": {
										"id": 2865,
										"nodeType": "StructuredDocumentation",
										"src": "2975:134:12",
										"text": " @notice Only the admin can update the director address\n @param newDirector The new director address to be set"
									},
									"functionSelector": "1de933c7",
									"id": 2888,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2870,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2869,
												"name": "onlyOwner",
												"nameLocations": [
													"3168:9:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 613,
												"src": "3168:9:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "3168:9:12"
										}
									],
									"name": "updateDirector",
									"nameLocation": "3123:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2867,
												"mutability": "mutable",
												"name": "newDirector",
												"nameLocation": "3146:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 2888,
												"src": "3138:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3137:21:12"
									},
									"returnParameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3178:0:12"
									},
									"scope": 2889,
									"src": "3114:173:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2890,
							"src": "263:3026:12",
							"usedErrors": [
								568,
								573,
								1240,
								1246,
								2714,
								2716,
								2718,
								2720,
								2722,
								2724,
								2726
							],
							"usedEvents": [
								579,
								2712
							]
						}
					],
					"src": "39:3251:12"
				},
				"id": 12
			}
		}
	}
}