{
	"id": "e4833239a706a44b54a1bc03e2ab752b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/",
				"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
				"@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/"
			]
		},
		"sources": {
			"src/ScholarshipDispenser.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.28;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract ScholarshipDispenser is OwnableUpgradeable {\n    uint256 public usdStipendAmount; // in cents, e.g. 1000 for $10.00\n    AggregatorV3Interface public priceFeed;\n    bytes32 public merkleRoot;\n    mapping(address => bool) public claimedStipends;\n\n    event StipendClaimed(\n        address indexed student,\n        uint256 usdAmount,\n        uint256 ethAmount\n    );\n    event DirectorFundedStipendPayouts(\n        address indexed director,\n        uint256 amount\n    );\n    event Withdrawn(address indexed director, uint256 amount);\n\n    error InvalidDirectorAddress();\n    error InvalidPriceFeedAddress();\n    error InvalidMerkleRoot();\n    error StipendAlreadyClaimed();\n    error InvalidMerkleProof();\n    error StipendAmountMustBeGreaterThanZero();\n    error InvalidPriceFeedData();\n    error InsufficientContractBalance();\n    error ETHTransferFailed();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @custom:oz-upgrades-validate-as-initializer\n    function initialize(\n        address _director,\n        uint256 _usdStipendAmount,\n        address _priceFeed,\n        bytes32 _merkleRoot\n    ) public initializer {\n        require(_director != address(0), InvalidDirectorAddress());\n        require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero());\n        require(_priceFeed != address(0), InvalidPriceFeedAddress());\n        require(_merkleRoot != bytes32(0), InvalidMerkleRoot());\n\n        __Ownable_init(_director);\n\n        usdStipendAmount = _usdStipendAmount;\n        priceFeed = AggregatorV3Interface(_priceFeed);\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * @notice This function allows students to claim their stipend if they are included in the Merkle tree\n     * @param merkleProof The Merkle proof that verifies the student's eligibility\n     */\n    function claimStipend(bytes32[] calldata merkleProof) external {\n        address student = msg.sender;\n        require(!claimedStipends[student], StipendAlreadyClaimed());\n\n        bytes32 leaf = keccak256(abi.encode(student, usdStipendAmount));\n        require(\n            MerkleProof.verify(\n                merkleProof,\n                merkleRoot,\n                keccak256(abi.encodePacked(leaf))\n            ),\n            InvalidMerkleProof()\n        );\n\n        uint256 ethAmount = convertUsdToEth(usdStipendAmount);\n        require(\n            address(this).balance >= ethAmount,\n            InsufficientContractBalance()\n        );\n\n        // set the stipend as claimed before transferring funds\n        // to prevent re-entrancy attacks (Check-Effects-Interactions pattern)\n        claimedStipends[student] = true;\n\n        (bool success, ) = student.call{value: ethAmount}(\"\");\n        require(success, ETHTransferFailed());\n\n        emit StipendClaimed(student, usdStipendAmount, ethAmount);\n    }\n\n    function convertUsdToEth(\n        uint256 usdAmountInCents\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        require(price > 0, InvalidPriceFeedData());\n\n        // USD amount is in cents, price is in USD with 8 decimals\n        return (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price);\n    }\n\n    // director can send ETH to this contract to fund the stipend payouts\n    // director is the owner of the contract\n    receive() external payable onlyOwner {\n        emit DirectorFundedStipendPayouts(msg.sender, msg.value);\n    }\n\n    // director can withdraw contract leftover balance\n    function withdraw() external onlyOwner {\n        uint256 contractBalance = address(this).balance;\n        (bool success, ) = msg.sender.call{value: contractBalance}(\"\");\n        require(success, ETHTransferFailed());\n\n        emit Withdrawn(msg.sender, contractBalance);\n    }\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"AggregatorV3Interface": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "description",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint80",
									"name": "_roundId",
									"type": "uint80"
								}
							],
							"name": "getRoundData",
							"outputs": [
								{
									"internalType": "uint80",
									"name": "roundId",
									"type": "uint80"
								},
								{
									"internalType": "int256",
									"name": "answer",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "startedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "updatedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint80",
									"name": "answeredInRound",
									"type": "uint80"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "latestRoundData",
							"outputs": [
								{
									"internalType": "uint80",
									"name": "roundId",
									"type": "uint80"
								},
								{
									"internalType": "int256",
									"name": "answer",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "startedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "updatedAt",
									"type": "uint256"
								},
								{
									"internalType": "uint80",
									"name": "answeredInRound",
									"type": "uint80"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "version",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"description()": "7284e416",
							"getRoundData(uint80)": "9a6fc8f5",
							"latestRoundData()": "feaf968c",
							"version()": "54fd4d50"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":\"AggregatorV3Interface\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"Hashes": {
					"abi": [],
					"devdoc": {
						"details": "Library of standard hash functions. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 EXP PUSH19 0x6ACE466D15CAB7A33265F931BB2DB52E8D87A7 PUSH11 0x340F0596876E7590456473 PUSH16 0x6C634300081C00330000000000000000 ",
							"sourceMap": "221:811:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:811:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 EXP PUSH19 0x6ACE466D15CAB7A33265F931BB2DB52E8D87A7 PUSH11 0x340F0596876E7590456473 PUSH16 0x6C634300081C00330000000000000000 ",
							"sourceMap": "221:811:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"commutativeKeccak256(bytes32,bytes32)": "infinite",
								"efficientKeccak256(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d10a726ace466d15cab7a33265f931bb2db52e8d87a76a340f0596876e75904564736f6c634300081c0033",
									".code": [
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [
						{
							"inputs": [],
							"name": "MerkleProofInvalidMultiproof",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.",
						"errors": {
							"MerkleProofInvalidMultiproof()": [
								{
									"details": "The multiproof provided is not valid."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xE4 0xF9 INVALID 0xD0 SWAP4 0xB0 0xEA SWAP12 0xEA PREVRANDAO 0xA6 CALLDATALOAD 0xC EXP 0xD7 SWAP16 0xA5 0xF7 0xB2 0xCA 0xB0 GAS EQ BASEFEE 0xE1 CALLDATALOAD 0xF8 0xFC 0xCD SWAP15 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "1353:22982:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xE4 0xF9 INVALID 0xD0 SWAP4 0xB0 0xEA SWAP12 0xEA PREVRANDAO 0xA6 CALLDATALOAD 0xC EXP 0xD7 SWAP16 0xA5 0xF7 0xB2 0xCA 0xB0 GAS EQ BASEFEE 0xE1 CALLDATALOAD 0xF8 0xFC 0xCD SWAP15 RETURNDATACOPY PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
							"sourceMap": "1353:22982:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122053e4f9fed093b0ea9bea44a6350c0ad79fa5f7b2cab05a1448e135f8fccd9e3e64736f6c634300081c0033",
									".code": [
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/ScholarshipDispenser.sol": {
				"ScholarshipDispenser": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ETHTransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientContractBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidDirectorAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMerkleProof",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMerkleRoot",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPriceFeedAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPriceFeedData",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StipendAlreadyClaimed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "StipendAmountMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "director",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "DirectorFundedStipendPayouts",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "student",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "usdAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "ethAmount",
									"type": "uint256"
								}
							],
							"name": "StipendClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "director",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32[]",
									"name": "merkleProof",
									"type": "bytes32[]"
								}
							],
							"name": "claimStipend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "claimedStipends",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_director",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_usdStipendAmount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_priceFeed",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "priceFeed",
							"outputs": [
								{
									"internalType": "contract AggregatorV3Interface",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "usdStipendAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"claimStipend(bytes32[])": {
								"params": {
									"merkleProof": "The Merkle proof that verifies the student's eligibility"
								}
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"initialize(address,uint256,address,bytes32)": {
								"custom:oz-upgrades-validate-as-initializer": ""
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"src/ScholarshipDispenser.sol\":1292:1345  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n    /* \"src/ScholarshipDispenser.sol\":1316:1338  _disableInitializers() */\n  tag_4\n    /* \"src/ScholarshipDispenser.sol\":1316:1336  _disableInitializers */\n  tag_5\n    /* \"src/ScholarshipDispenser.sol\":1316:1338  _disableInitializers() */\n  jump\t// in\ntag_4:\n    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  jump(tag_18)\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7709:8131  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":3147:3213  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00 */\n  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7898:7913  $._initializing */\n  dup1\n  sload\n  0x010000000000000000\n  swap1\n  div\n  0xff\n  and\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7894:7970  if ($._initializing) {... */\n  iszero\n  tag_10\n  jumpi\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7936:7959  InvalidInitialization() */\n  mload(0x40)\n  shl(0xe0, 0xf92ee8a9)\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7894:7970  if ($._initializing) {... */\ntag_10:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7983:7997  $._initialized */\n  dup1\n  sload\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  and\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7983:8017  $._initialized != type(uint64).max */\n  eq\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7979:8125  if ($._initialized != type(uint64).max) {... */\n  tag_11\n  jumpi\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8033:8066  $._initialized = type(uint64).max */\n  dup1\n  sload\n  not(sub(shl(0x40, 0x01), 0x01))\n  and\n  sub(shl(0x40, 0x01), 0x01)\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  mload(0x40)\n    /* \"#utility.yul\":158:208   */\n  swap1\n  dup2\n  mstore\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n  swap1\n    /* \"#utility.yul\":146:148   */\n  0x20\n    /* \"#utility.yul\":131:149   */\n  add\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8085:8114  Initialized(type(uint64).max) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7979:8125  if ($._initialized != type(uint64).max) {... */\ntag_11:\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7758:8131  {... */\n  pop\n    /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7709:8131  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"#utility.yul\":14:214   */\ntag_18:\n    /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x741bef1a\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x741bef1a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xe65bf545\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xf32ae7dd\n      eq\n      tag_12\n      jumpi\n      revert(0x00, 0x00)\n    tag_13:\n      dup1\n      0x26317008\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x5f761675\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_7\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_16\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_16:\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      mload(0x40)\n        /* \"src/ScholarshipDispenser.sol\":3836:3845  msg.value */\n      callvalue\n        /* \"#utility.yul\":160:185   */\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":3824:3834  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      0x9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b842\n      swap1\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":3795:3846  DirectorFundedStipendPayouts(msg.sender, msg.value) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":368:4192  contract ScholarshipDispenser is OwnableUpgradeable {... */\n      stop\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"src/ScholarshipDispenser.sol\":572:619  mapping(address => bool) public claimedStipends */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_21\n      jumpi\n      revert(0x00, 0x00)\n    tag_21:\n      pop\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_22:\n      mload(0x40)\n        /* \"#utility.yul\":730:744   */\n      swap1\n      iszero\n        /* \"#utility.yul\":723:745   */\n      iszero\n        /* \"#utility.yul\":705:746   */\n      dup2\n      mstore\n        /* \"#utility.yul\":693:695   */\n      0x20\n        /* \"#utility.yul\":678:696   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":572:619  mapping(address => bool) public claimedStipends */\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/ScholarshipDispenser.sol\":541:566  bytes32 public merkleRoot */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_28\n      jumpi\n      revert(0x00, 0x00)\n    tag_28:\n      pop\n      tag_29\n      sload(0x02)\n      dup2\n      jump\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":541:566  bytes32 public merkleRoot */\n      tag_26\n        /* \"#utility.yul\":14:191   */\n      jump\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      revert(0x00, 0x00)\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      stop\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      revert(0x00, 0x00)\n    tag_36:\n      pop\n      tag_34\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_41\n      jumpi\n      revert(0x00, 0x00)\n    tag_41:\n      pop\n      tag_34\n      tag_43\n      jump\t// in\n        /* \"src/ScholarshipDispenser.sol\":497:535  AggregatorV3Interface public priceFeed */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_44\n      jumpi\n      revert(0x00, 0x00)\n    tag_44:\n      pop\n      sload(0x01)\n      tag_45\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_45:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1533:1565   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1515:1566   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1503:1505   */\n      0x20\n        /* \"#utility.yul\":1488:1506   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":497:535  AggregatorV3Interface public priceFeed */\n      tag_26\n        /* \"#utility.yul\":1341:1572   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      revert(0x00, 0x00)\n    tag_49:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      jump(tag_45)\n        /* \"src/ScholarshipDispenser.sol\":426:457  uint256 public usdStipendAmount */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_54\n      jumpi\n      revert(0x00, 0x00)\n    tag_54:\n      pop\n      tag_29\n      sload(0x00)\n      dup2\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      revert(0x00, 0x00)\n    tag_58:\n      pop\n      tag_34\n      tag_60\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_60:\n      tag_61\n      jump\t// in\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      revert(0x00, 0x00)\n    tag_62:\n      pop\n      tag_34\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      tag_66\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_17:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      tag_70\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      and\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_71\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1515:1566   */\n      mstore\n        /* \"#utility.yul\":1488:1506   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n    tag_71:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n    tag_35:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_75\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_75:\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      mload(0x40)\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      selfbalance\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      0x00\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":4039:4049  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      dup4\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      dup4\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3963:3986  uint256 contractBalance */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3989:4010  address(this).balance */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":4039:4049  msg.sender */\n      dup8\n        /* \"src/ScholarshipDispenser.sol\":4039:4082  msg.sender.call{value: contractBalance}(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_81\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_80)\n    tag_81:\n      0x60\n      swap2\n      pop\n    tag_80:\n      pop\n        /* \"src/ScholarshipDispenser.sol\":4020:4082  (bool success, ) = msg.sender.call{value: contractBalance}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":4100:4107  success */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":4092:4129  require(success, ETHTransferFailed()) */\n      tag_82\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xb12d13eb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_82:\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      dup3\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":4155:4165  msg.sender */\n      caller\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5\n      swap1\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":4145:4183  Withdrawn(msg.sender, contractBalance) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":3953:4190  {... */\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3914:4190  function withdraw() external onlyOwner {... */\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n    tag_40:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_85\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_86\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_85:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      dup1\n      sload\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0xff\n      shl(0x40, 0x01)\n      dup3\n      div\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0xffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4740  initialized == 0 */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_87\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4744:4758  isTopLevelCall */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n    tag_87:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4704:4758  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4768:4785  bool construction */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4799  initialized */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      0xffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4803:4804  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_88\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4816:4820  this */\n      address\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4833  address(this).code.length */\n      extcodesize\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4838  address(this).code.length == 0 */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n    tag_88:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4768:4838  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4854:4866  initialSetup */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4866  !initialSetup */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_89\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4871:4883  construction */\n      dup1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4870:4883  !construction */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n    tag_89:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      mload(0x40)\n      shl(0xe0, 0xf92ee8a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n    tag_90:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      dup5\n      sload\n      not(0xffffffffffffffff)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4966:4967  1 */\n      0x01\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      or\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_91\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5011:5033  $._initializing = true */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      shl(0x40, 0x01)\n      or\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n    tag_91:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":1585:1608  _director != address(0) */\n      dup10\n      and\n        /* \"src/ScholarshipDispenser.sol\":1577:1635  require(_director != address(0), InvalidDirectorAddress()) */\n      tag_93\n      jumpi\n      mload(0x40)\n      shl(0xe3, 0x074f166b)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_93:\n        /* \"src/ScholarshipDispenser.sol\":1673:1674  0 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":1653:1670  _usdStipendAmount */\n      dup9\n        /* \"src/ScholarshipDispenser.sol\":1653:1674  _usdStipendAmount > 0 */\n      gt\n        /* \"src/ScholarshipDispenser.sol\":1645:1713  require(_usdStipendAmount > 0, StipendAmountMustBeGreaterThanZero()) */\n      tag_94\n      jumpi\n      mload(0x40)\n      shl(0xe2, 0x10e41573)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":1731:1755  _priceFeed != address(0) */\n      dup8\n      and\n        /* \"src/ScholarshipDispenser.sol\":1723:1783  require(_priceFeed != address(0), InvalidPriceFeedAddress()) */\n      tag_95\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xe3588063)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_95:\n        /* \"src/ScholarshipDispenser.sol\":1801:1812  _merkleRoot */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":1793:1848  require(_merkleRoot != bytes32(0), InvalidMerkleRoot()) */\n      tag_96\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x9dd854d3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_96:\n        /* \"src/ScholarshipDispenser.sol\":1859:1884  __Ownable_init(_director) */\n      tag_97\n        /* \"src/ScholarshipDispenser.sol\":1874:1883  _director */\n      dup10\n        /* \"src/ScholarshipDispenser.sol\":1859:1873  __Ownable_init */\n      tag_98\n        /* \"src/ScholarshipDispenser.sol\":1859:1884  __Ownable_init(_director) */\n      jump\t// in\n    tag_97:\n        /* \"src/ScholarshipDispenser.sol\":1895:1911  usdStipendAmount */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":1895:1931  usdStipendAmount = _usdStipendAmount */\n      dup9\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":1941:1950  priceFeed */\n      0x01\n        /* \"src/ScholarshipDispenser.sol\":1941:1986  priceFeed = AggregatorV3Interface(_priceFeed) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup10\n      and\n      or\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":1996:2006  merkleRoot */\n      0x02\n        /* \"src/ScholarshipDispenser.sol\":1996:2020  merkleRoot = _merkleRoot */\n      dup7\n      swap1\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_99\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5098:5121  $._initializing = false */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      dup6\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":2763:2813   */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n      swap1\n        /* \"#utility.yul\":2751:2753   */\n      0x20\n        /* \"#utility.yul\":2736:2754   */\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n    tag_99:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4092:5171  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":1403:2027  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_43:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_103\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_103:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      tag_71\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3246:3247  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3237  _transferOwnership */\n      tag_106\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_61:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_111\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_17\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_113\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3562:3563  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1515:1566   */\n      mstore\n        /* \"#utility.yul\":1488:1506   */\n      0x24\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      tag_73\n        /* \"#utility.yul\":1341:1572   */\n      jump\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_113:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      tag_115\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3604:3612  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3603  _transferOwnership */\n      tag_106\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_115:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n    tag_66:\n        /* \"src/ScholarshipDispenser.sol\":2331:2341  msg.sender */\n      caller\n        /* \"src/ScholarshipDispenser.sol\":2313:2328  address student */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2360:2384  claimedStipends[student] */\n      dup2\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2360:2375  claimedStipends */\n      0x03\n        /* \"src/ScholarshipDispenser.sol\":2360:2384  claimedStipends[student] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"src/ScholarshipDispenser.sol\":2359:2384  !claimedStipends[student] */\n      iszero\n        /* \"src/ScholarshipDispenser.sol\":2351:2410  require(!claimedStipends[student], StipendAlreadyClaimed()) */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x93f5a1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_117:\n        /* \"src/ScholarshipDispenser.sol\":2421:2433  bytes32 leaf */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2466:2482  usdStipendAmount */\n      dup1\n      sload\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3016:3048   */\n      dup6\n      and\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":2998:3049   */\n      mstore\n        /* \"#utility.yul\":3065:3083   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":3058:3092   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2971:2989   */\n      0x60\n      add\n        /* \"src/ScholarshipDispenser.sol\":2446:2483  abi.encode(student, usdStipendAmount) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2436:2484  keccak256(abi.encode(student, usdStipendAmount)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":2421:2484  bytes32 leaf = keccak256(abi.encode(student, usdStipendAmount)) */\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      tag_120\n        /* \"src/ScholarshipDispenser.sol\":2551:2562  merkleProof */\n      dup5\n      dup5\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2580:2590  merkleRoot */\n      sload(0x02)\n        /* \"src/ScholarshipDispenser.sol\":2618:2640  abi.encodePacked(leaf) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":3232:3251   */\n      dup9\n      swap1\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2580:2590  merkleRoot */\n      swap2\n      swap4\n      pop\n        /* \"#utility.yul\":3267:3279   */\n      add\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2618:2640  abi.encodePacked(leaf) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":2608:2641  keccak256(abi.encodePacked(leaf)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":2515:2533  MerkleProof.verify */\n      tag_123\n        /* \"src/ScholarshipDispenser.sol\":2515:2655  MerkleProof.verify(... */\n      jump\t// in\n    tag_120:\n        /* \"src/ScholarshipDispenser.sol\":2494:2699  require(... */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe1, 0x582f497d)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"src/ScholarshipDispenser.sol\":2710:2727  uint256 ethAmount */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":2730:2763  convertUsdToEth(usdStipendAmount) */\n      tag_125\n        /* \"src/ScholarshipDispenser.sol\":2746:2762  usdStipendAmount */\n      sload(0x00)\n        /* \"src/ScholarshipDispenser.sol\":2730:2745  convertUsdToEth */\n      tag_126\n        /* \"src/ScholarshipDispenser.sol\":2730:2763  convertUsdToEth(usdStipendAmount) */\n      jump\t// in\n    tag_125:\n        /* \"src/ScholarshipDispenser.sol\":2710:2763  uint256 ethAmount = convertUsdToEth(usdStipendAmount) */\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2819:2828  ethAmount */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":2794:2815  address(this).balance */\n      selfbalance\n        /* \"src/ScholarshipDispenser.sol\":2794:2828  address(this).balance >= ethAmount */\n      lt\n      iszero\n        /* \"src/ScholarshipDispenser.sol\":2773:2881  require(... */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x786e0a99)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/ScholarshipDispenser.sol\":3035:3050  claimedStipends */\n      0x03\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"src/ScholarshipDispenser.sol\":3035:3066  claimedStipends[student] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"src/ScholarshipDispenser.sol\":3062:3066  true */\n      0x01\n        /* \"src/ScholarshipDispenser.sol\":3035:3066  claimedStipends[student] = true */\n      or\n      swap1\n      sstore\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      mload\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      swap1\n      swap2\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3116:3125  ethAmount */\n      dup4\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup4\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3116:3125  ethAmount */\n      dup6\n        /* \"src/ScholarshipDispenser.sol\":3035:3059  claimedStipends[student] */\n      dup8\n        /* \"src/ScholarshipDispenser.sol\":3096:3130  student.call{value: ethAmount}(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_131\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_130)\n    tag_131:\n      0x60\n      swap2\n      pop\n    tag_130:\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3077:3130  (bool success, ) = student.call{value: ethAmount}(\"\") */\n      pop\n      swap1\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3148:3155  success */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":3140:3177  require(success, ETHTransferFailed()) */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0xb12d13eb)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"src/ScholarshipDispenser.sol\":3217:3233  usdStipendAmount */\n      sload(0x00)\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":3464:3489   */\n      swap2\n      dup3\n      mstore\n        /* \"#utility.yul\":3520:3522   */\n      0x20\n        /* \"#utility.yul\":3505:3523   */\n      dup3\n      add\n        /* \"#utility.yul\":3498:3532   */\n      dup5\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      dup7\n      and\n      swap2\n      0x4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a\n      swap2\n        /* \"#utility.yul\":3437:3455   */\n      add\n        /* \"src/ScholarshipDispenser.sol\":3193:3245  StipendClaimed(student, usdStipendAmount, ethAmount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/ScholarshipDispenser.sol\":2303:3252  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":2240:3252  function claimStipend(bytes32[] calldata merkleProof) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9071:9276  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_86:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9129:9159  InitializableStorage storage $ */\n      0x00\n      dup1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":3147:3213  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00 */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9186:9213  _initializableStorageSlot() */\n    tag_137:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9171:9213  bytes32 slot = _initializableStorageSlot() */\n      swap3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":9071:9276  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_98:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_140\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_141\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n    tag_140:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      tag_115\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1954:1966  initialOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1953  __Ownable_init_unchained */\n      tag_144\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_106:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3941:3960  $._owner = newOwner */\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      swap2\n      dup3\n      or\n      dup5\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      swap3\n      and\n      swap2\n      dup3\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3847:3871  OwnableStorage storage $ */\n      0x00\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3837:4022  {... */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n    tag_123:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1993:1997  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2045:2049  root */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      tag_149\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2029:2034  proof */\n      dup6\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2036:2040  leaf */\n      dup5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2028  processProof */\n      tag_150\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2041  processProof(proof, leaf) */\n      jump\t// in\n    tag_149:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2049  processProof(proof, leaf) == root */\n      eq\n      swap5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1902:2056  function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/ScholarshipDispenser.sol\":3258:3618  function convertUsdToEth(... */\n    tag_126:\n        /* \"src/ScholarshipDispenser.sol\":3346:3353  uint256 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3368:3380  int256 price */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3390:3399  priceFeed */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/ScholarshipDispenser.sol\":3390:3415  priceFeed.latestRoundData */\n      and\n      0xfeaf968c\n        /* \"src/ScholarshipDispenser.sol\":3390:3417  priceFeed.latestRoundData() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xa0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_153:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_154\n      swap2\n      swap1\n      tag_155\n      jump\t// in\n    tag_154:\n        /* \"src/ScholarshipDispenser.sol\":3365:3417  (, int256 price, , , ) = priceFeed.latestRoundData() */\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"src/ScholarshipDispenser.sol\":3443:3444  0 */\n      0x00\n        /* \"src/ScholarshipDispenser.sol\":3435:3440  price */\n      dup2\n        /* \"src/ScholarshipDispenser.sol\":3435:3444  price > 0 */\n      sgt\n        /* \"src/ScholarshipDispenser.sol\":3427:3469  require(price > 0, InvalidPriceFeedData()) */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe0, 0x96187bd5)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_156:\n        /* \"src/ScholarshipDispenser.sol\":3605:3610  price */\n      dup1\n        /* \"src/ScholarshipDispenser.sol\":3566:3592  usdAmountInCents * 10 ** 6 */\n      tag_157\n        /* \"src/ScholarshipDispenser.sol\":3566:3582  usdAmountInCents */\n      dup5\n        /* \"src/ScholarshipDispenser.sol\":3585:3592  10 ** 6 */\n      0x0f4240\n        /* \"src/ScholarshipDispenser.sol\":3566:3592  usdAmountInCents * 10 ** 6 */\n      tag_158\n      jump\t// in\n    tag_157:\n        /* \"src/ScholarshipDispenser.sol\":3555:3593  1 ether * (usdAmountInCents * 10 ** 6) */\n      tag_159\n      swap1\n        /* \"src/ScholarshipDispenser.sol\":3555:3562  1 ether */\n      0x0de0b6b3a7640000\n        /* \"src/ScholarshipDispenser.sol\":3555:3593  1 ether * (usdAmountInCents * 10 ** 6) */\n      tag_158\n      jump\t// in\n    tag_159:\n        /* \"src/ScholarshipDispenser.sol\":3554:3611  (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price) */\n      tag_160\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"src/ScholarshipDispenser.sol\":3547:3611  return (1 ether * (usdAmountInCents * 10 ** 6)) / uint256(price) */\n      swap4\n        /* \"src/ScholarshipDispenser.sol\":3258:3618  function convertUsdToEth(... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7082:7223  function _checkInitializing() internal view virtual {... */\n    tag_141:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      tag_164\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7164  _isInitializing */\n      tag_165\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      jump\t// in\n    tag_164:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7144:7217  if (!_isInitializing()) {... */\n      tag_71\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7189:7206  NotInitializing() */\n      mload(0x40)\n      shl(0xe3, 0x1afcd79f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_144:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_111\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_141\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n    tag_150:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2540:2547  bytes32 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2582:2586  leaf */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2540:2547  bytes32 */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n    tag_174:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2620:2625  proof */\n      dup5\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2620:2632  proof.length */\n      mload\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2617  i */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2632  i < proof.length */\n      lt\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      iszero\n      tag_175\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      tag_177\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2696:2708  computedHash */\n      dup3\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2710:2715  proof */\n      dup7\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2716:2717  i */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2710:2718  proof[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_179\n      jumpi\n      tag_179\n      tag_180\n      jump\t// in\n    tag_179:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2695  Hashes.commutativeKeccak256 */\n      tag_181\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2668:2719  Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      jump\t// in\n    tag_177:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2653:2719  computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]) */\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2634:2637  i++ */\n      0x01\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      jump(tag_174)\n    tag_175:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2746:2758  computedHash */\n      swap4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2457:2765  function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n    tag_165:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8535:8539  bool */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      tag_183\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8582  _getInitializableStorage */\n      tag_86\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      jump\t// in\n    tag_183:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8558:8598  _getInitializableStorage()._initializing */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xff\n      and\n      swap2\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n    tag_181:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":579:586  bytes32 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":609:610  b */\n      dup2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:606  a */\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:610  a < b */\n      lt\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      tag_185\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":864:877  bytes32 value */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":928:943  mstore(0x00, a) */\n      dup3\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":963:967  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":956:971  mstore(0x20, b) */\n      dup5\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":1009:1013  0x40 */\n      0x40\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":993:1014  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      jump(tag_160)\n    tag_185:\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":864:877  bytes32 value */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":928:943  mstore(0x00, a) */\n      swap2\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":963:967  0x20 */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":956:971  mstore(0x20, b) */\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":1009:1013  0x40 */\n      0x40\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":993:1014  keccak256(0x00, 0x40) */\n      swap1\n      keccak256\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":504:671  function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {... */\n      jump\t// out\n        /* \"#utility.yul\":196:369   */\n    tag_191:\n        /* \"#utility.yul\":264:284   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":313:344   */\n      dup2\n      and\n        /* \"#utility.yul\":303:345   */\n      dup2\n      eq\n        /* \"#utility.yul\":293:363   */\n      tag_196\n      jumpi\n        /* \"#utility.yul\":359:360   */\n      0x00\n        /* \"#utility.yul\":356:357   */\n      0x00\n        /* \"#utility.yul\":349:361   */\n      revert\n        /* \"#utility.yul\":293:363   */\n    tag_196:\n        /* \"#utility.yul\":196:369   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":374:560   */\n    tag_24:\n        /* \"#utility.yul\":433:439   */\n      0x00\n        /* \"#utility.yul\":486:488   */\n      0x20\n        /* \"#utility.yul\":474:483   */\n      dup3\n        /* \"#utility.yul\":465:472   */\n      dup5\n        /* \"#utility.yul\":461:484   */\n      sub\n        /* \"#utility.yul\":457:489   */\n      slt\n        /* \"#utility.yul\":454:506   */\n      iszero\n      tag_198\n      jumpi\n        /* \"#utility.yul\":502:503   */\n      0x00\n        /* \"#utility.yul\":499:500   */\n      0x00\n        /* \"#utility.yul\":492:504   */\n      revert\n        /* \"#utility.yul\":454:506   */\n    tag_198:\n        /* \"#utility.yul\":525:554   */\n      tag_160\n        /* \"#utility.yul\":544:553   */\n      dup3\n        /* \"#utility.yul\":525:554   */\n      tag_191\n      jump\t// in\n        /* \"#utility.yul\":939:1336   */\n    tag_39:\n        /* \"#utility.yul\":1025:1031   */\n      0x00\n        /* \"#utility.yul\":1033:1039   */\n      0x00\n        /* \"#utility.yul\":1041:1047   */\n      0x00\n        /* \"#utility.yul\":1049:1055   */\n      0x00\n        /* \"#utility.yul\":1102:1105   */\n      0x80\n        /* \"#utility.yul\":1090:1099   */\n      dup6\n        /* \"#utility.yul\":1081:1088   */\n      dup8\n        /* \"#utility.yul\":1077:1100   */\n      sub\n        /* \"#utility.yul\":1073:1106   */\n      slt\n        /* \"#utility.yul\":1070:1123   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":1119:1120   */\n      0x00\n        /* \"#utility.yul\":1116:1117   */\n      0x00\n        /* \"#utility.yul\":1109:1121   */\n      revert\n        /* \"#utility.yul\":1070:1123   */\n    tag_203:\n        /* \"#utility.yul\":1142:1171   */\n      tag_204\n        /* \"#utility.yul\":1161:1170   */\n      dup6\n        /* \"#utility.yul\":1142:1171   */\n      tag_191\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":1132:1171   */\n      swap4\n      pop\n        /* \"#utility.yul\":1218:1220   */\n      0x20\n        /* \"#utility.yul\":1207:1216   */\n      dup6\n        /* \"#utility.yul\":1203:1221   */\n      add\n        /* \"#utility.yul\":1190:1222   */\n      calldataload\n        /* \"#utility.yul\":1180:1222   */\n      swap3\n      pop\n        /* \"#utility.yul\":1241:1279   */\n      tag_205\n        /* \"#utility.yul\":1275:1277   */\n      0x40\n        /* \"#utility.yul\":1264:1273   */\n      dup7\n        /* \"#utility.yul\":1260:1278   */\n      add\n        /* \"#utility.yul\":1241:1279   */\n      tag_191\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":939:1336   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n        /* \"#utility.yul\":1231:1279   */\n      swap3\n      swap4\n        /* \"#utility.yul\":1326:1328   */\n      0x60\n        /* \"#utility.yul\":1311:1329   */\n      add\n        /* \"#utility.yul\":1298:1330   */\n      calldataload\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":939:1336   */\n      jump\t// out\n        /* \"#utility.yul\":1785:2395   */\n    tag_65:\n        /* \"#utility.yul\":1871:1877   */\n      0x00\n        /* \"#utility.yul\":1879:1885   */\n      0x00\n        /* \"#utility.yul\":1932:1934   */\n      0x20\n        /* \"#utility.yul\":1920:1929   */\n      dup4\n        /* \"#utility.yul\":1911:1918   */\n      dup6\n        /* \"#utility.yul\":1907:1930   */\n      sub\n        /* \"#utility.yul\":1903:1935   */\n      slt\n        /* \"#utility.yul\":1900:1952   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":1948:1949   */\n      0x00\n        /* \"#utility.yul\":1945:1946   */\n      0x00\n        /* \"#utility.yul\":1938:1950   */\n      revert\n        /* \"#utility.yul\":1900:1952   */\n    tag_209:\n        /* \"#utility.yul\":1988:1997   */\n      dup3\n        /* \"#utility.yul\":1975:1998   */\n      calldataload\n        /* \"#utility.yul\":2021:2039   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2013:2019   */\n      dup2\n        /* \"#utility.yul\":2010:2040   */\n      gt\n        /* \"#utility.yul\":2007:2057   */\n      iszero\n      tag_210\n      jumpi\n        /* \"#utility.yul\":2053:2054   */\n      0x00\n        /* \"#utility.yul\":2050:2051   */\n      0x00\n        /* \"#utility.yul\":2043:2055   */\n      revert\n        /* \"#utility.yul\":2007:2057   */\n    tag_210:\n        /* \"#utility.yul\":2076:2098   */\n      dup4\n      add\n        /* \"#utility.yul\":2129:2133   */\n      0x1f\n        /* \"#utility.yul\":2121:2134   */\n      dup2\n      add\n        /* \"#utility.yul\":2117:2144   */\n      dup6\n      sgt\n        /* \"#utility.yul\":2107:2162   */\n      tag_211\n      jumpi\n        /* \"#utility.yul\":2158:2159   */\n      0x00\n        /* \"#utility.yul\":2155:2156   */\n      0x00\n        /* \"#utility.yul\":2148:2160   */\n      revert\n        /* \"#utility.yul\":2107:2162   */\n    tag_211:\n        /* \"#utility.yul\":2198:2200   */\n      dup1\n        /* \"#utility.yul\":2185:2201   */\n      calldataload\n        /* \"#utility.yul\":2224:2242   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2216:2222   */\n      dup2\n        /* \"#utility.yul\":2213:2243   */\n      gt\n        /* \"#utility.yul\":2210:2260   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":2256:2257   */\n      0x00\n        /* \"#utility.yul\":2253:2254   */\n      0x00\n        /* \"#utility.yul\":2246:2258   */\n      revert\n        /* \"#utility.yul\":2210:2260   */\n    tag_212:\n        /* \"#utility.yul\":2309:2316   */\n      dup6\n        /* \"#utility.yul\":2304:2306   */\n      0x20\n        /* \"#utility.yul\":2294:2300   */\n      dup3\n        /* \"#utility.yul\":2291:2292   */\n      0x05\n        /* \"#utility.yul\":2287:2301   */\n      shl\n        /* \"#utility.yul\":2283:2285   */\n      dup5\n        /* \"#utility.yul\":2279:2302   */\n      add\n        /* \"#utility.yul\":2275:2307   */\n      add\n        /* \"#utility.yul\":2272:2317   */\n      gt\n        /* \"#utility.yul\":2269:2334   */\n      iszero\n      tag_213\n      jumpi\n        /* \"#utility.yul\":2330:2331   */\n      0x00\n        /* \"#utility.yul\":2327:2328   */\n      0x00\n        /* \"#utility.yul\":2320:2332   */\n      revert\n        /* \"#utility.yul\":2269:2334   */\n    tag_213:\n        /* \"#utility.yul\":2361:2363   */\n      0x20\n        /* \"#utility.yul\":2353:2364   */\n      swap2\n      swap1\n      swap2\n      add\n      swap6\n        /* \"#utility.yul\":2383:2389   */\n      swap1\n      swap5\n      pop\n        /* \"#utility.yul\":1785:2395   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3543:3722   */\n    tag_192:\n        /* \"#utility.yul\":3621:3634   */\n      dup1\n      mload\n        /* \"#utility.yul\":3674:3696   */\n      0xffffffffffffffffffff\n        /* \"#utility.yul\":3663:3697   */\n      dup2\n      and\n        /* \"#utility.yul\":3653:3698   */\n      dup2\n      eq\n        /* \"#utility.yul\":3643:3716   */\n      tag_196\n      jumpi\n        /* \"#utility.yul\":3712:3713   */\n      0x00\n        /* \"#utility.yul\":3709:3710   */\n      0x00\n        /* \"#utility.yul\":3702:3714   */\n      revert\n        /* \"#utility.yul\":3727:4298   */\n    tag_155:\n        /* \"#utility.yul\":3830:3836   */\n      0x00\n        /* \"#utility.yul\":3838:3844   */\n      0x00\n        /* \"#utility.yul\":3846:3852   */\n      0x00\n        /* \"#utility.yul\":3854:3860   */\n      0x00\n        /* \"#utility.yul\":3862:3868   */\n      0x00\n        /* \"#utility.yul\":3915:3918   */\n      0xa0\n        /* \"#utility.yul\":3903:3912   */\n      dup7\n        /* \"#utility.yul\":3894:3901   */\n      dup9\n        /* \"#utility.yul\":3890:3913   */\n      sub\n        /* \"#utility.yul\":3886:3919   */\n      slt\n        /* \"#utility.yul\":3883:3936   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":3932:3933   */\n      0x00\n        /* \"#utility.yul\":3929:3930   */\n      0x00\n        /* \"#utility.yul\":3922:3934   */\n      revert\n        /* \"#utility.yul\":3883:3936   */\n    tag_222:\n        /* \"#utility.yul\":3955:3994   */\n      tag_223\n        /* \"#utility.yul\":3984:3993   */\n      dup7\n        /* \"#utility.yul\":3955:3994   */\n      tag_192\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":4034:4036   */\n      0x20\n        /* \"#utility.yul\":4019:4037   */\n      dup8\n      add\n        /* \"#utility.yul\":4013:4038   */\n      mload\n        /* \"#utility.yul\":4100:4102   */\n      0x40\n        /* \"#utility.yul\":4085:4103   */\n      dup9\n      add\n        /* \"#utility.yul\":4079:4104   */\n      mload\n        /* \"#utility.yul\":4194:4196   */\n      0x60\n        /* \"#utility.yul\":4179:4197   */\n      dup10\n      add\n        /* \"#utility.yul\":4173:4198   */\n      mload\n        /* \"#utility.yul\":3945:3994   */\n      swap3\n      swap8\n      pop\n        /* \"#utility.yul\":4013:4038   */\n      swap1\n      swap6\n      pop\n        /* \"#utility.yul\":4079:4104   */\n      swap4\n      pop\n        /* \"#utility.yul\":4173:4198   */\n      swap2\n      pop\n        /* \"#utility.yul\":4243:4292   */\n      tag_224\n        /* \"#utility.yul\":4287:4290   */\n      0x80\n        /* \"#utility.yul\":4272:4291   */\n      dup8\n      add\n        /* \"#utility.yul\":4243:4292   */\n      tag_192\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":4233:4292   */\n      swap1\n      pop\n        /* \"#utility.yul\":3727:4298   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4303:4568   */\n    tag_158:\n        /* \"#utility.yul\":4376:4385   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":4407:4416   */\n      dup2\n      iszero\n        /* \"#utility.yul\":4424:4439   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":4418:4440   */\n      dup5\n      eq\n        /* \"#utility.yul\":4404:4441   */\n      or\n        /* \"#utility.yul\":4394:4562   */\n      tag_137\n      jumpi\n        /* \"#utility.yul\":4484:4494   */\n      0x4e487b71\n        /* \"#utility.yul\":4479:4482   */\n      0xe0\n        /* \"#utility.yul\":4475:4495   */\n      shl\n        /* \"#utility.yul\":4472:4473   */\n      0x00\n        /* \"#utility.yul\":4465:4496   */\n      mstore\n        /* \"#utility.yul\":4519:4523   */\n      0x11\n        /* \"#utility.yul\":4516:4517   */\n      0x04\n        /* \"#utility.yul\":4509:4524   */\n      mstore\n        /* \"#utility.yul\":4547:4551   */\n      0x24\n        /* \"#utility.yul\":4544:4545   */\n      0x00\n        /* \"#utility.yul\":4537:4552   */\n      revert\n        /* \"#utility.yul\":4573:4790   */\n    tag_161:\n        /* \"#utility.yul\":4613:4614   */\n      0x00\n        /* \"#utility.yul\":4639:4640   */\n      dup3\n        /* \"#utility.yul\":4629:4761   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":4683:4693   */\n      0x4e487b71\n        /* \"#utility.yul\":4678:4681   */\n      0xe0\n        /* \"#utility.yul\":4674:4694   */\n      shl\n        /* \"#utility.yul\":4671:4672   */\n      0x00\n        /* \"#utility.yul\":4664:4695   */\n      mstore\n        /* \"#utility.yul\":4718:4722   */\n      0x12\n        /* \"#utility.yul\":4715:4716   */\n      0x04\n        /* \"#utility.yul\":4708:4723   */\n      mstore\n        /* \"#utility.yul\":4746:4750   */\n      0x24\n        /* \"#utility.yul\":4743:4744   */\n      0x00\n        /* \"#utility.yul\":4736:4751   */\n      revert\n        /* \"#utility.yul\":4629:4761   */\n    tag_228:\n      pop\n        /* \"#utility.yul\":4775:4784   */\n      div\n      swap1\n        /* \"#utility.yul\":4573:4790   */\n      jump\t// out\n        /* \"#utility.yul\":4795:4922   */\n    tag_180:\n        /* \"#utility.yul\":4856:4866   */\n      0x4e487b71\n        /* \"#utility.yul\":4851:4854   */\n      0xe0\n        /* \"#utility.yul\":4847:4867   */\n      shl\n        /* \"#utility.yul\":4844:4845   */\n      0x00\n        /* \"#utility.yul\":4837:4868   */\n      mstore\n        /* \"#utility.yul\":4887:4891   */\n      0x32\n        /* \"#utility.yul\":4884:4885   */\n      0x04\n        /* \"#utility.yul\":4877:4892   */\n      mstore\n        /* \"#utility.yul\":4911:4915   */\n      0x24\n        /* \"#utility.yul\":4908:4909   */\n      0x00\n        /* \"#utility.yul\":4901:4916   */\n      revert\n\n    auxdata: 0xa26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1734": {
									"entryPoint": null,
									"id": 1734,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_462": {
									"entryPoint": 25,
									"id": 462,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_507": {
									"entryPoint": null,
									"id": 507,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initializableStorageSlot_493": {
									"entryPoint": null,
									"id": 493,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:216:7",
										"nodeType": "YulBlock",
										"src": "0:216:7",
										"statements": [
											{
												"nativeSrc": "6:3:7",
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "113:101:7",
													"nodeType": "YulBlock",
													"src": "113:101:7",
													"statements": [
														{
															"nativeSrc": "123:26:7",
															"nodeType": "YulAssignment",
															"src": "123:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "135:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "135:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "146:2:7",
																		"nodeType": "YulLiteral",
																		"src": "146:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "131:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "131:3:7"
																},
																"nativeSrc": "131:18:7",
																"nodeType": "YulFunctionCall",
																"src": "131:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "123:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "123:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "165:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "165:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "180:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "180:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "196:2:7",
																								"nodeType": "YulLiteral",
																								"src": "196:2:7",
																								"type": "",
																								"value": "64"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "200:1:7",
																								"nodeType": "YulLiteral",
																								"src": "200:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "192:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "192:3:7"
																						},
																						"nativeSrc": "192:10:7",
																						"nodeType": "YulFunctionCall",
																						"src": "192:10:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "204:1:7",
																						"nodeType": "YulLiteral",
																						"src": "204:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "188:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "188:3:7"
																				},
																				"nativeSrc": "188:18:7",
																				"nodeType": "YulFunctionCall",
																				"src": "188:18:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "176:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "176:3:7"
																		},
																		"nativeSrc": "176:31:7",
																		"nodeType": "YulFunctionCall",
																		"src": "176:31:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "158:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "158:6:7"
																},
																"nativeSrc": "158:50:7",
																"nodeType": "YulFunctionCall",
																"src": "158:50:7"
															},
															"nativeSrc": "158:50:7",
															"nodeType": "YulExpressionStatement",
															"src": "158:50:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nativeSrc": "14:200:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "82:9:7",
														"nodeType": "YulTypedName",
														"src": "82:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "93:6:7",
														"nodeType": "YulTypedName",
														"src": "93:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "104:4:7",
														"nodeType": "YulTypedName",
														"src": "104:4:7",
														"type": ""
													}
												],
												"src": "14:200:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b5060156019565b60c9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161560685760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b039081161460c65780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b610b52806100d65f395ff3fe608060405260043610610092575f3560e01c8063741bef1a11610057578063741bef1a146101895780638da5cb5b146101c0578063e65bf545146101fc578063f2fde38b14610210578063f32ae7dd1461022f575f5ffd5b806326317008146100da5780632eb4a7ab1461011d5780633ccfd60b146101405780635f76167514610156578063715018a614610175575f5ffd5b366100d65761009f61024e565b60405134815233907f9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b8429060200160405180910390a2005b5f5ffd5b3480156100e5575f5ffd5b506101086100f4366004610994565b60036020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610128575f5ffd5b5061013260025481565b604051908152602001610114565b34801561014b575f5ffd5b506101546102b0565b005b348015610161575f5ffd5b506101546101703660046109ad565b610359565b348015610180575f5ffd5b50610154610505565b348015610194575f5ffd5b506001546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610114565b3480156101cb575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101a8565b348015610207575f5ffd5b506101325f5481565b34801561021b575f5ffd5b5061015461022a366004610994565b610516565b34801561023a575f5ffd5b506101546102493660046109ee565b610553565b336102807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102ae5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b6102b861024e565b60405147905f90339083908381818185875af1925050503d805f81146102f9576040519150601f19603f3d011682016040523d82523d5f602084013e6102fe565b606091505b50509050806103205760405163b12d13eb60e01b815260040160405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b5f61036261073b565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103895750825b90505f8267ffffffffffffffff1660011480156103a55750303b155b9050811580156103b3575080155b156103d15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103fb57845460ff60401b1916600160401b1785555b6001600160a01b0389166104225760405163074f166b60e31b815260040160405180910390fd5b5f8811610442576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0387166104695760405163e358806360e01b815260040160405180910390fd5b8561048757604051639dd854d360e01b815260040160405180910390fd5b61049089610765565b5f889055600180546001600160a01b0319166001600160a01b038916179055600286905583156104fa57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61050d61024e565b6102ae5f610776565b61051e61024e565b6001600160a01b03811661054757604051631e4fbdf760e01b81525f60048201526024016102a5565b61055081610776565b50565b335f8181526003602052604090205460ff1615610582576040516293f5a160e01b815260040160405180910390fd5b5f8054604080516001600160a01b03851660208201529081019190915260600160405160208183030381529060405280519060200120905061061c8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002546040805160208101889052919350019050604051602081830303815290604052805190602001206107e6565b6106395760405163582f497d60e11b815260040160405180910390fd5b5f6106445f546107fb565b9050804710156106675760405163786e0a9960e01b815260040160405180910390fd5b6001600160a01b0383165f81815260036020526040808220805460ff191660011790555190919083908381818185875af1925050503d805f81146106c6576040519150601f19603f3d011682016040523d82523d5f602084013e6106cb565b606091505b50509050806106ed5760405163b12d13eb60e01b815260040160405180910390fd5b5f5460408051918252602082018490526001600160a01b038616917f4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a910160405180910390a2505050505050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b61076d6108c8565b610550816108ed565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f826107f285846108f5565b14949350505050565b5f5f60015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561084d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108719190610a78565b5050509150505f8113610897576040516396187bd560e01b815260040160405180910390fd5b806108a584620f4240610ac6565b6108b790670de0b6b3a7640000610ac6565b6108c19190610ae9565b9392505050565b6108d0610937565b6102ae57604051631afcd79f60e31b815260040160405180910390fd5b61051e6108c8565b5f81815b845181101561092f576109258286838151811061091857610918610b08565b6020026020010151610950565b91506001016108f9565b509392505050565b5f61094061073b565b54600160401b900460ff16919050565b5f81831061096a575f8281526020849052604090206108c1565b505f9182526020526040902090565b80356001600160a01b038116811461098f575f5ffd5b919050565b5f602082840312156109a4575f5ffd5b6108c182610979565b5f5f5f5f608085870312156109c0575f5ffd5b6109c985610979565b9350602085013592506109de60408601610979565b9396929550929360600135925050565b5f5f602083850312156109ff575f5ffd5b823567ffffffffffffffff811115610a15575f5ffd5b8301601f81018513610a25575f5ffd5b803567ffffffffffffffff811115610a3b575f5ffd5b8560208260051b8401011115610a4f575f5ffd5b6020919091019590945092505050565b805169ffffffffffffffffffff8116811461098f575f5ffd5b5f5f5f5f5f60a08688031215610a8c575f5ffd5b610a9586610a5f565b60208701516040880151606089015192975090955093509150610aba60808701610a5f565b90509295509295909350565b808202811582820484141761075f57634e487b7160e01b5f52601160045260245ffd5b5f82610b0357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x15 PUSH1 0x19 JUMP JUMPDEST PUSH1 0xC9 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH9 0x10000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0x68 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND EQ PUSH1 0xC6 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0xB52 DUP1 PUSH2 0xD6 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x92 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x741BEF1A GT PUSH2 0x57 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xE65BF545 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF32AE7DD EQ PUSH2 0x22F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x26317008 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x5F761675 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x175 JUMPI PUSH0 PUSH0 REVERT JUMPDEST CALLDATASIZE PUSH2 0xD6 JUMPI PUSH2 0x9F PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x2B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x505 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x516 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST CALLER PUSH2 0x280 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x362 PUSH2 0x73B JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3A5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3B3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3FB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x422 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP9 GT PUSH2 0x442 JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x490 DUP10 PUSH2 0x765 JUMP JUMPDEST PUSH0 DUP9 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE PUSH1 0x2 DUP7 SWAP1 SSTORE DUP4 ISZERO PUSH2 0x4FA JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D PUSH2 0x24E JUMP JUMPDEST PUSH2 0x2AE PUSH0 PUSH2 0x776 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x24E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x776 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x93F5A1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x61C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x639 JUMPI PUSH1 0x40 MLOAD PUSH4 0x582F497D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x644 PUSH0 SLOAD PUSH2 0x7FB JUMP JUMPDEST SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH4 0x786E0A99 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6ED JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76D PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x7F2 DUP6 DUP5 PUSH2 0x8F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 DUP2 SGT PUSH2 0x897 JUMPI PUSH1 0x40 MLOAD PUSH4 0x96187BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x8A5 DUP5 PUSH3 0xF4240 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8C1 SWAP2 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E PUSH2 0x8C8 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH2 0x925 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x950 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8F9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x940 PUSH2 0x73B JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x96A JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x8C1 JUMP JUMPDEST POP PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x8C1 DUP3 PUSH2 0x979 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C9 DUP6 PUSH2 0x979 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x9DE PUSH1 0x40 DUP7 ADD PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA15 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA25 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xA4F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA8C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA95 DUP7 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xABA PUSH1 0x80 DUP8 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x75F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xB03 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY CREATE 0xAF 0xF7 0x26 0x23 EXTCODEHASH DUP7 PUSH6 0x610CB414E409 NUMBER 0xFB NUMBER TLOAD SSTORE PUSH15 0xE5B979A0AF1864612C80A864736F6C PUSH4 0x4300081C STOP CALLER ",
							"sourceMap": "368:3824:6:-:0;;;1292:53;;;;;;;;;-1:-1:-1;1316:22:6;:20;:22::i;:::-;368:3824;;7709:422:2;3147:66;7898:15;;;;;;;7894:76;;;7936:23;;-1:-1:-1;;;7936:23:2;;;;;;;;;;;7894:76;7983:14;;-1:-1:-1;;;;;7983:14:2;;;:34;7979:146;;8033:33;;-1:-1:-1;;;;;;8033:33:2;-1:-1:-1;;;;;8033:33:2;;;;;8085:29;;158:50:7;;;8085:29:2;;146:2:7;131:18;8085:29:2;;;;;;;7979:146;7758:373;7709:422::o;14:200:7:-;368:3824:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_1951": {
									"entryPoint": null,
									"id": 1951,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_100": {
									"entryPoint": 1893,
									"id": 100,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_127": {
									"entryPoint": 2285,
									"id": 127,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkInitializing_416": {
									"entryPoint": 2248,
									"id": 416,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_168": {
									"entryPoint": 590,
									"id": 168,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_507": {
									"entryPoint": 1851,
									"id": 507,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_71": {
									"entryPoint": null,
									"id": 71,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initializableStorageSlot_493": {
									"entryPoint": null,
									"id": 493,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_484": {
									"entryPoint": 2359,
									"id": 484,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_msgSender_536": {
									"entryPoint": null,
									"id": 536,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_239": {
									"entryPoint": 1910,
									"id": 239,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimStipend_1901": {
									"entryPoint": 1363,
									"id": 1901,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@claimedStipends_1688": {
									"entryPoint": null,
									"id": 1688,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@commutativeKeccak256_581": {
									"entryPoint": 2384,
									"id": 581,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@convertUsdToEth_1938": {
									"entryPoint": 2043,
									"id": 1938,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@efficientKeccak256_593": {
									"entryPoint": null,
									"id": 593,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_1808": {
									"entryPoint": 857,
									"id": 1808,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@merkleRoot_1684": {
									"entryPoint": null,
									"id": 1684,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_151": {
									"entryPoint": null,
									"id": 151,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@priceFeed_1682": {
									"entryPoint": null,
									"id": 1682,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@processProof_664": {
									"entryPoint": 2293,
									"id": 664,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@renounceOwnership_182": {
									"entryPoint": 1285,
									"id": 182,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_210": {
									"entryPoint": 1302,
									"id": 210,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@usdStipendAmount_1679": {
									"entryPoint": null,
									"id": 1679,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verify_623": {
									"entryPoint": 2022,
									"id": 623,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_1987": {
									"entryPoint": 688,
									"id": 1987,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 2425,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2452,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_addresst_bytes32": {
									"entryPoint": 2477,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr": {
									"entryPoint": 2542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory": {
									"entryPoint": 2680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_uint80_fromMemory": {
									"entryPoint": 2655,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 2793,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2758,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 2824,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:4924:7",
										"nodeType": "YulBlock",
										"src": "0:4924:7",
										"statements": [
											{
												"nativeSrc": "6:3:7",
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "115:76:7",
													"nodeType": "YulBlock",
													"src": "115:76:7",
													"statements": [
														{
															"nativeSrc": "125:26:7",
															"nodeType": "YulAssignment",
															"src": "125:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "137:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "148:2:7",
																		"nodeType": "YulLiteral",
																		"src": "148:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "133:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:7"
																},
																"nativeSrc": "133:18:7",
																"nodeType": "YulFunctionCall",
																"src": "133:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "125:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "167:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "178:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "160:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:7"
																},
																"nativeSrc": "160:25:7",
																"nodeType": "YulFunctionCall",
																"src": "160:25:7"
															},
															"nativeSrc": "160:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "160:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "14:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "84:9:7",
														"nodeType": "YulTypedName",
														"src": "84:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "95:6:7",
														"nodeType": "YulTypedName",
														"src": "95:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "106:4:7",
														"nodeType": "YulTypedName",
														"src": "106:4:7",
														"type": ""
													}
												],
												"src": "14:177:7"
											},
											{
												"body": {
													"nativeSrc": "245:124:7",
													"nodeType": "YulBlock",
													"src": "245:124:7",
													"statements": [
														{
															"nativeSrc": "255:29:7",
															"nodeType": "YulAssignment",
															"src": "255:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "277:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "277:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "264:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "264:12:7"
																},
																"nativeSrc": "264:20:7",
																"nodeType": "YulFunctionCall",
																"src": "264:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "255:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "255:5:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "347:16:7",
																"nodeType": "YulBlock",
																"src": "347:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "356:1:7",
																					"nodeType": "YulLiteral",
																					"src": "356:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "359:1:7",
																					"nodeType": "YulLiteral",
																					"src": "359:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "349:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "349:6:7"
																			},
																			"nativeSrc": "349:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "349:12:7"
																		},
																		"nativeSrc": "349:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "349:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "306:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "306:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "317:5:7",
																						"nodeType": "YulIdentifier",
																						"src": "317:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "332:3:7",
																										"nodeType": "YulLiteral",
																										"src": "332:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "337:1:7",
																										"nodeType": "YulLiteral",
																										"src": "337:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "328:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "328:3:7"
																								},
																								"nativeSrc": "328:11:7",
																								"nodeType": "YulFunctionCall",
																								"src": "328:11:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "341:1:7",
																								"nodeType": "YulLiteral",
																								"src": "341:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "324:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "324:3:7"
																						},
																						"nativeSrc": "324:19:7",
																						"nodeType": "YulFunctionCall",
																						"src": "324:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "313:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "313:3:7"
																				},
																				"nativeSrc": "313:31:7",
																				"nodeType": "YulFunctionCall",
																				"src": "313:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "303:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "303:2:7"
																		},
																		"nativeSrc": "303:42:7",
																		"nodeType": "YulFunctionCall",
																		"src": "303:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "296:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "296:6:7"
																},
																"nativeSrc": "296:50:7",
																"nodeType": "YulFunctionCall",
																"src": "296:50:7"
															},
															"nativeSrc": "293:70:7",
															"nodeType": "YulIf",
															"src": "293:70:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "196:173:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "224:6:7",
														"nodeType": "YulTypedName",
														"src": "224:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "235:5:7",
														"nodeType": "YulTypedName",
														"src": "235:5:7",
														"type": ""
													}
												],
												"src": "196:173:7"
											},
											{
												"body": {
													"nativeSrc": "444:116:7",
													"nodeType": "YulBlock",
													"src": "444:116:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "490:16:7",
																"nodeType": "YulBlock",
																"src": "490:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "499:1:7",
																					"nodeType": "YulLiteral",
																					"src": "499:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "502:1:7",
																					"nodeType": "YulLiteral",
																					"src": "502:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "492:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "492:6:7"
																			},
																			"nativeSrc": "492:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "492:12:7"
																		},
																		"nativeSrc": "492:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "492:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "465:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "465:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "474:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "474:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "461:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "461:3:7"
																		},
																		"nativeSrc": "461:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "461:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "486:2:7",
																		"nodeType": "YulLiteral",
																		"src": "486:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "457:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "457:3:7"
																},
																"nativeSrc": "457:32:7",
																"nodeType": "YulFunctionCall",
																"src": "457:32:7"
															},
															"nativeSrc": "454:52:7",
															"nodeType": "YulIf",
															"src": "454:52:7"
														},
														{
															"nativeSrc": "515:39:7",
															"nodeType": "YulAssignment",
															"src": "515:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "544:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "544:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "525:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "525:18:7"
																},
																"nativeSrc": "525:29:7",
																"nodeType": "YulFunctionCall",
																"src": "525:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "515:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "515:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "374:186:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "410:9:7",
														"nodeType": "YulTypedName",
														"src": "410:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "421:7:7",
														"nodeType": "YulTypedName",
														"src": "421:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "433:6:7",
														"nodeType": "YulTypedName",
														"src": "433:6:7",
														"type": ""
													}
												],
												"src": "374:186:7"
											},
											{
												"body": {
													"nativeSrc": "660:92:7",
													"nodeType": "YulBlock",
													"src": "660:92:7",
													"statements": [
														{
															"nativeSrc": "670:26:7",
															"nodeType": "YulAssignment",
															"src": "670:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "682:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "682:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "693:2:7",
																		"nodeType": "YulLiteral",
																		"src": "693:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "678:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "678:3:7"
																},
																"nativeSrc": "678:18:7",
																"nodeType": "YulFunctionCall",
																"src": "678:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "670:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "670:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "712:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "712:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "737:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "737:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "730:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "730:6:7"
																				},
																				"nativeSrc": "730:14:7",
																				"nodeType": "YulFunctionCall",
																				"src": "730:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "723:6:7",
																			"nodeType": "YulIdentifier",
																			"src": "723:6:7"
																		},
																		"nativeSrc": "723:22:7",
																		"nodeType": "YulFunctionCall",
																		"src": "723:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "705:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "705:6:7"
																},
																"nativeSrc": "705:41:7",
																"nodeType": "YulFunctionCall",
																"src": "705:41:7"
															},
															"nativeSrc": "705:41:7",
															"nodeType": "YulExpressionStatement",
															"src": "705:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "565:187:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "629:9:7",
														"nodeType": "YulTypedName",
														"src": "629:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "640:6:7",
														"nodeType": "YulTypedName",
														"src": "640:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "651:4:7",
														"nodeType": "YulTypedName",
														"src": "651:4:7",
														"type": ""
													}
												],
												"src": "565:187:7"
											},
											{
												"body": {
													"nativeSrc": "858:76:7",
													"nodeType": "YulBlock",
													"src": "858:76:7",
													"statements": [
														{
															"nativeSrc": "868:26:7",
															"nodeType": "YulAssignment",
															"src": "868:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "880:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "880:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "891:2:7",
																		"nodeType": "YulLiteral",
																		"src": "891:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "876:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "876:3:7"
																},
																"nativeSrc": "876:18:7",
																"nodeType": "YulFunctionCall",
																"src": "876:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "868:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "868:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "910:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "910:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "921:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "921:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "903:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:7"
																},
																"nativeSrc": "903:25:7",
																"nodeType": "YulFunctionCall",
																"src": "903:25:7"
															},
															"nativeSrc": "903:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "903:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "757:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "827:9:7",
														"nodeType": "YulTypedName",
														"src": "827:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "838:6:7",
														"nodeType": "YulTypedName",
														"src": "838:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "849:4:7",
														"nodeType": "YulTypedName",
														"src": "849:4:7",
														"type": ""
													}
												],
												"src": "757:177:7"
											},
											{
												"body": {
													"nativeSrc": "1060:276:7",
													"nodeType": "YulBlock",
													"src": "1060:276:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1107:16:7",
																"nodeType": "YulBlock",
																"src": "1107:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1116:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1116:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1119:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1119:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1109:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1109:6:7"
																			},
																			"nativeSrc": "1109:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1109:12:7"
																		},
																		"nativeSrc": "1109:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1109:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1081:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1081:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1090:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1090:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1077:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1077:3:7"
																		},
																		"nativeSrc": "1077:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1077:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1102:3:7",
																		"nodeType": "YulLiteral",
																		"src": "1102:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1073:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1073:3:7"
																},
																"nativeSrc": "1073:33:7",
																"nodeType": "YulFunctionCall",
																"src": "1073:33:7"
															},
															"nativeSrc": "1070:53:7",
															"nodeType": "YulIf",
															"src": "1070:53:7"
														},
														{
															"nativeSrc": "1132:39:7",
															"nodeType": "YulAssignment",
															"src": "1132:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1161:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1161:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1142:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "1142:18:7"
																},
																"nativeSrc": "1142:29:7",
																"nodeType": "YulFunctionCall",
																"src": "1142:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1132:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1132:6:7"
																}
															]
														},
														{
															"nativeSrc": "1180:42:7",
															"nodeType": "YulAssignment",
															"src": "1180:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1207:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1207:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1218:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1218:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1203:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1203:3:7"
																		},
																		"nativeSrc": "1203:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1203:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1190:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1190:12:7"
																},
																"nativeSrc": "1190:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1190:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1180:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1180:6:7"
																}
															]
														},
														{
															"nativeSrc": "1231:48:7",
															"nodeType": "YulAssignment",
															"src": "1231:48:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1264:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1264:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1275:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1275:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1260:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1260:3:7"
																		},
																		"nativeSrc": "1260:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1260:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1241:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "1241:18:7"
																},
																"nativeSrc": "1241:38:7",
																"nodeType": "YulFunctionCall",
																"src": "1241:38:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1231:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1231:6:7"
																}
															]
														},
														{
															"nativeSrc": "1288:42:7",
															"nodeType": "YulAssignment",
															"src": "1288:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1315:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1315:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1326:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1326:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1311:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1311:3:7"
																		},
																		"nativeSrc": "1311:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1311:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1298:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1298:12:7"
																},
																"nativeSrc": "1298:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1298:32:7"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "1288:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1288:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_addresst_bytes32",
												"nativeSrc": "939:397:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1002:9:7",
														"nodeType": "YulTypedName",
														"src": "1002:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1013:7:7",
														"nodeType": "YulTypedName",
														"src": "1013:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1025:6:7",
														"nodeType": "YulTypedName",
														"src": "1025:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1033:6:7",
														"nodeType": "YulTypedName",
														"src": "1033:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1041:6:7",
														"nodeType": "YulTypedName",
														"src": "1041:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "1049:6:7",
														"nodeType": "YulTypedName",
														"src": "1049:6:7",
														"type": ""
													}
												],
												"src": "939:397:7"
											},
											{
												"body": {
													"nativeSrc": "1470:102:7",
													"nodeType": "YulBlock",
													"src": "1470:102:7",
													"statements": [
														{
															"nativeSrc": "1480:26:7",
															"nodeType": "YulAssignment",
															"src": "1480:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1492:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1492:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1503:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1503:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1488:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1488:3:7"
																},
																"nativeSrc": "1488:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1488:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1480:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1480:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1522:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1522:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1537:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1537:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1553:3:7",
																								"nodeType": "YulLiteral",
																								"src": "1553:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1558:1:7",
																								"nodeType": "YulLiteral",
																								"src": "1558:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1549:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "1549:3:7"
																						},
																						"nativeSrc": "1549:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "1549:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1562:1:7",
																						"nodeType": "YulLiteral",
																						"src": "1562:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1545:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "1545:3:7"
																				},
																				"nativeSrc": "1545:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "1545:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1533:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1533:3:7"
																		},
																		"nativeSrc": "1533:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1533:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1515:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1515:6:7"
																},
																"nativeSrc": "1515:51:7",
																"nodeType": "YulFunctionCall",
																"src": "1515:51:7"
															},
															"nativeSrc": "1515:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "1515:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed",
												"nativeSrc": "1341:231:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1439:9:7",
														"nodeType": "YulTypedName",
														"src": "1439:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1450:6:7",
														"nodeType": "YulTypedName",
														"src": "1450:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1461:4:7",
														"nodeType": "YulTypedName",
														"src": "1461:4:7",
														"type": ""
													}
												],
												"src": "1341:231:7"
											},
											{
												"body": {
													"nativeSrc": "1678:102:7",
													"nodeType": "YulBlock",
													"src": "1678:102:7",
													"statements": [
														{
															"nativeSrc": "1688:26:7",
															"nodeType": "YulAssignment",
															"src": "1688:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1700:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1700:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1711:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1711:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1696:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1696:3:7"
																},
																"nativeSrc": "1696:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1696:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1688:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1688:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1730:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1730:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1745:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1745:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1761:3:7",
																								"nodeType": "YulLiteral",
																								"src": "1761:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1766:1:7",
																								"nodeType": "YulLiteral",
																								"src": "1766:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1757:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "1757:3:7"
																						},
																						"nativeSrc": "1757:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "1757:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1770:1:7",
																						"nodeType": "YulLiteral",
																						"src": "1770:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1753:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "1753:3:7"
																				},
																				"nativeSrc": "1753:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "1753:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1741:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1741:3:7"
																		},
																		"nativeSrc": "1741:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1741:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1723:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1723:6:7"
																},
																"nativeSrc": "1723:51:7",
																"nodeType": "YulFunctionCall",
																"src": "1723:51:7"
															},
															"nativeSrc": "1723:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "1723:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "1577:203:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1647:9:7",
														"nodeType": "YulTypedName",
														"src": "1647:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1658:6:7",
														"nodeType": "YulTypedName",
														"src": "1658:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1669:4:7",
														"nodeType": "YulTypedName",
														"src": "1669:4:7",
														"type": ""
													}
												],
												"src": "1577:203:7"
											},
											{
												"body": {
													"nativeSrc": "1890:505:7",
													"nodeType": "YulBlock",
													"src": "1890:505:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1936:16:7",
																"nodeType": "YulBlock",
																"src": "1936:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1945:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1945:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1948:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1948:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1938:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:7"
																			},
																			"nativeSrc": "1938:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1938:12:7"
																		},
																		"nativeSrc": "1938:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1938:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1911:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1911:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1920:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1920:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1907:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1907:3:7"
																		},
																		"nativeSrc": "1907:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1907:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1932:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1903:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1903:3:7"
																},
																"nativeSrc": "1903:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1903:32:7"
															},
															"nativeSrc": "1900:52:7",
															"nodeType": "YulIf",
															"src": "1900:52:7"
														},
														{
															"nativeSrc": "1961:37:7",
															"nodeType": "YulVariableDeclaration",
															"src": "1961:37:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1988:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1988:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1975:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1975:12:7"
																},
																"nativeSrc": "1975:23:7",
																"nodeType": "YulFunctionCall",
																"src": "1975:23:7"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "1965:6:7",
																	"nodeType": "YulTypedName",
																	"src": "1965:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2041:16:7",
																"nodeType": "YulBlock",
																"src": "2041:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2050:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2050:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2053:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2053:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2043:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2043:6:7"
																			},
																			"nativeSrc": "2043:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2043:12:7"
																		},
																		"nativeSrc": "2043:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2043:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2013:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "2013:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2021:18:7",
																		"nodeType": "YulLiteral",
																		"src": "2021:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2010:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "2010:2:7"
																},
																"nativeSrc": "2010:30:7",
																"nodeType": "YulFunctionCall",
																"src": "2010:30:7"
															},
															"nativeSrc": "2007:50:7",
															"nodeType": "YulIf",
															"src": "2007:50:7"
														},
														{
															"nativeSrc": "2066:32:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2066:32:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2080:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2080:9:7"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "2091:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "2091:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2076:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2076:3:7"
																},
																"nativeSrc": "2076:22:7",
																"nodeType": "YulFunctionCall",
																"src": "2076:22:7"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "2070:2:7",
																	"nodeType": "YulTypedName",
																	"src": "2070:2:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2146:16:7",
																"nodeType": "YulBlock",
																"src": "2146:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2155:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2155:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2158:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2158:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2148:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2148:6:7"
																			},
																			"nativeSrc": "2148:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2148:12:7"
																		},
																		"nativeSrc": "2148:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2148:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "2125:2:7",
																						"nodeType": "YulIdentifier",
																						"src": "2125:2:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2129:4:7",
																						"nodeType": "YulLiteral",
																						"src": "2129:4:7",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2121:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "2121:3:7"
																				},
																				"nativeSrc": "2121:13:7",
																				"nodeType": "YulFunctionCall",
																				"src": "2121:13:7"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2136:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "2136:7:7"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "2117:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2117:3:7"
																		},
																		"nativeSrc": "2117:27:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2117:27:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2110:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2110:6:7"
																},
																"nativeSrc": "2110:35:7",
																"nodeType": "YulFunctionCall",
																"src": "2110:35:7"
															},
															"nativeSrc": "2107:55:7",
															"nodeType": "YulIf",
															"src": "2107:55:7"
														},
														{
															"nativeSrc": "2171:30:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2171:30:7",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "2198:2:7",
																		"nodeType": "YulIdentifier",
																		"src": "2198:2:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2185:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "2185:12:7"
																},
																"nativeSrc": "2185:16:7",
																"nodeType": "YulFunctionCall",
																"src": "2185:16:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "2175:6:7",
																	"nodeType": "YulTypedName",
																	"src": "2175:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2244:16:7",
																"nodeType": "YulBlock",
																"src": "2244:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2253:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2253:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2256:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2256:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2246:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2246:6:7"
																			},
																			"nativeSrc": "2246:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2246:12:7"
																		},
																		"nativeSrc": "2246:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2246:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2216:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "2216:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2224:18:7",
																		"nodeType": "YulLiteral",
																		"src": "2224:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2213:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "2213:2:7"
																},
																"nativeSrc": "2213:30:7",
																"nodeType": "YulFunctionCall",
																"src": "2213:30:7"
															},
															"nativeSrc": "2210:50:7",
															"nodeType": "YulIf",
															"src": "2210:50:7"
														},
														{
															"body": {
																"nativeSrc": "2318:16:7",
																"nodeType": "YulBlock",
																"src": "2318:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2327:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2327:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2330:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2330:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2320:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2320:6:7"
																			},
																			"nativeSrc": "2320:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2320:12:7"
																		},
																		"nativeSrc": "2320:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2320:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "2283:2:7",
																						"nodeType": "YulIdentifier",
																						"src": "2283:2:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2291:1:7",
																								"nodeType": "YulLiteral",
																								"src": "2291:1:7",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nativeSrc": "2294:6:7",
																								"nodeType": "YulIdentifier",
																								"src": "2294:6:7"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2287:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "2287:3:7"
																						},
																						"nativeSrc": "2287:14:7",
																						"nodeType": "YulFunctionCall",
																						"src": "2287:14:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2279:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "2279:3:7"
																				},
																				"nativeSrc": "2279:23:7",
																				"nodeType": "YulFunctionCall",
																				"src": "2279:23:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2304:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2304:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2275:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2275:3:7"
																		},
																		"nativeSrc": "2275:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2275:32:7"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "2309:7:7",
																		"nodeType": "YulIdentifier",
																		"src": "2309:7:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2272:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "2272:2:7"
																},
																"nativeSrc": "2272:45:7",
																"nodeType": "YulFunctionCall",
																"src": "2272:45:7"
															},
															"nativeSrc": "2269:65:7",
															"nodeType": "YulIf",
															"src": "2269:65:7"
														},
														{
															"nativeSrc": "2343:21:7",
															"nodeType": "YulAssignment",
															"src": "2343:21:7",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "2357:2:7",
																		"nodeType": "YulIdentifier",
																		"src": "2357:2:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2361:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2361:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2353:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2353:3:7"
																},
																"nativeSrc": "2353:11:7",
																"nodeType": "YulFunctionCall",
																"src": "2353:11:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2343:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2343:6:7"
																}
															]
														},
														{
															"nativeSrc": "2373:16:7",
															"nodeType": "YulAssignment",
															"src": "2373:16:7",
															"value": {
																"name": "length",
																"nativeSrc": "2383:6:7",
																"nodeType": "YulIdentifier",
																"src": "2383:6:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2373:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2373:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr",
												"nativeSrc": "1785:610:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1848:9:7",
														"nodeType": "YulTypedName",
														"src": "1848:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1859:7:7",
														"nodeType": "YulTypedName",
														"src": "1859:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1871:6:7",
														"nodeType": "YulTypedName",
														"src": "1871:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1879:6:7",
														"nodeType": "YulTypedName",
														"src": "1879:6:7",
														"type": ""
													}
												],
												"src": "1785:610:7"
											},
											{
												"body": {
													"nativeSrc": "2591:14:7",
													"nodeType": "YulBlock",
													"src": "2591:14:7",
													"statements": [
														{
															"nativeSrc": "2593:10:7",
															"nodeType": "YulAssignment",
															"src": "2593:10:7",
															"value": {
																"name": "pos",
																"nativeSrc": "2600:3:7",
																"nodeType": "YulIdentifier",
																"src": "2600:3:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "2593:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2593:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "2400:205:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "2575:3:7",
														"nodeType": "YulTypedName",
														"src": "2575:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "2583:3:7",
														"nodeType": "YulTypedName",
														"src": "2583:3:7",
														"type": ""
													}
												],
												"src": "2400:205:7"
											},
											{
												"body": {
													"nativeSrc": "2718:101:7",
													"nodeType": "YulBlock",
													"src": "2718:101:7",
													"statements": [
														{
															"nativeSrc": "2728:26:7",
															"nodeType": "YulAssignment",
															"src": "2728:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2740:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2740:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2751:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2751:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2736:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2736:3:7"
																},
																"nativeSrc": "2736:18:7",
																"nodeType": "YulFunctionCall",
																"src": "2736:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2728:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "2728:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2770:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2770:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2785:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2785:6:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2793:18:7",
																				"nodeType": "YulLiteral",
																				"src": "2793:18:7",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2781:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2781:3:7"
																		},
																		"nativeSrc": "2781:31:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2781:31:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2763:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2763:6:7"
																},
																"nativeSrc": "2763:50:7",
																"nodeType": "YulFunctionCall",
																"src": "2763:50:7"
															},
															"nativeSrc": "2763:50:7",
															"nodeType": "YulExpressionStatement",
															"src": "2763:50:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "2610:209:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2687:9:7",
														"nodeType": "YulTypedName",
														"src": "2687:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2698:6:7",
														"nodeType": "YulTypedName",
														"src": "2698:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2709:4:7",
														"nodeType": "YulTypedName",
														"src": "2709:4:7",
														"type": ""
													}
												],
												"src": "2610:209:7"
											},
											{
												"body": {
													"nativeSrc": "2953:145:7",
													"nodeType": "YulBlock",
													"src": "2953:145:7",
													"statements": [
														{
															"nativeSrc": "2963:26:7",
															"nodeType": "YulAssignment",
															"src": "2963:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2975:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2975:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2986:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2986:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2971:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2971:3:7"
																},
																"nativeSrc": "2971:18:7",
																"nodeType": "YulFunctionCall",
																"src": "2971:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2963:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "2963:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3005:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3005:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3020:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3020:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3036:3:7",
																								"nodeType": "YulLiteral",
																								"src": "3036:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3041:1:7",
																								"nodeType": "YulLiteral",
																								"src": "3041:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3032:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "3032:3:7"
																						},
																						"nativeSrc": "3032:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "3032:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3045:1:7",
																						"nodeType": "YulLiteral",
																						"src": "3045:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3028:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "3028:3:7"
																				},
																				"nativeSrc": "3028:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "3028:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3016:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3016:3:7"
																		},
																		"nativeSrc": "3016:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3016:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2998:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2998:6:7"
																},
																"nativeSrc": "2998:51:7",
																"nodeType": "YulFunctionCall",
																"src": "2998:51:7"
															},
															"nativeSrc": "2998:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "2998:51:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3069:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3069:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3080:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3080:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3065:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3065:3:7"
																		},
																		"nativeSrc": "3065:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3065:18:7"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3085:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3085:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3058:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3058:6:7"
																},
																"nativeSrc": "3058:34:7",
																"nodeType": "YulFunctionCall",
																"src": "3058:34:7"
															},
															"nativeSrc": "3058:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "3058:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "2824:274:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2914:9:7",
														"nodeType": "YulTypedName",
														"src": "2914:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2925:6:7",
														"nodeType": "YulTypedName",
														"src": "2925:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2933:6:7",
														"nodeType": "YulTypedName",
														"src": "2933:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2944:4:7",
														"nodeType": "YulTypedName",
														"src": "2944:4:7",
														"type": ""
													}
												],
												"src": "2824:274:7"
											},
											{
												"body": {
													"nativeSrc": "3222:63:7",
													"nodeType": "YulBlock",
													"src": "3222:63:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3239:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "3239:3:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3244:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3244:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3232:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3232:6:7"
																},
																"nativeSrc": "3232:19:7",
																"nodeType": "YulFunctionCall",
																"src": "3232:19:7"
															},
															"nativeSrc": "3232:19:7",
															"nodeType": "YulExpressionStatement",
															"src": "3232:19:7"
														},
														{
															"nativeSrc": "3260:19:7",
															"nodeType": "YulAssignment",
															"src": "3260:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3271:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "3271:3:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3276:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3276:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3267:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3267:3:7"
																},
																"nativeSrc": "3267:12:7",
																"nodeType": "YulFunctionCall",
																"src": "3267:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "3260:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3260:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "3103:182:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "3198:3:7",
														"nodeType": "YulTypedName",
														"src": "3198:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3203:6:7",
														"nodeType": "YulTypedName",
														"src": "3203:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "3214:3:7",
														"nodeType": "YulTypedName",
														"src": "3214:3:7",
														"type": ""
													}
												],
												"src": "3103:182:7"
											},
											{
												"body": {
													"nativeSrc": "3419:119:7",
													"nodeType": "YulBlock",
													"src": "3419:119:7",
													"statements": [
														{
															"nativeSrc": "3429:26:7",
															"nodeType": "YulAssignment",
															"src": "3429:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3441:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3441:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3452:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3452:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3437:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3437:3:7"
																},
																"nativeSrc": "3437:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3437:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3429:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3429:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3471:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3471:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3482:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3482:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3464:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3464:6:7"
																},
																"nativeSrc": "3464:25:7",
																"nodeType": "YulFunctionCall",
																"src": "3464:25:7"
															},
															"nativeSrc": "3464:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "3464:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3509:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3520:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3505:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:7"
																		},
																		"nativeSrc": "3505:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:7"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3525:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3525:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3498:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:7"
																},
																"nativeSrc": "3498:34:7",
																"nodeType": "YulFunctionCall",
																"src": "3498:34:7"
															},
															"nativeSrc": "3498:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "3498:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "3290:248:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3380:9:7",
														"nodeType": "YulTypedName",
														"src": "3380:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3391:6:7",
														"nodeType": "YulTypedName",
														"src": "3391:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3399:6:7",
														"nodeType": "YulTypedName",
														"src": "3399:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3410:4:7",
														"nodeType": "YulTypedName",
														"src": "3410:4:7",
														"type": ""
													}
												],
												"src": "3290:248:7"
											},
											{
												"body": {
													"nativeSrc": "3602:120:7",
													"nodeType": "YulBlock",
													"src": "3602:120:7",
													"statements": [
														{
															"nativeSrc": "3612:22:7",
															"nodeType": "YulAssignment",
															"src": "3612:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3627:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3627:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3621:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "3621:5:7"
																},
																"nativeSrc": "3621:13:7",
																"nodeType": "YulFunctionCall",
																"src": "3621:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3612:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "3612:5:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3700:16:7",
																"nodeType": "YulBlock",
																"src": "3700:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3709:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3709:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3712:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3712:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3702:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3702:6:7"
																			},
																			"nativeSrc": "3702:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3702:12:7"
																		},
																		"nativeSrc": "3702:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3702:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3656:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "3656:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3667:5:7",
																						"nodeType": "YulIdentifier",
																						"src": "3667:5:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3674:22:7",
																						"nodeType": "YulLiteral",
																						"src": "3674:22:7",
																						"type": "",
																						"value": "0xffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "3663:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "3663:3:7"
																				},
																				"nativeSrc": "3663:34:7",
																				"nodeType": "YulFunctionCall",
																				"src": "3663:34:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "3653:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "3653:2:7"
																		},
																		"nativeSrc": "3653:45:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3653:45:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3646:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3646:6:7"
																},
																"nativeSrc": "3646:53:7",
																"nodeType": "YulFunctionCall",
																"src": "3646:53:7"
															},
															"nativeSrc": "3643:73:7",
															"nodeType": "YulIf",
															"src": "3643:73:7"
														}
													]
												},
												"name": "abi_decode_uint80_fromMemory",
												"nativeSrc": "3543:179:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3581:6:7",
														"nodeType": "YulTypedName",
														"src": "3581:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3592:5:7",
														"nodeType": "YulTypedName",
														"src": "3592:5:7",
														"type": ""
													}
												],
												"src": "3543:179:7"
											},
											{
												"body": {
													"nativeSrc": "3873:425:7",
													"nodeType": "YulBlock",
													"src": "3873:425:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "3920:16:7",
																"nodeType": "YulBlock",
																"src": "3920:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3929:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3929:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3932:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3932:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3922:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3922:6:7"
																			},
																			"nativeSrc": "3922:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3922:12:7"
																		},
																		"nativeSrc": "3922:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3922:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3894:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "3894:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3903:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3903:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3890:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3890:3:7"
																		},
																		"nativeSrc": "3890:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3890:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3915:3:7",
																		"nodeType": "YulLiteral",
																		"src": "3915:3:7",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3886:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3886:3:7"
																},
																"nativeSrc": "3886:33:7",
																"nodeType": "YulFunctionCall",
																"src": "3886:33:7"
															},
															"nativeSrc": "3883:53:7",
															"nodeType": "YulIf",
															"src": "3883:53:7"
														},
														{
															"nativeSrc": "3945:49:7",
															"nodeType": "YulAssignment",
															"src": "3945:49:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3984:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3984:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint80_fromMemory",
																	"nativeSrc": "3955:28:7",
																	"nodeType": "YulIdentifier",
																	"src": "3955:28:7"
																},
																"nativeSrc": "3955:39:7",
																"nodeType": "YulFunctionCall",
																"src": "3955:39:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3945:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3945:6:7"
																}
															]
														},
														{
															"nativeSrc": "4003:35:7",
															"nodeType": "YulAssignment",
															"src": "4003:35:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4023:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4023:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4034:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4034:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4019:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4019:3:7"
																		},
																		"nativeSrc": "4019:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4019:18:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4013:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "4013:5:7"
																},
																"nativeSrc": "4013:25:7",
																"nodeType": "YulFunctionCall",
																"src": "4013:25:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4003:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4003:6:7"
																}
															]
														},
														{
															"nativeSrc": "4047:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "4047:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "4060:1:7",
																"nodeType": "YulLiteral",
																"src": "4060:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4051:5:7",
																	"nodeType": "YulTypedName",
																	"src": "4051:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4070:34:7",
															"nodeType": "YulAssignment",
															"src": "4070:34:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4089:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4089:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4100:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4100:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4085:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4085:3:7"
																		},
																		"nativeSrc": "4085:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4085:18:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4079:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "4079:5:7"
																},
																"nativeSrc": "4079:25:7",
																"nodeType": "YulFunctionCall",
																"src": "4079:25:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4070:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "4070:5:7"
																}
															]
														},
														{
															"nativeSrc": "4113:15:7",
															"nodeType": "YulAssignment",
															"src": "4113:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "4123:5:7",
																"nodeType": "YulIdentifier",
																"src": "4123:5:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "4113:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4113:6:7"
																}
															]
														},
														{
															"nativeSrc": "4137:16:7",
															"nodeType": "YulVariableDeclaration",
															"src": "4137:16:7",
															"value": {
																"kind": "number",
																"nativeSrc": "4152:1:7",
																"nodeType": "YulLiteral",
																"src": "4152:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "4141:7:7",
																	"nodeType": "YulTypedName",
																	"src": "4141:7:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4162:36:7",
															"nodeType": "YulAssignment",
															"src": "4162:36:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4183:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4183:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4194:2:7",
																				"nodeType": "YulLiteral",
																				"src": "4194:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4179:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4179:3:7"
																		},
																		"nativeSrc": "4179:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4179:18:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4173:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "4173:5:7"
																},
																"nativeSrc": "4173:25:7",
																"nodeType": "YulFunctionCall",
																"src": "4173:25:7"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "4162:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "4162:7:7"
																}
															]
														},
														{
															"nativeSrc": "4207:17:7",
															"nodeType": "YulAssignment",
															"src": "4207:17:7",
															"value": {
																"name": "value_1",
																"nativeSrc": "4217:7:7",
																"nodeType": "YulIdentifier",
																"src": "4217:7:7"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4207:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4207:6:7"
																}
															]
														},
														{
															"nativeSrc": "4233:59:7",
															"nodeType": "YulAssignment",
															"src": "4233:59:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4276:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4276:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4287:3:7",
																				"nodeType": "YulLiteral",
																				"src": "4287:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4272:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4272:3:7"
																		},
																		"nativeSrc": "4272:19:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4272:19:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_uint80_fromMemory",
																	"nativeSrc": "4243:28:7",
																	"nodeType": "YulIdentifier",
																	"src": "4243:28:7"
																},
																"nativeSrc": "4243:49:7",
																"nodeType": "YulFunctionCall",
																"src": "4243:49:7"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4233:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4233:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory",
												"nativeSrc": "3727:571:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3807:9:7",
														"nodeType": "YulTypedName",
														"src": "3807:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3818:7:7",
														"nodeType": "YulTypedName",
														"src": "3818:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3830:6:7",
														"nodeType": "YulTypedName",
														"src": "3830:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3838:6:7",
														"nodeType": "YulTypedName",
														"src": "3838:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3846:6:7",
														"nodeType": "YulTypedName",
														"src": "3846:6:7",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3854:6:7",
														"nodeType": "YulTypedName",
														"src": "3854:6:7",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3862:6:7",
														"nodeType": "YulTypedName",
														"src": "3862:6:7",
														"type": ""
													}
												],
												"src": "3727:571:7"
											},
											{
												"body": {
													"nativeSrc": "4355:213:7",
													"nodeType": "YulBlock",
													"src": "4355:213:7",
													"statements": [
														{
															"nativeSrc": "4365:20:7",
															"nodeType": "YulAssignment",
															"src": "4365:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4380:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "4380:1:7"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4383:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "4383:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4376:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4376:3:7"
																},
																"nativeSrc": "4376:9:7",
																"nodeType": "YulFunctionCall",
																"src": "4376:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4365:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "4365:7:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4451:111:7",
																"nodeType": "YulBlock",
																"src": "4451:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4472:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4472:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4479:3:7",
																							"nodeType": "YulLiteral",
																							"src": "4479:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4484:10:7",
																							"nodeType": "YulLiteral",
																							"src": "4484:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4475:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "4475:3:7"
																					},
																					"nativeSrc": "4475:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "4475:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4465:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4465:6:7"
																			},
																			"nativeSrc": "4465:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4465:31:7"
																		},
																		"nativeSrc": "4465:31:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4465:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4516:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4516:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4519:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4519:4:7",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4509:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4509:6:7"
																			},
																			"nativeSrc": "4509:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4509:15:7"
																		},
																		"nativeSrc": "4509:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4509:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4544:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4544:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4547:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4547:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4537:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4537:6:7"
																			},
																			"nativeSrc": "4537:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4537:15:7"
																		},
																		"nativeSrc": "4537:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4537:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4414:1:7",
																						"nodeType": "YulIdentifier",
																						"src": "4414:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4407:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "4407:6:7"
																				},
																				"nativeSrc": "4407:9:7",
																				"nodeType": "YulFunctionCall",
																				"src": "4407:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4421:1:7",
																						"nodeType": "YulIdentifier",
																						"src": "4421:1:7"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4428:7:7",
																								"nodeType": "YulIdentifier",
																								"src": "4428:7:7"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4437:1:7",
																								"nodeType": "YulIdentifier",
																								"src": "4437:1:7"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4424:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "4424:3:7"
																						},
																						"nativeSrc": "4424:15:7",
																						"nodeType": "YulFunctionCall",
																						"src": "4424:15:7"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4418:2:7",
																					"nodeType": "YulIdentifier",
																					"src": "4418:2:7"
																				},
																				"nativeSrc": "4418:22:7",
																				"nodeType": "YulFunctionCall",
																				"src": "4418:22:7"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4404:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "4404:2:7"
																		},
																		"nativeSrc": "4404:37:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4404:37:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4397:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4397:6:7"
																},
																"nativeSrc": "4397:45:7",
																"nodeType": "YulFunctionCall",
																"src": "4397:45:7"
															},
															"nativeSrc": "4394:168:7",
															"nodeType": "YulIf",
															"src": "4394:168:7"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4303:265:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4334:1:7",
														"nodeType": "YulTypedName",
														"src": "4334:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4337:1:7",
														"nodeType": "YulTypedName",
														"src": "4337:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4343:7:7",
														"nodeType": "YulTypedName",
														"src": "4343:7:7",
														"type": ""
													}
												],
												"src": "4303:265:7"
											},
											{
												"body": {
													"nativeSrc": "4619:171:7",
													"nodeType": "YulBlock",
													"src": "4619:171:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "4650:111:7",
																"nodeType": "YulBlock",
																"src": "4650:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4671:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4671:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4678:3:7",
																							"nodeType": "YulLiteral",
																							"src": "4678:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4683:10:7",
																							"nodeType": "YulLiteral",
																							"src": "4683:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4674:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "4674:3:7"
																					},
																					"nativeSrc": "4674:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "4674:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4664:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4664:6:7"
																			},
																			"nativeSrc": "4664:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4664:31:7"
																		},
																		"nativeSrc": "4664:31:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4664:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4715:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4715:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4718:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4718:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4708:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4708:6:7"
																			},
																			"nativeSrc": "4708:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4708:15:7"
																		},
																		"nativeSrc": "4708:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4708:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4743:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4743:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4746:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4746:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4736:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4736:6:7"
																			},
																			"nativeSrc": "4736:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4736:15:7"
																		},
																		"nativeSrc": "4736:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4736:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "4639:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "4639:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4632:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4632:6:7"
																},
																"nativeSrc": "4632:9:7",
																"nodeType": "YulFunctionCall",
																"src": "4632:9:7"
															},
															"nativeSrc": "4629:132:7",
															"nodeType": "YulIf",
															"src": "4629:132:7"
														},
														{
															"nativeSrc": "4770:14:7",
															"nodeType": "YulAssignment",
															"src": "4770:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4779:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "4779:1:7"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4782:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "4782:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "4775:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "4775:3:7"
																},
																"nativeSrc": "4775:9:7",
																"nodeType": "YulFunctionCall",
																"src": "4775:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "4770:1:7",
																	"nodeType": "YulIdentifier",
																	"src": "4770:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "4573:217:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4604:1:7",
														"nodeType": "YulTypedName",
														"src": "4604:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4607:1:7",
														"nodeType": "YulTypedName",
														"src": "4607:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "4613:1:7",
														"nodeType": "YulTypedName",
														"src": "4613:1:7",
														"type": ""
													}
												],
												"src": "4573:217:7"
											},
											{
												"body": {
													"nativeSrc": "4827:95:7",
													"nodeType": "YulBlock",
													"src": "4827:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4844:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4844:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4851:3:7",
																				"nodeType": "YulLiteral",
																				"src": "4851:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4856:10:7",
																				"nodeType": "YulLiteral",
																				"src": "4856:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "4847:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4847:3:7"
																		},
																		"nativeSrc": "4847:20:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4847:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4837:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4837:6:7"
																},
																"nativeSrc": "4837:31:7",
																"nodeType": "YulFunctionCall",
																"src": "4837:31:7"
															},
															"nativeSrc": "4837:31:7",
															"nodeType": "YulExpressionStatement",
															"src": "4837:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4884:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4884:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4887:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4887:4:7",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4877:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4877:6:7"
																},
																"nativeSrc": "4877:15:7",
																"nodeType": "YulFunctionCall",
																"src": "4877:15:7"
															},
															"nativeSrc": "4877:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "4877:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4908:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4908:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4911:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4911:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4901:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4901:6:7"
																},
																"nativeSrc": "4901:15:7",
																"nodeType": "YulFunctionCall",
																"src": "4901:15:7"
															},
															"nativeSrc": "4901:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "4901:15:7"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "4795:127:7",
												"nodeType": "YulFunctionDefinition",
												"src": "4795:127:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_AggregatorV3Interface_$45__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_uint80_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_uint80_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := 0\n        value := mload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := mload(add(headStart, 96))\n        value3 := value_1\n        value4 := abi_decode_uint80_fromMemory(add(headStart, 128))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x))))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405260043610610092575f3560e01c8063741bef1a11610057578063741bef1a146101895780638da5cb5b146101c0578063e65bf545146101fc578063f2fde38b14610210578063f32ae7dd1461022f575f5ffd5b806326317008146100da5780632eb4a7ab1461011d5780633ccfd60b146101405780635f76167514610156578063715018a614610175575f5ffd5b366100d65761009f61024e565b60405134815233907f9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b8429060200160405180910390a2005b5f5ffd5b3480156100e5575f5ffd5b506101086100f4366004610994565b60036020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b348015610128575f5ffd5b5061013260025481565b604051908152602001610114565b34801561014b575f5ffd5b506101546102b0565b005b348015610161575f5ffd5b506101546101703660046109ad565b610359565b348015610180575f5ffd5b50610154610505565b348015610194575f5ffd5b506001546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610114565b3480156101cb575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101a8565b348015610207575f5ffd5b506101325f5481565b34801561021b575f5ffd5b5061015461022a366004610994565b610516565b34801561023a575f5ffd5b506101546102493660046109ee565b610553565b336102807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102ae5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b6102b861024e565b60405147905f90339083908381818185875af1925050503d805f81146102f9576040519150601f19603f3d011682016040523d82523d5f602084013e6102fe565b606091505b50509050806103205760405163b12d13eb60e01b815260040160405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b5f61036261073b565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103895750825b90505f8267ffffffffffffffff1660011480156103a55750303b155b9050811580156103b3575080155b156103d15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103fb57845460ff60401b1916600160401b1785555b6001600160a01b0389166104225760405163074f166b60e31b815260040160405180910390fd5b5f8811610442576040516310e4157360e21b815260040160405180910390fd5b6001600160a01b0387166104695760405163e358806360e01b815260040160405180910390fd5b8561048757604051639dd854d360e01b815260040160405180910390fd5b61049089610765565b5f889055600180546001600160a01b0319166001600160a01b038916179055600286905583156104fa57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b61050d61024e565b6102ae5f610776565b61051e61024e565b6001600160a01b03811661054757604051631e4fbdf760e01b81525f60048201526024016102a5565b61055081610776565b50565b335f8181526003602052604090205460ff1615610582576040516293f5a160e01b815260040160405180910390fd5b5f8054604080516001600160a01b03851660208201529081019190915260600160405160208183030381529060405280519060200120905061061c8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506002546040805160208101889052919350019050604051602081830303815290604052805190602001206107e6565b6106395760405163582f497d60e11b815260040160405180910390fd5b5f6106445f546107fb565b9050804710156106675760405163786e0a9960e01b815260040160405180910390fd5b6001600160a01b0383165f81815260036020526040808220805460ff191660011790555190919083908381818185875af1925050503d805f81146106c6576040519150601f19603f3d011682016040523d82523d5f602084013e6106cb565b606091505b50509050806106ed5760405163b12d13eb60e01b815260040160405180910390fd5b5f5460408051918252602082018490526001600160a01b038616917f4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a910160405180910390a2505050505050565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005b92915050565b61076d6108c8565b610550816108ed565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f826107f285846108f5565b14949350505050565b5f5f60015f9054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561084d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108719190610a78565b5050509150505f8113610897576040516396187bd560e01b815260040160405180910390fd5b806108a584620f4240610ac6565b6108b790670de0b6b3a7640000610ac6565b6108c19190610ae9565b9392505050565b6108d0610937565b6102ae57604051631afcd79f60e31b815260040160405180910390fd5b61051e6108c8565b5f81815b845181101561092f576109258286838151811061091857610918610b08565b6020026020010151610950565b91506001016108f9565b509392505050565b5f61094061073b565b54600160401b900460ff16919050565b5f81831061096a575f8281526020849052604090206108c1565b505f9182526020526040902090565b80356001600160a01b038116811461098f575f5ffd5b919050565b5f602082840312156109a4575f5ffd5b6108c182610979565b5f5f5f5f608085870312156109c0575f5ffd5b6109c985610979565b9350602085013592506109de60408601610979565b9396929550929360600135925050565b5f5f602083850312156109ff575f5ffd5b823567ffffffffffffffff811115610a15575f5ffd5b8301601f81018513610a25575f5ffd5b803567ffffffffffffffff811115610a3b575f5ffd5b8560208260051b8401011115610a4f575f5ffd5b6020919091019590945092505050565b805169ffffffffffffffffffff8116811461098f575f5ffd5b5f5f5f5f5f60a08688031215610a8c575f5ffd5b610a9586610a5f565b60208701516040880151606089015192975090955093509150610aba60808701610a5f565b90509295509295909350565b808202811582820484141761075f57634e487b7160e01b5f52601160045260245ffd5b5f82610b0357634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x92 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x741BEF1A GT PUSH2 0x57 JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xE65BF545 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF32AE7DD EQ PUSH2 0x22F JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x26317008 EQ PUSH2 0xDA JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x5F761675 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x175 JUMPI PUSH0 PUSH0 REVERT JUMPDEST CALLDATASIZE PUSH2 0xD6 JUMPI PUSH2 0x9F PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0x9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x108 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x2B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x161 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x170 CALLDATASIZE PUSH1 0x4 PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x505 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x194 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1A8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x114 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x132 PUSH0 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x994 JUMP JUMPDEST PUSH2 0x516 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EE JUMP JUMPDEST PUSH2 0x553 JUMP JUMPDEST CALLER PUSH2 0x280 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2B8 PUSH2 0x24E JUMP JUMPDEST PUSH1 0x40 MLOAD SELFBALANCE SWAP1 PUSH0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x362 PUSH2 0x73B JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3A5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3B3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3FB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x422 JUMPI PUSH1 0x40 MLOAD PUSH4 0x74F166B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP9 GT PUSH2 0x442 JUMPI PUSH1 0x40 MLOAD PUSH4 0x10E41573 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE3588063 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9DD854D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x490 DUP10 PUSH2 0x765 JUMP JUMPDEST PUSH0 DUP9 SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND OR SWAP1 SSTORE PUSH1 0x2 DUP7 SWAP1 SSTORE DUP4 ISZERO PUSH2 0x4FA JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D PUSH2 0x24E JUMP JUMPDEST PUSH2 0x2AE PUSH0 PUSH2 0x776 JUMP JUMPDEST PUSH2 0x51E PUSH2 0x24E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x776 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x93F5A1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x61C DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP2 SWAP4 POP ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x639 JUMPI PUSH1 0x40 MLOAD PUSH4 0x582F497D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x644 PUSH0 SLOAD PUSH2 0x7FB JUMP JUMPDEST SWAP1 POP DUP1 SELFBALANCE LT ISZERO PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH4 0x786E0A99 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x6ED JUMPI PUSH1 0x40 MLOAD PUSH4 0xB12D13EB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76D PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x550 DUP2 PUSH2 0x8ED JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x7F2 DUP6 DUP5 PUSH2 0x8F5 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x84D JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH0 DUP2 SGT PUSH2 0x897 JUMPI PUSH1 0x40 MLOAD PUSH4 0x96187BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x8A5 DUP5 PUSH3 0xF4240 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x8C1 SWAP2 SWAP1 PUSH2 0xAE9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0x937 JUMP JUMPDEST PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E PUSH2 0x8C8 JUMP JUMPDEST PUSH0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x92F JUMPI PUSH2 0x925 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x918 JUMPI PUSH2 0x918 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x950 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8F9 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x940 PUSH2 0x73B JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 DUP4 LT PUSH2 0x96A JUMPI PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x8C1 JUMP JUMPDEST POP PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9A4 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x8C1 DUP3 PUSH2 0x979 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9C9 DUP6 PUSH2 0x979 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x9DE PUSH1 0x40 DUP7 ADD PUSH2 0x979 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FF JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA15 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA25 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA3B JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xA4F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x98F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xA8C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA95 DUP7 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 0xABA PUSH1 0x80 DUP8 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x75F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0xB03 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY CREATE 0xAF 0xF7 0x26 0x23 EXTCODEHASH DUP7 PUSH6 0x610CB414E409 NUMBER 0xFB NUMBER TLOAD SSTORE PUSH15 0xE5B979A0AF1864612C80A864736F6C PUSH4 0x4300081C STOP CALLER ",
							"sourceMap": "368:3824:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2334:13:1;:11;:13::i;:::-;3795:51:6::1;::::0;3836:9:::1;160:25:7::0;;3824:10:6::1;::::0;3795:51:::1;::::0;148:2:7;133:18;3795:51:6::1;;;;;;;368:3824:::0;;;;;572:47;;;;;;;;;;-1:-1:-1;572:47:6;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;730:14:7;;723:22;705:41;;693:2;678:18;572:47:6;;;;;;;;541:25;;;;;;;;;;;;;;;;;;;160::7;;;148:2;133:18;541:25:6;14:177:7;3914:276:6;;;;;;;;;;;;;:::i;:::-;;1403:624;;;;;;;;;;-1:-1:-1;1403:624:6;;;;;:::i;:::-;;:::i;3155:101:1:-;;;;;;;;;;;;;:::i;497:38:6:-;;;;;;;;;;-1:-1:-1;497:38:6;;;;-1:-1:-1;;;;;497:38:6;;;;;;-1:-1:-1;;;;;1533:32:7;;;1515:51;;1503:2;1488:18;497:38:6;1341:231:7;2441:144:1;;;;;;;;;;-1:-1:-1;1313:22:1;2570:8;-1:-1:-1;;;;;2570:8:1;2441:144;;426:31:6;;;;;;;;;;;;;;;;3405:215:1;;;;;;;;;;-1:-1:-1;3405:215:1;;;;;:::i;:::-;;:::i;2240:1012:6:-;;;;;;;;;;-1:-1:-1;2240:1012:6;;;;;:::i;:::-;;:::i;2658:162:1:-;966:10:3;2717:7:1;1313:22;2570:8;-1:-1:-1;;;;;2570:8:1;;2441:144;2717:7;-1:-1:-1;;;;;2717:23:1;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:1;;966:10:3;2763:40:1;;;1515:51:7;1488:18;;2763:40:1;;;;;;;;2713:101;2658:162::o;3914:276:6:-;2334:13:1;:11;:13::i;:::-;4039:43:6::1;::::0;3989:21:::1;::::0;3963:23:::1;::::0;4039:10:::1;::::0;3989:21;;3963:23;4039:43;3963:23;4039:43;3989:21;4039:10;:43:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4020:62;;;4100:7;4092:37;;;;-1:-1:-1::0;;;4092:37:6::1;;;;;;;;;;;;4145:38;::::0;160:25:7;;;4155:10:6::1;::::0;4145:38:::1;::::0;148:2:7;133:18;4145:38:6::1;;;;;;;3953:237;;3914:276::o:0;1403:624::-;4158:30:2;4191:26;:24;:26::i;:::-;4302:15;;4158:59;;-1:-1:-1;4302:15:2;-1:-1:-1;;;4302:15:2;;;4301:16;;4348:14;;4279:19;4724:16;;:34;;;;;4744:14;4724:34;4704:54;;4768:17;4788:11;:16;;4803:1;4788:16;:50;;;;-1:-1:-1;4816:4:2;4808:25;:30;4788:50;4768:70;;4854:12;4853:13;:30;;;;;4871:12;4870:13;4853:30;4849:91;;;4906:23;;-1:-1:-1;;;4906:23:2;;;;;;;;;;;4849:91;4949:18;;-1:-1:-1;;4949:18:2;4966:1;4949:18;;;4977:67;;;;5011:22;;-1:-1:-1;;;;5011:22:2;-1:-1:-1;;;5011:22:2;;;4977:67;-1:-1:-1;;;;;1585:23:6;::::1;1577:58;;;;-1:-1:-1::0;;;1577:58:6::1;;;;;;;;;;;;1673:1;1653:17;:21;1645:68;;;;-1:-1:-1::0;;;1645:68:6::1;;;;;;;;;;;;-1:-1:-1::0;;;;;1731:24:6;::::1;1723:60;;;;-1:-1:-1::0;;;1723:60:6::1;;;;;;;;;;;;1801:11:::0;1793:55:::1;;;;-1:-1:-1::0;;;1793:55:6::1;;;;;;;;;;;;1859:25;1874:9;1859:14;:25::i;:::-;1895:16;:36:::0;;;1941:9:::1;:45:::0;;-1:-1:-1;;;;;;1941:45:6::1;-1:-1:-1::0;;;;;1941:45:6;::::1;;::::0;;1996:10:::1;:24:::0;;;5064:101:2;;;;5098:23;;-1:-1:-1;;;;5098:23:2;;;5140:14;;-1:-1:-1;2763:50:7;;5140:14:2;;2751:2:7;2736:18;5140:14:2;;;;;;;5064:101;4092:1079;;;;;1403:624:6;;;;:::o;3155:101:1:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;3405:215::-:0;2334:13;:11;:13::i;:::-;-1:-1:-1;;;;;3489:22:1;::::1;3485:91;;3534:31;::::0;-1:-1:-1;;;3534:31:1;;3562:1:::1;3534:31;::::0;::::1;1515:51:7::0;1488:18;;3534:31:1::1;1341:231:7::0;3485:91:1::1;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;2240:1012:6:-;2331:10;2313:15;2360:24;;;:15;:24;;;;;;;;2359:25;2351:59;;;;-1:-1:-1;;;2351:59:6;;;;;;;;;;;;2421:12;2466:16;;2446:37;;;-1:-1:-1;;;;;3016:32:7;;2446:37:6;;;2998:51:7;3065:18;;;3058:34;;;;2971:18;;2446:37:6;;;;;;;;;;;;2436:48;;;;;;2421:63;;2515:140;2551:11;;2515:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2580:10:6;;2618:22;;;;;;3232:19:7;;;2580:10:6;;-1:-1:-1;3267:12:7;;-1:-1:-1;2618:22:6;;;;;;;;;;;;2608:33;;;;;;2515:18;:140::i;:::-;2494:205;;;;-1:-1:-1;;;2494:205:6;;;;;;;;;;;;2710:17;2730:33;2746:16;;2730:15;:33::i;:::-;2710:53;;2819:9;2794:21;:34;;2773:108;;;;-1:-1:-1;;;2773:108:6;;;;;;;;;;;;-1:-1:-1;;;;;3035:24:6;;;;;;:15;:24;;;;;;:31;;-1:-1:-1;;3035:31:6;3062:4;3035:31;;;3096:34;3035:24;;;3116:9;;3035:24;3096:34;3035:24;3096:34;3116:9;3035:24;3096:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3077:53;;;3148:7;3140:37;;;;-1:-1:-1;;;3140:37:6;;;;;;;;;;;;3217:16;;3193:52;;;3464:25:7;;;3520:2;3505:18;;3498:34;;;-1:-1:-1;;;;;3193:52:6;;;;;3437:18:7;3193:52:6;;;;;;;2303:949;;;;2240:1012;;:::o;9071:205:2:-;9129:30;;3147:66;9186:27;9171:42;9071:205;-1:-1:-1;;9071:205:2:o;1847:127:1:-;6929:20:2;:18;:20::i;:::-;1929:38:1::1;1954:12;1929:24;:38::i;3774:248::-:0;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:1;;-1:-1:-1;;;;;3941:19:1;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;1902:154:5:-;1993:4;2045;2016:25;2029:5;2036:4;2016:12;:25::i;:::-;:33;;1902:154;-1:-1:-1;;;;1902:154:5:o;3258:360:6:-;3346:7;3368:12;3390:9;;;;;;;;;-1:-1:-1;;;;;3390:9:6;-1:-1:-1;;;;;3390:25:6;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3365:52;;;;;;3443:1;3435:5;:9;3427:42;;;;-1:-1:-1;;;3427:42:6;;;;;;;;;;;;3605:5;3566:26;:16;3585:7;3566:26;:::i;:::-;3555:38;;:7;:38;:::i;:::-;3554:57;;;;:::i;:::-;3547:64;3258:360;-1:-1:-1;;;3258:360:6:o;7082:141:2:-;7149:17;:15;:17::i;:::-;7144:73;;7189:17;;-1:-1:-1;;;7189:17:2;;;;;;;;;;;1980:235:1;6929:20:2;:18;:20::i;2457:308:5:-;2540:7;2582:4;2540:7;2596:134;2620:5;:12;2616:1;:16;2596:134;;;2668:51;2696:12;2710:5;2716:1;2710:8;;;;;;;;:::i;:::-;;;;;;;2668:27;:51::i;:::-;2653:66;-1:-1:-1;2634:3:5;;2596:134;;;-1:-1:-1;2746:12:5;2457:308;-1:-1:-1;;;2457:308:5:o;8485:120:2:-;8535:4;8558:26;:24;:26::i;:::-;:40;-1:-1:-1;;;8558:40:2;;;;;;-1:-1:-1;8485:120:2:o;504:167:4:-;579:7;609:1;605;:5;:59;;864:13;928:15;;;963:4;956:15;;;1009:4;993:21;;605:59;;;-1:-1:-1;864:13:4;928:15;;;963:4;956:15;1009:4;993:21;;;504:167::o;196:173:7:-;264:20;;-1:-1:-1;;;;;313:31:7;;303:42;;293:70;;359:1;356;349:12;293:70;196:173;;;:::o;374:186::-;433:6;486:2;474:9;465:7;461:23;457:32;454:52;;;502:1;499;492:12;454:52;525:29;544:9;525:29;:::i;939:397::-;1025:6;1033;1041;1049;1102:3;1090:9;1081:7;1077:23;1073:33;1070:53;;;1119:1;1116;1109:12;1070:53;1142:29;1161:9;1142:29;:::i;:::-;1132:39;;1218:2;1207:9;1203:18;1190:32;1180:42;;1241:38;1275:2;1264:9;1260:18;1241:38;:::i;:::-;939:397;;;;-1:-1:-1;1231:48:7;;1326:2;1311:18;1298:32;;-1:-1:-1;;939:397:7:o;1785:610::-;1871:6;1879;1932:2;1920:9;1911:7;1907:23;1903:32;1900:52;;;1948:1;1945;1938:12;1900:52;1988:9;1975:23;2021:18;2013:6;2010:30;2007:50;;;2053:1;2050;2043:12;2007:50;2076:22;;2129:4;2121:13;;2117:27;-1:-1:-1;2107:55:7;;2158:1;2155;2148:12;2107:55;2198:2;2185:16;2224:18;2216:6;2213:30;2210:50;;;2256:1;2253;2246:12;2210:50;2309:7;2304:2;2294:6;2291:1;2287:14;2283:2;2279:23;2275:32;2272:45;2269:65;;;2330:1;2327;2320:12;2269:65;2361:2;2353:11;;;;;2383:6;;-1:-1:-1;1785:610:7;-1:-1:-1;;;1785:610:7:o;3543:179::-;3621:13;;3674:22;3663:34;;3653:45;;3643:73;;3712:1;3709;3702:12;3727:571;3830:6;3838;3846;3854;3862;3915:3;3903:9;3894:7;3890:23;3886:33;3883:53;;;3932:1;3929;3922:12;3883:53;3955:39;3984:9;3955:39;:::i;:::-;4034:2;4019:18;;4013:25;4100:2;4085:18;;4079:25;4194:2;4179:18;;4173:25;3945:49;;-1:-1:-1;4013:25:7;;-1:-1:-1;4079:25:7;-1:-1:-1;4173:25:7;-1:-1:-1;4243:49:7;4287:3;4272:19;;4243:49;:::i;:::-;4233:59;;3727:571;;;;;;;;:::o;4303:265::-;4376:9;;;4407;;4424:15;;;4418:22;;4404:37;4394:168;;4484:10;4479:3;4475:20;4472:1;4465:31;4519:4;4516:1;4509:15;4547:4;4544:1;4537:15;4573:217;4613:1;4639;4629:132;;4683:10;4678:3;4674:20;4671:1;4664:31;4718:4;4715:1;4708:15;4746:4;4743:1;4736:15;4629:132;-1:-1:-1;4775:9:7;;4573:217::o;4795:127::-;4856:10;4851:3;4847:20;4844:1;4837:31;4887:4;4884:1;4877:15;4911:4;4908:1;4901:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "579600",
								"executionCost": "30235",
								"totalCost": "609835"
							},
							"external": {
								"claimStipend(bytes32[])": "infinite",
								"claimedStipends(address)": "2518",
								"initialize(address,uint256,address,bytes32)": "infinite",
								"merkleRoot()": "2317",
								"owner()": "2352",
								"priceFeed()": "2336",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "28431",
								"usdStipendAmount()": "2337",
								"withdraw()": "infinite"
							},
							"internal": {
								"convertUsdToEth(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1292,
									"end": 1345,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1316,
									"end": 1336,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "5"
								},
								{
									"begin": 1316,
									"end": 1338,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "tag",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 7709,
									"end": 8131,
									"name": "tag",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 7709,
									"end": 8131,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 3147,
									"end": 3213,
									"name": "PUSH",
									"source": 2,
									"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "PUSH",
									"source": 2,
									"value": "10000000000000000"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 7898,
									"end": 7913,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F92EE8A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7936,
									"end": 7959,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 7894,
									"end": 7970,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 7997,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 7983,
									"end": 8017,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "AND",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 8033,
									"end": 8066,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 158,
									"end": 208,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 158,
									"end": 208,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 158,
									"end": 208,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 146,
									"end": 148,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 131,
									"end": 149,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 8085,
									"end": 8114,
									"name": "LOG1",
									"source": 2
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "tag",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 7979,
									"end": 8125,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 7758,
									"end": 8131,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 7709,
									"end": 8131,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 214,
									"name": "tag",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 14,
									"end": 214,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 4192,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203ef0aff726233f8665610cb414e40943fb435c556ee5b979a0af1864612c80a864736f6c634300081c0033",
									".code": [
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "741BEF1A"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "741BEF1A"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "E65BF545"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "F32AE7DD"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "26317008"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "2EB4A7AB"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "3CCFD60B"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "5F761675"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3795,
											"end": 3846,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3836,
											"end": 3845,
											"modifierDepth": 1,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3824,
											"end": 3834,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3824,
											"end": 3834,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "9B4C4E3E326E807D75390CDFE8BCB2A5D0D15150DEE428B4880742C26D28B842"
										},
										{
											"begin": 3795,
											"end": 3846,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3795,
											"end": 3846,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 4192,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 572,
											"end": 619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 730,
											"end": 744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 730,
											"end": 744,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 723,
											"end": 745,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 705,
											"end": 746,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 705,
											"end": 746,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 693,
											"end": 695,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 678,
											"end": 696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 572,
											"end": 619,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 572,
											"end": 619,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 572,
											"end": 619,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 541,
											"end": 566,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 541,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 14,
											"end": 191,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 3914,
											"end": 4190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 497,
											"end": 535,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 535,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1533,
											"end": 1565,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1503,
											"end": 1505,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 497,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1341,
											"end": 1572,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 426,
											"end": 457,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 426,
											"end": 457,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 426,
											"end": 457,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2658,
											"end": 2820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 3914,
											"end": 4190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3989,
											"end": 4010,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 6
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 3986,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4049,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4049,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3989,
											"end": 4010,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4049,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4039,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4020,
											"end": 4082,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4100,
											"end": 4107,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B12D13EB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 4092,
											"end": 4129,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4183,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4155,
											"end": 4165,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4155,
											"end": 4165,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5"
										},
										{
											"begin": 4145,
											"end": 4183,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4145,
											"end": 4183,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 3953,
											"end": 4190,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3953,
											"end": 4190,
											"modifierDepth": 1,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3914,
											"end": 4190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4744,
											"end": 4758,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4785,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4788,
											"end": 4799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4803,
											"end": 4804,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4816,
											"end": 4820,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 4808,
											"end": 4833,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4854,
											"end": 4866,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4866,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4871,
											"end": 4883,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F92EE8A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4966,
											"end": 4967,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1585,
											"end": 1608,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 1585,
											"end": 1608,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "74F166B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 1577,
											"end": 1635,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1673,
											"end": 1674,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1653,
											"end": 1670,
											"modifierDepth": 1,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1653,
											"end": 1674,
											"modifierDepth": 1,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10E41573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 1645,
											"end": 1713,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1731,
											"end": 1755,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1731,
											"end": 1755,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3588063"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1723,
											"end": 1783,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1801,
											"end": 1812,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9DD854D3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 1793,
											"end": 1848,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 1874,
											"end": 1883,
											"modifierDepth": 1,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 1859,
											"end": 1873,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 1859,
											"end": 1884,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 1859,
											"end": 1884,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1895,
											"end": 1911,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1895,
											"end": 1931,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1950,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1986,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1941,
											"end": 1986,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2006,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2020,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2763,
											"end": 2813,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2763,
											"end": 2813,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2751,
											"end": 2753,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2736,
											"end": 2754,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "LOG1",
											"source": 2
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1403,
											"end": 2027,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 3246,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3219,
											"end": 3249,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3562,
											"end": 3563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1515,
											"end": 1566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 1341,
											"end": 1572,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3604,
											"end": 3612,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3585,
											"end": 3613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2331,
											"end": 2341,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2313,
											"end": 2328,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2375,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2360,
											"end": 2384,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2359,
											"end": 2384,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "93F5A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2351,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2421,
											"end": 2433,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2466,
											"end": 2482,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2466,
											"end": 2482,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3016,
											"end": 3048,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3016,
											"end": 3048,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2998,
											"end": 3049,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3065,
											"end": 3083,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3058,
											"end": 3092,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 2989,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2971,
											"end": 2989,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2446,
											"end": 2483,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2484,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2421,
											"end": 2484,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2421,
											"end": 2484,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 2551,
											"end": 2562,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2551,
											"end": 2562,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3232,
											"end": 3251,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2580,
											"end": 2590,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3267,
											"end": 3279,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3267,
											"end": 3279,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2608,
											"end": 2641,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 2515,
											"end": 2655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 2515,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "582F497D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 2494,
											"end": 2699,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2727,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2730,
											"end": 2745,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 2730,
											"end": 2763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 2730,
											"end": 2763,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2763,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2763,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2819,
											"end": 2828,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2815,
											"name": "SELFBALANCE",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2828,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2794,
											"end": 2828,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "786E0A99"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 2773,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3050,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3062,
											"end": 3066,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3066,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3116,
											"end": 3125,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3035,
											"end": 3059,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3077,
											"end": 3130,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3148,
											"end": 3155,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B12D13EB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3140,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3217,
											"end": 3233,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3217,
											"end": 3233,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3464,
											"end": 3489,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3520,
											"end": 3522,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3498,
											"end": 3532,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 6,
											"value": "4C153BD30BDA7744842DE8420E57CE83F3C500342B5E0363A5DAD7A9132B864A"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3437,
											"end": 3455,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3193,
											"end": 3245,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2303,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2240,
											"end": 3252,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3147,
											"end": 3213,
											"name": "PUSH",
											"source": 2,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 9186,
											"end": 9213,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 9186,
											"end": 9213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9171,
											"end": 9213,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9071,
											"end": 9276,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 1954,
											"end": 1966,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1953,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1929,
											"end": 1967,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "tag",
											"source": 1,
											"value": "106"
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 1,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3774,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1993,
											"end": 1997,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2045,
											"end": 2049,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "149"
										},
										{
											"begin": 2029,
											"end": 2034,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2036,
											"end": 2040,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2016,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 2016,
											"end": 2041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "tag",
											"source": 5,
											"value": "149"
										},
										{
											"begin": 2016,
											"end": 2041,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1902,
											"end": 2056,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1902,
											"end": 2056,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3346,
											"end": 3353,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3368,
											"end": 3380,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "AND",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3415,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3415,
											"name": "PUSH",
											"source": 6,
											"value": "FEAF968C"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "STATICCALL",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 3390,
											"end": 3417,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 3390,
											"end": 3417,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3365,
											"end": 3417,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3443,
											"end": 3444,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3440,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3435,
											"end": 3444,
											"name": "SGT",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "96187BD5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3427,
											"end": 3469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3605,
											"end": 3610,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 3566,
											"end": 3582,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3585,
											"end": 3592,
											"name": "PUSH",
											"source": 6,
											"value": "F4240"
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 3566,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 3566,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3555,
											"end": 3562,
											"name": "PUSH",
											"source": 6,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 3555,
											"end": 3593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 3555,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 3554,
											"end": 3611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 3554,
											"end": 3611,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3547,
											"end": 3611,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3258,
											"end": 3618,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3258,
											"end": 3618,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 7149,
											"end": 7166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1AFCD79F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "tag",
											"source": 1,
											"value": "144"
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "tag",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2540,
											"end": 2547,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2582,
											"end": 2586,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2540,
											"end": 2547,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 5,
											"value": "174"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2620,
											"end": 2625,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2620,
											"end": 2632,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2616,
											"end": 2617,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "175"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 2696,
											"end": 2708,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2715,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2716,
											"end": 2717,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 2710,
											"end": 2718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "tag",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2668,
											"end": 2695,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "181"
										},
										{
											"begin": 2668,
											"end": 2719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "tag",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 2668,
											"end": 2719,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2653,
											"end": 2719,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "174"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "tag",
											"source": 5,
											"value": "175"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2746,
											"end": 2758,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2765,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2457,
											"end": 2765,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "tag",
											"source": 2,
											"value": "165"
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8535,
											"end": 8539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 8558,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 8558,
											"end": 8584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8485,
											"end": 8605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 504,
											"end": 671,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 504,
											"end": 671,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 579,
											"end": 586,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 609,
											"end": 610,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 605,
											"end": 606,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 605,
											"end": 610,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 864,
											"end": 877,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 928,
											"end": 943,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 963,
											"end": 967,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 971,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 956,
											"end": 971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 956,
											"end": 971,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1009,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "160"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 864,
											"end": 877,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 928,
											"end": 943,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 928,
											"end": 943,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 928,
											"end": 943,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 963,
											"end": 967,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 971,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1009,
											"end": 1013,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 993,
											"end": 1014,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 504,
											"end": 671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 196,
											"end": 369,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 196,
											"end": 369,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 264,
											"end": 284,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 264,
											"end": 284,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 313,
											"end": 344,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 313,
											"end": 344,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 303,
											"end": 345,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 303,
											"end": 345,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 293,
											"end": 363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 359,
											"end": 360,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 357,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 349,
											"end": 361,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 293,
											"end": 363,
											"name": "tag",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 293,
											"end": 363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 196,
											"end": 369,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 196,
											"end": 369,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 196,
											"end": 369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 374,
											"end": 560,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 374,
											"end": 560,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 433,
											"end": 439,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 486,
											"end": 488,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 474,
											"end": 483,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 465,
											"end": 472,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 461,
											"end": 484,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 457,
											"end": 489,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 454,
											"end": 506,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 454,
											"end": 506,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 454,
											"end": 506,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 502,
											"end": 503,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 499,
											"end": 500,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 492,
											"end": 504,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 454,
											"end": 506,
											"name": "tag",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 454,
											"end": 506,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 525,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 544,
											"end": 553,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 525,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 525,
											"end": 554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1025,
											"end": 1031,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1039,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1041,
											"end": 1047,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1049,
											"end": 1055,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1102,
											"end": 1105,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1090,
											"end": 1099,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1081,
											"end": 1088,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1100,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1073,
											"end": 1106,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1119,
											"end": 1120,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1116,
											"end": 1117,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1109,
											"end": 1121,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "tag",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 1070,
											"end": 1123,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1161,
											"end": 1170,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 1142,
											"end": 1171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "tag",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 1142,
											"end": 1171,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1132,
											"end": 1171,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1132,
											"end": 1171,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1218,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1207,
											"end": 1216,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1203,
											"end": 1221,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1190,
											"end": 1222,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1180,
											"end": 1222,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1180,
											"end": 1222,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "205"
										},
										{
											"begin": 1275,
											"end": 1277,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1264,
											"end": 1273,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1260,
											"end": 1278,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 1241,
											"end": 1279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "tag",
											"source": 7,
											"value": "205"
										},
										{
											"begin": 1241,
											"end": 1279,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 939,
											"end": 1336,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1231,
											"end": 1279,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1279,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1326,
											"end": 1328,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1311,
											"end": 1329,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1298,
											"end": 1330,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1298,
											"end": 1330,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 939,
											"end": 1336,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1871,
											"end": 1877,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1879,
											"end": 1885,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1920,
											"end": 1929,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1911,
											"end": 1918,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1907,
											"end": 1930,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1903,
											"end": 1935,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1948,
											"end": 1949,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1946,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1938,
											"end": 1950,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 1900,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1988,
											"end": 1997,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1975,
											"end": 1998,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2021,
											"end": 2039,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2013,
											"end": 2019,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2010,
											"end": 2040,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2054,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2050,
											"end": 2051,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2043,
											"end": 2055,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "tag",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 2007,
											"end": 2057,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2076,
											"end": 2098,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2076,
											"end": 2098,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2129,
											"end": 2133,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2121,
											"end": 2134,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2121,
											"end": 2134,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2144,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2159,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2155,
											"end": 2156,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2148,
											"end": 2160,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "tag",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 2107,
											"end": 2162,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2200,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2185,
											"end": 2201,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2224,
											"end": 2242,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2213,
											"end": 2243,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2256,
											"end": 2257,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2253,
											"end": 2254,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2246,
											"end": 2258,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 2210,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2309,
											"end": 2316,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2304,
											"end": 2306,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2294,
											"end": 2300,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2292,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 2287,
											"end": 2301,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2283,
											"end": 2285,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2279,
											"end": 2302,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2275,
											"end": 2307,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2272,
											"end": 2317,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2330,
											"end": 2331,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2327,
											"end": 2328,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2320,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "tag",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 2269,
											"end": 2334,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2361,
											"end": 2363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2353,
											"end": 2364,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 2395,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1785,
											"end": 2395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3543,
											"end": 3722,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 3543,
											"end": 3722,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3621,
											"end": 3634,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3621,
											"end": 3634,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3696,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3663,
											"end": 3697,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3663,
											"end": 3697,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3698,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3698,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3643,
											"end": 3716,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 3643,
											"end": 3716,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3712,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3710,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3702,
											"end": 3714,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3830,
											"end": 3836,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3838,
											"end": 3844,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3846,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3854,
											"end": 3860,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3862,
											"end": 3868,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 3903,
											"end": 3912,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3890,
											"end": 3913,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3886,
											"end": 3919,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3932,
											"end": 3933,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3922,
											"end": 3934,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "tag",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 3883,
											"end": 3936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 3984,
											"end": 3993,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 3955,
											"end": 3994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 3955,
											"end": 3994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4034,
											"end": 4036,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4019,
											"end": 4037,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4100,
											"end": 4102,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4085,
											"end": 4103,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 4085,
											"end": 4103,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4079,
											"end": 4104,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4194,
											"end": 4196,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4173,
											"end": 4198,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3945,
											"end": 3994,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3945,
											"end": 3994,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4013,
											"end": 4038,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4079,
											"end": 4104,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4173,
											"end": 4198,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 4287,
											"end": 4290,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 4272,
											"end": 4291,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4272,
											"end": 4291,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 4243,
											"end": 4292,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "tag",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 4243,
											"end": 4292,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4233,
											"end": 4292,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4233,
											"end": 4292,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3727,
											"end": 4298,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4303,
											"end": 4568,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 4303,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4376,
											"end": 4385,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4407,
											"end": 4416,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4407,
											"end": 4416,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4424,
											"end": 4439,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4418,
											"end": 4440,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4418,
											"end": 4440,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4404,
											"end": 4441,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 4394,
											"end": 4562,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 4394,
											"end": 4562,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4484,
											"end": 4494,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 4479,
											"end": 4482,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 4475,
											"end": 4495,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4472,
											"end": 4473,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4465,
											"end": 4496,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4519,
											"end": 4523,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 4516,
											"end": 4517,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4509,
											"end": 4524,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4551,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4544,
											"end": 4545,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4537,
											"end": 4552,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4573,
											"end": 4790,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 4573,
											"end": 4790,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4614,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4639,
											"end": 4640,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4683,
											"end": 4693,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 4678,
											"end": 4681,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 4674,
											"end": 4694,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4671,
											"end": 4672,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4664,
											"end": 4695,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4718,
											"end": 4722,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 4715,
											"end": 4716,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4708,
											"end": 4723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4746,
											"end": 4750,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4743,
											"end": 4744,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4736,
											"end": 4751,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "tag",
											"source": 7,
											"value": "228"
										},
										{
											"begin": 4629,
											"end": 4761,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4775,
											"end": 4784,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4775,
											"end": 4784,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4573,
											"end": 4790,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4795,
											"end": 4922,
											"name": "tag",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 4795,
											"end": 4922,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4856,
											"end": 4866,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 4851,
											"end": 4854,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 4847,
											"end": 4867,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4844,
											"end": 4845,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4887,
											"end": 4891,
											"name": "PUSH",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 4884,
											"end": 4885,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4877,
											"end": 4892,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4911,
											"end": 4915,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4908,
											"end": 4909,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4901,
											"end": 4916,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/ScholarshipDispenser.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"claimStipend(bytes32[])": "f32ae7dd",
							"claimedStipends(address)": "26317008",
							"initialize(address,uint256,address,bytes32)": "5f761675",
							"merkleRoot()": "2eb4a7ab",
							"owner()": "8da5cb5b",
							"priceFeed()": "741bef1a",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"usdStipendAmount()": "e65bf545",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDirectorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StipendAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StipendAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectorFundedStipendPayouts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"StipendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimStipend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedStipends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_director\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdStipendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdStipendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"claimStipend(bytes32[])\":{\"params\":{\"merkleProof\":\"The Merkle proof that verifies the student's eligibility\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address,uint256,address,bytes32)\":{\"custom:oz-upgrades-validate-as-initializer\":\"\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimStipend(bytes32[])\":{\"notice\":\"This function allows students to claim their stipend if they are included in the Merkle tree\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ScholarshipDispenser.sol\":\"ScholarshipDispenser\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d39e11b1dc7b9b8ccdabbc9be442ab7cda4a81c748f57e316dcb1bcb4a28bf9\",\"dweb:/ipfs/QmaG6vz6W6iEUBsbHSBob5mdcitYxWjoygxREHpsJHfWrS\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"src/ScholarshipDispenser.sol\":{\"keccak256\":\"0x97e36b2bf685ea1541d3b65e8b34ed6e6e23eaaa1f5bcf355a87cd26be909096\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1f8aebd50c4b005a094a89b6e25cfb4d2697447386c3b3ef5f19184671df6d25\",\"dweb:/ipfs/QmYKxp9rDrmCsXbNvqee1qVfd6MJz4Vbb5dR9cXpabsHP1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1679,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "usdStipendAmount",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1682,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "priceFeed",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(AggregatorV3Interface)45"
							},
							{
								"astId": 1684,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "2",
								"type": "t_bytes32"
							},
							{
								"astId": 1688,
								"contract": "src/ScholarshipDispenser.sol:ScholarshipDispenser",
								"label": "claimedStipends",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(AggregatorV3Interface)45": {
								"encoding": "inplace",
								"label": "contract AggregatorV3Interface",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"claimStipend(bytes32[])": {
								"notice": "This function allows students to claim their stipend if they are included in the Merkle tree"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
					"exportedSymbols": {
						"AggregatorV3Interface": [
							45
						]
					},
					"id": 46,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AggregatorV3Interface",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 45,
							"linearizedBaseContracts": [
								45
							],
							"name": "AggregatorV3Interface",
							"nameLocation": "120:21:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "313ce567",
									"id": 6,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "155:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "163:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "189:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "189:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "188:7:0"
									},
									"scope": 45,
									"src": "146:50:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7284e416",
									"id": 11,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "description",
									"nameLocation": "209:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "220:2:0"
									},
									"returnParameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "246:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 8,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "246:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "245:15:0"
									},
									"scope": 45,
									"src": "200:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "54fd4d50",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "version",
									"nameLocation": "274:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "307:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:0"
									},
									"scope": 45,
									"src": "265:51:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "9a6fc8f5",
									"id": 31,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoundData",
									"nameLocation": "329:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "_roundId",
												"nameLocation": "354:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "347:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 17,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "347:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:25:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "roundId",
												"nameLocation": "397:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "390:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 20,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "390:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "413:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "406:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 22,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "406:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "startedAt",
												"nameLocation": "429:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "421:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "421:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "updatedAt",
												"nameLocation": "448:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "440:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 26,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "answeredInRound",
												"nameLocation": "466:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "459:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 28,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "459:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "389:93:0"
									},
									"scope": 45,
									"src": "320:163:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "feaf968c",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "latestRoundData",
									"nameLocation": "496:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "511:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "roundId",
												"nameLocation": "556:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "549:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 33,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "549:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "572:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "565:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 35,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "565:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "startedAt",
												"nameLocation": "588:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "580:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "updatedAt",
												"nameLocation": "607:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "599:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "599:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "answeredInRound",
												"nameLocation": "625:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "618:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint80",
													"typeString": "uint80"
												},
												"typeName": {
													"id": 41,
													"name": "uint80",
													"nodeType": "ElementaryTypeName",
													"src": "618:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint80",
														"typeString": "uint80"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:93:0"
									},
									"scope": 45,
									"src": "487:155:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 46,
							"src": "110:534:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:613:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							554
						],
						"Initializable": [
							508
						],
						"OwnableUpgradeable": [
							240
						]
					},
					"id": 241,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 47,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:1"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 49,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 241,
							"sourceUnit": 555,
							"src": "128:67:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 48,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 554,
										"src": "136:18:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 51,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 241,
							"sourceUnit": 509,
							"src": "196:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 50,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 508,
										"src": "204:13:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 53,
										"name": "Initializable",
										"nameLocations": [
											"789:13:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 508,
										"src": "789:13:1"
									},
									"id": 54,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:1"
								},
								{
									"baseName": {
										"id": 55,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 554,
										"src": "804:18:1"
									},
									"id": 56,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:1"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 52,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 240,
							"linearizedBaseContracts": [
								240,
								554,
								508
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:1",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 60,
									"members": [
										{
											"constant": false,
											"id": 59,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 60,
											"src": "931:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 58,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:1",
									"nodeType": "StructDefinition",
									"scope": 240,
									"src": "899:53:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 63,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:1",
									"nodeType": "VariableDeclaration",
									"scope": 240,
									"src": "1069:116:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 61,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 62,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 70,
										"nodeType": "Block",
										"src": "1270:81:1",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1289:56:1",
													"nodeType": "YulBlock",
													"src": "1289:56:1",
													"statements": [
														{
															"nativeSrc": "1303:32:1",
															"nodeType": "YulAssignment",
															"src": "1303:32:1",
															"value": {
																"name": "OwnableStorageLocation",
																"nativeSrc": "1313:22:1",
																"nodeType": "YulIdentifier",
																"src": "1313:22:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1303:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 67,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 63,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:1",
														"valueSize": 1
													}
												],
												"id": 69,
												"nodeType": "InlineAssembly",
												"src": "1280:65:1"
											}
										]
									},
									"id": 71,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:1"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "1244:24:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 66,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 65,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 60,
														"src": "1244:14:1"
													},
													"referencedDeclaration": 60,
													"src": "1244:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:1"
									},
									"scope": 240,
									"src": "1192:159:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:1",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 76,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "1480:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:1"
									},
									"src": "1447:50:1"
								},
								{
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:1",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 81,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "1616:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 78,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:1"
									},
									"src": "1590:41:1"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 87,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "1664:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "1695:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:1"
									},
									"src": "1637:84:1"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "1919:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "1954:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 95,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 127,
														"src": "1929:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:1"
											}
										]
									},
									"documentation": {
										"id": 88,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:1",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 93,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 92,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "1902:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:1"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "1871:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 89,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:1"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:1"
									},
									"scope": 240,
									"src": "1847:127:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 126,
										"nodeType": "Block",
										"src": "2062:153:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 107,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 102,
														"src": "2076:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 108,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 111,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 121,
												"nodeType": "IfStatement",
												"src": "2072:95:1",
												"trueBody": {
													"id": 120,
													"nodeType": "Block",
													"src": "2104:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 116,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 115,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 114,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 113,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 81,
																	"src": "2125:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 119,
															"nodeType": "RevertStatement",
															"src": "2118:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 123,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 102,
															"src": "2195:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 122,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "2176:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 125,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:1"
											}
										]
									},
									"id": 127,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 105,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 104,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "2045:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:1"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "2014:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:1"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:1"
									},
									"scope": 240,
									"src": "1980:235:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "2324:41:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 130,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "2334:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:1"
											},
											{
												"id": 133,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:1"
											}
										]
									},
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 135,
									"name": "onlyOwner",
									"nameLocation": "2312:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:1"
									},
									"src": "2303:62:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 150,
										"nodeType": "Block",
										"src": "2496:89:1",
										"statements": [
											{
												"assignments": [
													143
												],
												"declarations": [
													{
														"constant": false,
														"id": 143,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 150,
														"src": "2506:24:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 142,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 141,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 60,
																"src": "2506:14:1"
															},
															"referencedDeclaration": 60,
															"src": "2506:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 144,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "2533:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$60_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:1"
											},
											{
												"expression": {
													"expression": {
														"id": 147,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2570:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 148,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:1",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 59,
													"src": "2570:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 140,
												"id": 149,
												"nodeType": "Return",
												"src": "2563:15:1"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:1"
									},
									"returnParameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "2487:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:1"
									},
									"scope": 240,
									"src": "2441:144:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 167,
										"nodeType": "Block",
										"src": "2703:117:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 155,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "2717:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 157,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "2728:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 158,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 166,
												"nodeType": "IfStatement",
												"src": "2713:101:1",
												"trueBody": {
													"id": 165,
													"nodeType": "Block",
													"src": "2742:72:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 161,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "2790:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 160,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 76,
																	"src": "2763:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 164,
															"nodeType": "RevertStatement",
															"src": "2756:47:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:1"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:1"
									},
									"scope": 240,
									"src": "2658:162:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "3209:47:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 175,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 178,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 174,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "3219:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:1"
											}
										]
									},
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 172,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 171,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3199:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:1"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:1"
									},
									"scope": 240,
									"src": "3155:101:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 209,
										"nodeType": "Block",
										"src": "3475:145:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 190,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "3489:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 191,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 204,
												"nodeType": "IfStatement",
												"src": "3485:91:1",
												"trueBody": {
													"id": 203,
													"nodeType": "Block",
													"src": "3513:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 199,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 198,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 197,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 200,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 196,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 81,
																	"src": "3534:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 202,
															"nodeType": "RevertStatement",
															"src": "3527:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 206,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 185,
															"src": "3604:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 205,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 239,
														"src": "3585:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 208,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:1"
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 210,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 188,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 187,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3465:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:1"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "3432:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:1"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:1"
									},
									"scope": 240,
									"src": "3405:215:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "3837:185:1",
										"statements": [
											{
												"assignments": [
													218
												],
												"declarations": [
													{
														"constant": false,
														"id": 218,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 238,
														"src": "3847:24:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 217,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 216,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 60,
																"src": "3847:14:1"
															},
															"referencedDeclaration": 60,
															"src": "3847:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 221,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 219,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 71,
														"src": "3874:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$60_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:1"
											},
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 238,
														"src": "3904:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 226,
												"initialValue": {
													"expression": {
														"id": 224,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "3923:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 225,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:1",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 59,
													"src": "3923:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:1"
											},
											{
												"expression": {
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 227,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "3941:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$60_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 229,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:1",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 59,
														"src": "3941:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 230,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "3952:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 234,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "3996:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 235,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "4006:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 233,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "3975:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "EmitStatement",
												"src": "3970:45:1"
											}
										]
									},
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3802:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:1"
									},
									"scope": 240,
									"src": "3774:248:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 241,
							"src": "749:3275:1",
							"usedErrors": [
								76,
								81,
								257,
								260
							],
							"usedEvents": [
								87,
								265
							]
						}
					],
					"src": "102:3923:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							508
						]
					},
					"id": 509,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 242,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 243,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:2",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 508,
							"linearizedBaseContracts": [
								508
							],
							"name": "Initializable",
							"nameLocation": "2367:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:2",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 251,
									"members": [
										{
											"constant": false,
											"id": 247,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:2",
											"nodeType": "VariableDeclaration",
											"scope": 251,
											"src": "2813:19:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 246,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 250,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:2",
											"nodeType": "VariableDeclaration",
											"scope": 251,
											"src": "2950:18:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 249,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:2",
									"nodeType": "StructDefinition",
									"scope": 508,
									"src": "2685:290:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 254,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:2",
									"nodeType": "VariableDeclaration",
									"scope": 508,
									"src": "3098:115:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 252,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 253,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:2",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 257,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:2"
									},
									"src": "3285:30:2"
								},
								{
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:2",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 260,
									"name": "NotInitializing",
									"nameLocation": "3389:15:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:2"
									},
									"src": "3383:24:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:2",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 265,
									"name": "Initialized",
									"nameLocation": "3514:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3526:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 262,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:2"
									},
									"src": "3508:34:2"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "4092:1079:2",
										"statements": [
											{
												"assignments": [
													270
												],
												"declarations": [
													{
														"constant": false,
														"id": 270,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4158:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 269,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 268,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "4158:20:2"
															},
															"referencedDeclaration": 251,
															"src": "4158:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 273,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 271,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "4191:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:2"
											},
											{
												"assignments": [
													275
												],
												"declarations": [
													{
														"constant": false,
														"id": 275,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4279:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 274,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 279,
												"initialValue": {
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:2",
													"subExpression": {
														"expression": {
															"id": 276,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "4302:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 277,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "4302:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:2"
											},
											{
												"assignments": [
													281
												],
												"declarations": [
													{
														"constant": false,
														"id": 281,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4327:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 280,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 284,
												"initialValue": {
													"expression": {
														"id": 282,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 270,
														"src": "4348:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 283,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:2",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 247,
													"src": "4348:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:2"
											},
											{
												"assignments": [
													286
												],
												"declarations": [
													{
														"constant": false,
														"id": 286,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4709:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4704:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 285,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4704:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 289,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 287,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4724:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4739:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4724:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 290,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 275,
														"src": "4744:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4724:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4704:54:2"
											},
											{
												"assignments": [
													294
												],
												"declarations": [
													{
														"constant": false,
														"id": 294,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4773:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 347,
														"src": "4768:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 293,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4768:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 307,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 295,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4788:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4803:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4788:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 300,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4816:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$508",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$508",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4808:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 298,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4808:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4808:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4822:4:2",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4808:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4827:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4808:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 304,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4837:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4808:30:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4788:50:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4768:70:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 309,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4853:13:2",
														"subExpression": {
															"id": 308,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "4854:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4870:13:2",
														"subExpression": {
															"id": 310,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 294,
															"src": "4871:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4853:30:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 317,
												"nodeType": "IfStatement",
												"src": "4849:91:2",
												"trueBody": {
													"id": 316,
													"nodeType": "Block",
													"src": "4885:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 313,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "4906:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 314,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4906:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 315,
															"nodeType": "RevertStatement",
															"src": "4899:30:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 318,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "4949:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 320,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4951:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "4949:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 321,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4966:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4949:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "4949:18:2"
											},
											{
												"condition": {
													"id": 324,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 275,
													"src": "4981:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 332,
												"nodeType": "IfStatement",
												"src": "4977:67:2",
												"trueBody": {
													"id": 331,
													"nodeType": "Block",
													"src": "4997:47:2",
													"statements": [
														{
															"expression": {
																"id": 329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 325,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 270,
																		"src": "5011:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 327,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5013:13:2",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 250,
																	"src": "5011:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5029:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5011:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 330,
															"nodeType": "ExpressionStatement",
															"src": "5011:22:2"
														}
													]
												}
											},
											{
												"id": 333,
												"nodeType": "PlaceholderStatement",
												"src": "5053:1:2"
											},
											{
												"condition": {
													"id": 334,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 275,
													"src": "5068:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 346,
												"nodeType": "IfStatement",
												"src": "5064:101:2",
												"trueBody": {
													"id": 345,
													"nodeType": "Block",
													"src": "5084:81:2",
													"statements": [
														{
															"expression": {
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 335,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 270,
																		"src": "5098:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 337,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5100:13:2",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 250,
																	"src": "5098:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5116:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5098:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 340,
															"nodeType": "ExpressionStatement",
															"src": "5098:23:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5152:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 341,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "5140:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5140:14:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 344,
															"nodeType": "EmitStatement",
															"src": "5135:19:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:2",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 348,
									"name": "initializer",
									"nameLocation": "4078:11:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:2"
									},
									"src": "4069:1102:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "6289:392:2",
										"statements": [
											{
												"assignments": [
													355
												],
												"declarations": [
													{
														"constant": false,
														"id": 355,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6384:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 394,
														"src": "6355:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 354,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 353,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6355:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "6355:20:2"
															},
															"referencedDeclaration": 251,
															"src": "6355:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 358,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 356,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "6388:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6388:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6355:59:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 359,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6429:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 360,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6431:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6429:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 364,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 361,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 355,
																"src": "6448:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 362,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6450:12:2",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 247,
															"src": "6448:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 363,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "6466:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6448:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6429:44:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 370,
												"nodeType": "IfStatement",
												"src": "6425:105:2",
												"trueBody": {
													"id": 369,
													"nodeType": "Block",
													"src": "6475:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 366,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "6496:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6496:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 368,
															"nodeType": "RevertStatement",
															"src": "6489:30:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 371,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6539:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 373,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6541:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "6539:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 374,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "6556:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6539:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "6539:24:2"
											},
											{
												"expression": {
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 377,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6573:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 379,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6575:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6573:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 380,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6591:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6573:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "6573:22:2"
											},
											{
												"id": 383,
												"nodeType": "PlaceholderStatement",
												"src": "6605:1:2"
											},
											{
												"expression": {
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 384,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 355,
															"src": "6616:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 386,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6618:13:2",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 250,
														"src": "6616:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6634:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6616:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 389,
												"nodeType": "ExpressionStatement",
												"src": "6616:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 391,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "6666:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 390,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 265,
														"src": "6654:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6654:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 393,
												"nodeType": "EmitStatement",
												"src": "6649:25:2"
											}
										]
									},
									"documentation": {
										"id": 349,
										"nodeType": "StructuredDocumentation",
										"src": "5177:1068:2",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 395,
									"name": "reinitializer",
									"nameLocation": "6259:13:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6280:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "6273:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 350,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6273:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:16:2"
									},
									"src": "6250:431:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "6919:48:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 398,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "6929:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6929:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "6929:20:2"
											},
											{
												"id": 401,
												"nodeType": "PlaceholderStatement",
												"src": "6959:1:2"
											}
										]
									},
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "6687:199:2",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 403,
									"name": "onlyInitializing",
									"nameLocation": "6900:16:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6916:2:2"
									},
									"src": "6891:76:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "7134:89:2",
										"statements": [
											{
												"condition": {
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7148:18:2",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 407,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "7149:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7149:17:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "7144:73:2",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "7168:49:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 410,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "7189:15:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7189:17:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 412,
															"nodeType": "RevertStatement",
															"src": "7182:24:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "6973:104:2",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7091:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7109:2:2"
									},
									"returnParameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7134:0:2"
									},
									"scope": 508,
									"src": "7082:141:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "7758:373:2",
										"statements": [
											{
												"assignments": [
													422
												],
												"declarations": [
													{
														"constant": false,
														"id": 422,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7853:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 461,
														"src": "7824:30:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 421,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 420,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7824:20:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 251,
																"src": "7824:20:2"
															},
															"referencedDeclaration": 251,
															"src": "7824:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 425,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 423,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "7857:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7857:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7824:59:2"
											},
											{
												"condition": {
													"expression": {
														"id": 426,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "7898:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 427,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7900:13:2",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 250,
													"src": "7898:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 432,
												"nodeType": "IfStatement",
												"src": "7894:76:2",
												"trueBody": {
													"id": 431,
													"nodeType": "Block",
													"src": "7915:55:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 428,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "7936:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 429,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7936:23:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 430,
															"nodeType": "RevertStatement",
															"src": "7929:30:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 433,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "7983:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7985:12:2",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 247,
														"src": "7983:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8006:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 436,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8006:6:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 435,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8001:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8001:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 439,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8014:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8001:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7983:34:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 460,
												"nodeType": "IfStatement",
												"src": "7979:146:2",
												"trueBody": {
													"id": 459,
													"nodeType": "Block",
													"src": "8019:106:2",
													"statements": [
														{
															"expression": {
																"id": 449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 441,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 422,
																		"src": "8033:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 443,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8035:12:2",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 247,
																	"src": "8033:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 446,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8055:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 445,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8055:6:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 444,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8050:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 447,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8050:12:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8063:3:2",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8050:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8033:33:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 450,
															"nodeType": "ExpressionStatement",
															"src": "8033:33:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 454,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8102:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 453,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8102:6:2",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 452,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8097:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8097:12:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8110:3:2",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8097:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 451,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "8085:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8085:29:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 458,
															"nodeType": "EmitStatement",
															"src": "8080:34:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "7229:475:2",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7718:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7738:2:2"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7758:0:2"
									},
									"scope": 508,
									"src": "7709:422:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "8306:63:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 468,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 507,
															"src": "8323:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8323:26:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8350:12:2",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 247,
													"src": "8323:39:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 467,
												"id": 471,
												"nodeType": "Return",
												"src": "8316:46:2"
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "8137:99:2",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8250:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8272:2:2"
									},
									"returnParameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "8298:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 465,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8298:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8297:8:2"
									},
									"scope": 508,
									"src": "8241:128:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "8541:64:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 479,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 507,
															"src": "8558:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$251_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8558:26:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8585:13:2",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 250,
													"src": "8558:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 478,
												"id": 482,
												"nodeType": "Return",
												"src": "8551:47:2"
											}
										]
									},
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "8375:105:2",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8494:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8509:2:2"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "8535:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 476,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8535:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:6:2"
									},
									"scope": 508,
									"src": "8485:120:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "8896:45:2",
										"statements": [
											{
												"expression": {
													"id": 490,
													"name": "INITIALIZABLE_STORAGE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 254,
													"src": "8913:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 489,
												"id": 491,
												"nodeType": "Return",
												"src": "8906:28:2"
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "8611:203:2",
										"text": " @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n NOTE: Consider following the ERC-7201 formula to derive storage locations."
									},
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initializableStorageSlot",
									"nameLocation": "8828:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8853:2:2"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "8887:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 487,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8886:9:2"
									},
									"scope": 508,
									"src": "8819:122:2",
									"stateMutability": "pure",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "9161:115:2",
										"statements": [
											{
												"assignments": [
													501
												],
												"declarations": [
													{
														"constant": false,
														"id": 501,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "9179:4:2",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "9171:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 500,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 502,
														"name": "_initializableStorageSlot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "9186:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:42:2"
											},
											{
												"AST": {
													"nativeSrc": "9232:38:2",
													"nodeType": "YulBlock",
													"src": "9232:38:2",
													"statements": [
														{
															"nativeSrc": "9246:14:2",
															"nodeType": "YulAssignment",
															"src": "9246:14:2",
															"value": {
																"name": "slot",
																"nativeSrc": "9256:4:2",
																"nodeType": "YulIdentifier",
																"src": "9256:4:2"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "9246:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "9246:6:2"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 498,
														"isOffset": false,
														"isSlot": true,
														"src": "9246:6:2",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 501,
														"isOffset": false,
														"isSlot": false,
														"src": "9256:4:2",
														"valueSize": 1
													}
												],
												"id": 505,
												"nodeType": "InlineAssembly",
												"src": "9223:47:2"
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "8947:67:2",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "9080:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9104:2:2"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "9158:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "9129:30:2",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 497,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 496,
														"name": "InitializableStorage",
														"nameLocations": [
															"9129:20:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 251,
														"src": "9129:20:2"
													},
													"referencedDeclaration": 251,
													"src": "9129:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$251_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9128:32:2"
									},
									"scope": 508,
									"src": "9071:205:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 509,
							"src": "2349:6929:2",
							"usedErrors": [
								257,
								260
							],
							"usedEvents": [
								265
							]
						}
					],
					"src": "113:9166:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							554
						],
						"Initializable": [
							508
						]
					},
					"id": 555,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 510,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 512,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 555,
							"sourceUnit": 509,
							"src": "126:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 511,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 508,
										"src": "134:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 514,
										"name": "Initializable",
										"nameLocations": [
											"728:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 508,
										"src": "728:13:3"
									},
									"id": 515,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:3"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 513,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 554,
							"linearizedBaseContracts": [
								554,
								508
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 520,
										"nodeType": "Block",
										"src": "800:7:3",
										"statements": []
									},
									"id": 521,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 518,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 517,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "783:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:3"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:3"
									},
									"returnParameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:3"
									},
									"scope": 554,
									"src": "748:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 526,
										"nodeType": "Block",
										"src": "875:7:3",
										"statements": []
									},
									"id": 527,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 524,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 523,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 403,
												"src": "858:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:3"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:3"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:3"
									},
									"scope": 554,
									"src": "813:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 535,
										"nodeType": "Block",
										"src": "949:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 532,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 531,
												"id": 534,
												"nodeType": "Return",
												"src": "959:17:3"
											}
										]
									},
									"id": 536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:3"
									},
									"returnParameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "940:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:3"
									},
									"scope": 554,
									"src": "887:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "1056:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 541,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:3",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 540,
												"id": 543,
												"nodeType": "Return",
												"src": "1066:15:3"
											}
										]
									},
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:3"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "1040:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 538,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:3"
									},
									"scope": 554,
									"src": "989:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "1166:25:3",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 549,
												"id": 551,
												"nodeType": "Return",
												"src": "1176:8:3"
											}
										]
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:3"
									},
									"returnParameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "1157:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:3"
									},
									"scope": 554,
									"src": "1094:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 555,
							"src": "688:505:3",
							"usedErrors": [
								257,
								260
							],
							"usedEvents": [
								265
							]
						}
					],
					"src": "101:1093:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
					"exportedSymbols": {
						"Hashes": [
							594
						]
					},
					"id": 595,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 556,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Hashes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 557,
								"nodeType": "StructuredDocumentation",
								"src": "139:81:4",
								"text": " @dev Library of standard hash functions.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 594,
							"linearizedBaseContracts": [
								594
							],
							"name": "Hashes",
							"nameLocation": "229:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "588:83:4",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 569,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 567,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "605:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 568,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "609:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "605:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 575,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "659:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 576,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "662:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 574,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "640:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "640:24:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "605:59:4",
													"trueExpression": {
														"arguments": [
															{
																"id": 571,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "632:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 572,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "635:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 570,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "613:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "613:24:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 566,
												"id": 579,
												"nodeType": "Return",
												"src": "598:66:4"
											}
										]
									},
									"documentation": {
										"id": 558,
										"nodeType": "StructuredDocumentation",
										"src": "242:257:4",
										"text": " @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "commutativeKeccak256",
									"nameLocation": "513:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "542:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "534:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 559,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "534:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "553:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "545:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 561,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "533:22:4"
									},
									"returnParameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "579:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 564,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "579:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "578:9:4"
									},
									"scope": 594,
									"src": "504:167:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 592,
										"nodeType": "Block",
										"src": "879:151:4",
										"statements": [
											{
												"AST": {
													"nativeSrc": "914:110:4",
													"nodeType": "YulBlock",
													"src": "914:110:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "935:4:4",
																		"nodeType": "YulLiteral",
																		"src": "935:4:4",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nativeSrc": "941:1:4",
																		"nodeType": "YulIdentifier",
																		"src": "941:1:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "928:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "928:6:4"
																},
																"nativeSrc": "928:15:4",
																"nodeType": "YulFunctionCall",
																"src": "928:15:4"
															},
															"nativeSrc": "928:15:4",
															"nodeType": "YulExpressionStatement",
															"src": "928:15:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "963:4:4",
																		"nodeType": "YulLiteral",
																		"src": "963:4:4",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nativeSrc": "969:1:4",
																		"nodeType": "YulIdentifier",
																		"src": "969:1:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "956:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "956:6:4"
																},
																"nativeSrc": "956:15:4",
																"nodeType": "YulFunctionCall",
																"src": "956:15:4"
															},
															"nativeSrc": "956:15:4",
															"nodeType": "YulExpressionStatement",
															"src": "956:15:4"
														},
														{
															"nativeSrc": "984:30:4",
															"nodeType": "YulAssignment",
															"src": "984:30:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1003:4:4",
																		"nodeType": "YulLiteral",
																		"src": "1003:4:4",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1009:4:4",
																		"nodeType": "YulLiteral",
																		"src": "1009:4:4",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "993:9:4",
																	"nodeType": "YulIdentifier",
																	"src": "993:9:4"
																},
																"nativeSrc": "993:21:4",
																"nodeType": "YulFunctionCall",
																"src": "993:21:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "984:5:4",
																	"nodeType": "YulIdentifier",
																	"src": "984:5:4"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 584,
														"isOffset": false,
														"isSlot": false,
														"src": "941:1:4",
														"valueSize": 1
													},
													{
														"declaration": 586,
														"isOffset": false,
														"isSlot": false,
														"src": "969:1:4",
														"valueSize": 1
													},
													{
														"declaration": 589,
														"isOffset": false,
														"isSlot": false,
														"src": "984:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 591,
												"nodeType": "InlineAssembly",
												"src": "889:135:4"
											}
										]
									},
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "677:109:4",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "efficientKeccak256",
									"nameLocation": "800:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "827:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "819:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 583,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "838:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "830:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 585,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "830:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:22:4"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "872:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "864:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 588,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "864:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "863:15:4"
									},
									"scope": 594,
									"src": "791:239:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 595,
							"src": "221:811:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "113:920:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"Hashes": [
							594
						],
						"MerkleProof": [
							1667
						]
					},
					"id": 1668,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 596,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "206:24:5"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
							"file": "./Hashes.sol",
							"id": 598,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1668,
							"sourceUnit": 595,
							"src": "232:36:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 597,
										"name": "Hashes",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 594,
										"src": "240:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 599,
								"nodeType": "StructuredDocumentation",
								"src": "270:1082:5",
								"text": " @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."
							},
							"fullyImplemented": true,
							"id": 1667,
							"linearizedBaseContracts": [
								1667
							],
							"name": "MerkleProof",
							"nameLocation": "1361:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 600,
										"nodeType": "StructuredDocumentation",
										"src": "1379:60:5",
										"text": "@dev The multiproof provided is not valid."
									},
									"errorSelector": "35140492",
									"id": 602,
									"name": "MerkleProofInvalidMultiproof",
									"nameLocation": "1450:28:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1478:2:5"
									},
									"src": "1444:37:5"
								},
								{
									"body": {
										"id": 622,
										"nodeType": "Block",
										"src": "1999:57:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 616,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "2029:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 617,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 610,
																"src": "2036:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 615,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																664,
																746
															],
															"referencedDeclaration": 664,
															"src": "2016:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2016:25:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 619,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "2045:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2016:33:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 614,
												"id": 621,
												"nodeType": "Return",
												"src": "2009:40:5"
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "1487:410:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 623,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1911:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1935:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "1918:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 604,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1918:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 605,
													"nodeType": "ArrayTypeName",
													"src": "1918:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1950:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "1942:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 607,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1942:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1964:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "1956:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 609,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1917:52:5"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "1993:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 612,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1993:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1992:6:5"
									},
									"scope": 1667,
									"src": "1902:154:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "2549:216:5",
										"statements": [
											{
												"assignments": [
													635
												],
												"declarations": [
													{
														"constant": false,
														"id": 635,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2567:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 663,
														"src": "2559:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 634,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2559:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 637,
												"initialValue": {
													"id": 636,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 629,
													"src": "2582:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2559:27:5"
											},
											{
												"body": {
													"id": 659,
													"nodeType": "Block",
													"src": "2639:91:5",
													"statements": [
														{
															"expression": {
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 649,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 635,
																	"src": "2653:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 652,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 635,
																			"src": "2696:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 653,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 627,
																				"src": "2710:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 655,
																			"indexExpression": {
																				"id": 654,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 639,
																				"src": "2716:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2710:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 650,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 594,
																			"src": "2668:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$594_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2675:20:5",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 581,
																		"src": "2668:27:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2668:51:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2653:66:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 658,
															"nodeType": "ExpressionStatement",
															"src": "2653:66:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 642,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "2616:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 643,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "2620:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2626:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2620:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2616:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 660,
												"initializationExpression": {
													"assignments": [
														639
													],
													"declarations": [
														{
															"constant": false,
															"id": 639,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2609:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 660,
															"src": "2601:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 638,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2601:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 641,
													"initialValue": {
														"hexValue": "30",
														"id": 640,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2613:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2601:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 647,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2634:3:5",
														"subExpression": {
															"id": 646,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "2634:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 648,
													"nodeType": "ExpressionStatement",
													"src": "2634:3:5"
												},
												"nodeType": "ForStatement",
												"src": "2596:134:5"
											},
											{
												"expression": {
													"id": 661,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 635,
													"src": "2746:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 633,
												"id": 662,
												"nodeType": "Return",
												"src": "2739:19:5"
											}
										]
									},
									"documentation": {
										"id": 624,
										"nodeType": "StructuredDocumentation",
										"src": "2062:390:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "2466:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2496:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "2479:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 625,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2479:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 626,
													"nodeType": "ArrayTypeName",
													"src": "2479:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2511:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "2503:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 628,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:38:5"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "2540:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 631,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:9:5"
									},
									"scope": 1667,
									"src": "2457:308:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "3376:65:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 688,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 668,
																"src": "3406:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 689,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "3413:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 690,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 682,
																"src": "3419:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 687,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																664,
																746
															],
															"referencedDeclaration": 746,
															"src": "3393:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 691,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3393:33:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 692,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 670,
														"src": "3430:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3393:41:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 686,
												"id": 694,
												"nodeType": "Return",
												"src": "3386:48:5"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "2771:407:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "3192:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 668,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3225:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "3208:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 666,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3208:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 667,
													"nodeType": "ArrayTypeName",
													"src": "3208:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3248:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "3240:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 669,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3240:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3270:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "3262:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 671,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3334:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "3284:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 681,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 677,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 674,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 681,
																"src": "3293:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 673,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3293:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 676,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 681,
																"src": "3302:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 675,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3292:18:5"
													},
													"returnParameterTypes": {
														"id": 680,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 679,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 681,
																"src": "3325:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 678,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3325:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3324:9:5"
													},
													"src": "3284:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3198:148:5"
									},
									"returnParameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "3370:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 684,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3370:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:6:5"
									},
									"scope": 1667,
									"src": "3183:258:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 745,
										"nodeType": "Block",
										"src": "4019:195:5",
										"statements": [
											{
												"assignments": [
													718
												],
												"declarations": [
													{
														"constant": false,
														"id": 718,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "4037:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 745,
														"src": "4029:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 717,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4029:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 720,
												"initialValue": {
													"id": 719,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 702,
													"src": "4052:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4029:27:5"
											},
											{
												"body": {
													"id": 741,
													"nodeType": "Block",
													"src": "4109:70:5",
													"statements": [
														{
															"expression": {
																"id": 739,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 732,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 718,
																	"src": "4123:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 734,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 718,
																			"src": "4145:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 735,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 700,
																				"src": "4159:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 737,
																			"indexExpression": {
																				"id": 736,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 722,
																				"src": "4165:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4159:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 733,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 712,
																		"src": "4138:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4138:30:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "4123:45:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 740,
															"nodeType": "ExpressionStatement",
															"src": "4123:45:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 725,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 722,
														"src": "4086:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 726,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "4090:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4096:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4090:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4086:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 742,
												"initializationExpression": {
													"assignments": [
														722
													],
													"declarations": [
														{
															"constant": false,
															"id": 722,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4079:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 742,
															"src": "4071:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 721,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4071:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 724,
													"initialValue": {
														"hexValue": "30",
														"id": 723,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4083:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4071:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4104:3:5",
														"subExpression": {
															"id": 729,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "4104:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 731,
													"nodeType": "ExpressionStatement",
													"src": "4104:3:5"
												},
												"nodeType": "ForStatement",
												"src": "4066:113:5"
											},
											{
												"expression": {
													"id": 743,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 718,
													"src": "4195:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 716,
												"id": 744,
												"nodeType": "Return",
												"src": "4188:19:5"
											}
										]
									},
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "3447:387:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "3848:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3887:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "3870:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 698,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3870:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 699,
													"nodeType": "ArrayTypeName",
													"src": "3870:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3910:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "3902:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 701,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3974:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "3924:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 711,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 707,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 704,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 711,
																"src": "3933:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 703,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3933:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 706,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 711,
																"src": "3942:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 705,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3942:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3932:18:5"
													},
													"returnParameterTypes": {
														"id": 710,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 709,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 711,
																"src": "3965:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 708,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3965:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3964:9:5"
													},
													"src": "3924:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3860:126:5"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "4010:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 714,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4009:9:5"
									},
									"scope": 1667,
									"src": "3839:375:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "4744:65:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 760,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 750,
																"src": "4782:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 761,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 754,
																"src": "4789:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 759,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																808,
																890
															],
															"referencedDeclaration": 808,
															"src": "4761:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32) pure returns (bytes32)"
															}
														},
														"id": 762,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4761:33:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 763,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "4798:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4761:41:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 758,
												"id": 765,
												"nodeType": "Return",
												"src": "4754:48:5"
											}
										]
									},
									"documentation": {
										"id": 747,
										"nodeType": "StructuredDocumentation",
										"src": "4220:412:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "4646:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "4680:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "4661:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 748,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4661:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 749,
													"nodeType": "ArrayTypeName",
													"src": "4661:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "4695:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "4687:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 751,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "4709:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "4701:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 753,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:54:5"
									},
									"returnParameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "4738:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 756,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4738:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4737:6:5"
									},
									"scope": 1667,
									"src": "4637:172:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "5314:216:5",
										"statements": [
											{
												"assignments": [
													779
												],
												"declarations": [
													{
														"constant": false,
														"id": 779,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "5332:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5324:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 778,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5324:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 781,
												"initialValue": {
													"id": 780,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 773,
													"src": "5347:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5324:27:5"
											},
											{
												"body": {
													"id": 803,
													"nodeType": "Block",
													"src": "5404:91:5",
													"statements": [
														{
															"expression": {
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 793,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "5418:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 796,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 779,
																			"src": "5461:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 797,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 771,
																				"src": "5475:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 799,
																			"indexExpression": {
																				"id": 798,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 783,
																				"src": "5481:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5475:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 794,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 594,
																			"src": "5433:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$594_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 795,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5440:20:5",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 581,
																		"src": "5433:27:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5433:51:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "5418:66:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 802,
															"nodeType": "ExpressionStatement",
															"src": "5418:66:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 786,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "5381:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 787,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "5385:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 788,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5391:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5385:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5381:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 804,
												"initializationExpression": {
													"assignments": [
														783
													],
													"declarations": [
														{
															"constant": false,
															"id": 783,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5374:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 804,
															"src": "5366:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 782,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5366:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 785,
													"initialValue": {
														"hexValue": "30",
														"id": 784,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5378:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5366:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 791,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5399:3:5",
														"subExpression": {
															"id": 790,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "5399:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 792,
													"nodeType": "ExpressionStatement",
													"src": "5399:3:5"
												},
												"nodeType": "ForStatement",
												"src": "5361:134:5"
											},
											{
												"expression": {
													"id": 805,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 779,
													"src": "5511:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 777,
												"id": 806,
												"nodeType": "Return",
												"src": "5504:19:5"
											}
										]
									},
									"documentation": {
										"id": 768,
										"nodeType": "StructuredDocumentation",
										"src": "4815:392:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "5221:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "5261:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5242:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 769,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5242:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 770,
													"nodeType": "ArrayTypeName",
													"src": "5242:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "5276:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5268:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 772,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5241:40:5"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5305:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 775,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5305:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5304:9:5"
									},
									"scope": 1667,
									"src": "5212:318:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 839,
										"nodeType": "Block",
										"src": "6153:73:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 832,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 812,
																"src": "6191:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 833,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "6198:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 834,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 826,
																"src": "6204:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 831,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																808,
																890
															],
															"referencedDeclaration": 890,
															"src": "6170:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6170:41:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 836,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 814,
														"src": "6215:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "6170:49:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 830,
												"id": 838,
												"nodeType": "Return",
												"src": "6163:56:5"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "5536:409:5",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 840,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "5959:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6002:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "5983:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 810,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5983:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 811,
													"nodeType": "ArrayTypeName",
													"src": "5983:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "6025:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "6017:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 813,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6017:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6047:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "6039:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 815,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6111:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "6061:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 825,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 821,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 818,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 825,
																"src": "6070:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 817,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6070:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 820,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 825,
																"src": "6079:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 819,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6079:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6069:18:5"
													},
													"returnParameterTypes": {
														"id": 824,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 823,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 825,
																"src": "6102:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 822,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6102:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6101:9:5"
													},
													"src": "6061:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "5973:150:5"
									},
									"returnParameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 840,
												"src": "6147:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 828,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6147:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:6:5"
									},
									"scope": 1667,
									"src": "5950:276:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "6816:195:5",
										"statements": [
											{
												"assignments": [
													862
												],
												"declarations": [
													{
														"constant": false,
														"id": 862,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "6834:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 889,
														"src": "6826:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 861,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6826:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 864,
												"initialValue": {
													"id": 863,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 846,
													"src": "6849:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6826:27:5"
											},
											{
												"body": {
													"id": 885,
													"nodeType": "Block",
													"src": "6906:70:5",
													"statements": [
														{
															"expression": {
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 876,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 862,
																	"src": "6920:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 878,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 862,
																			"src": "6942:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 879,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 844,
																				"src": "6956:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 881,
																			"indexExpression": {
																				"id": 880,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 866,
																				"src": "6962:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6956:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 877,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 856,
																		"src": "6935:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6935:30:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "6920:45:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 884,
															"nodeType": "ExpressionStatement",
															"src": "6920:45:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 869,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "6883:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 870,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 844,
															"src": "6887:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6893:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6887:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6883:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 886,
												"initializationExpression": {
													"assignments": [
														866
													],
													"declarations": [
														{
															"constant": false,
															"id": 866,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6876:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 886,
															"src": "6868:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 865,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6868:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 868,
													"initialValue": {
														"hexValue": "30",
														"id": 867,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6880:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6868:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 874,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6901:3:5",
														"subExpression": {
															"id": 873,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 866,
															"src": "6901:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 875,
													"nodeType": "ExpressionStatement",
													"src": "6901:3:5"
												},
												"nodeType": "ForStatement",
												"src": "6863:113:5"
											},
											{
												"expression": {
													"id": 887,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 862,
													"src": "6992:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 860,
												"id": 888,
												"nodeType": "Return",
												"src": "6985:19:5"
											}
										]
									},
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "6232:389:5",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "6635:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6684:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "6665:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 842,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6665:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 843,
													"nodeType": "ArrayTypeName",
													"src": "6665:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6707:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "6699:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 845,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6699:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6771:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "6721:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 855,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 851,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 848,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 855,
																"src": "6730:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 847,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6730:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 850,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 855,
																"src": "6739:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 849,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6739:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6729:18:5"
													},
													"returnParameterTypes": {
														"id": 854,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 853,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 855,
																"src": "6762:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 852,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6762:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6761:9:5"
													},
													"src": "6721:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "6655:128:5"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "6807:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 858,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6807:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6806:9:5"
									},
									"scope": 1667,
									"src": "6626:385:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 915,
										"nodeType": "Block",
										"src": "7797:76:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 908,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "7832:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 909,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "7839:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 910,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 902,
																"src": "7851:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 907,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1074,
																1278
															],
															"referencedDeclaration": 1074,
															"src": "7814:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7814:44:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 912,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 899,
														"src": "7862:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7814:52:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 906,
												"id": 914,
												"nodeType": "Return",
												"src": "7807:59:5"
											}
										]
									},
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "7017:593:5",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 916,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "7624:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "7667:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "7650:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 892,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7650:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 893,
													"nodeType": "ArrayTypeName",
													"src": "7650:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "7696:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "7682:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 895,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "7682:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 896,
													"nodeType": "ArrayTypeName",
													"src": "7682:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "7724:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "7716:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 898,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "7755:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "7738:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 900,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7738:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 901,
													"nodeType": "ArrayTypeName",
													"src": "7738:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7640:127:5"
									},
									"returnParameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "7791:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 904,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7791:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7790:6:5"
									},
									"scope": 1667,
									"src": "7615:258:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1073,
										"nodeType": "Block",
										"src": "9159:2104:5",
										"statements": [
											{
												"assignments": [
													932
												],
												"declarations": [
													{
														"constant": false,
														"id": 932,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "9551:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "9543:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 931,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9543:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 935,
												"initialValue": {
													"expression": {
														"id": 933,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 926,
														"src": "9563:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9570:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9563:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9543:33:5"
											},
											{
												"assignments": [
													937
												],
												"declarations": [
													{
														"constant": false,
														"id": 937,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "9594:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "9586:21:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 936,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9586:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 940,
												"initialValue": {
													"expression": {
														"id": 938,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 923,
														"src": "9610:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9621:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9610:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9586:41:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 941,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 932,
															"src": "9675:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 942,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 920,
																"src": "9687:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9693:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "9687:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9675:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 945,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "9703:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9719:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "9703:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9675:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 953,
												"nodeType": "IfStatement",
												"src": "9671:113:5",
												"trueBody": {
													"id": 952,
													"nodeType": "Block",
													"src": "9722:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 949,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "9743:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 950,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9743:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 951,
															"nodeType": "RevertStatement",
															"src": "9736:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													958
												],
												"declarations": [
													{
														"constant": false,
														"id": 958,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "10045:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "10028:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 956,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10028:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 957,
															"nodeType": "ArrayTypeName",
															"src": "10028:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 964,
												"initialValue": {
													"arguments": [
														{
															"id": 962,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "10068:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "10054:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 959,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10058:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 960,
															"nodeType": "ArrayTypeName",
															"src": "10058:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10054:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10028:54:5"
											},
											{
												"assignments": [
													966
												],
												"declarations": [
													{
														"constant": false,
														"id": 966,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "10100:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "10092:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 965,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10092:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 968,
												"initialValue": {
													"hexValue": "30",
													"id": 967,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10110:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10092:19:5"
											},
											{
												"assignments": [
													970
												],
												"declarations": [
													{
														"constant": false,
														"id": 970,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "10129:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "10121:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 969,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10121:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 972,
												"initialValue": {
													"hexValue": "30",
													"id": 971,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10139:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10121:19:5"
											},
											{
												"assignments": [
													974
												],
												"declarations": [
													{
														"constant": false,
														"id": 974,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "10158:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "10150:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 973,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10150:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 976,
												"initialValue": {
													"hexValue": "30",
													"id": 975,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10169:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10150:20:5"
											},
											{
												"body": {
													"id": 1036,
													"nodeType": "Block",
													"src": "10590:310:5",
													"statements": [
														{
															"assignments": [
																988
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 988,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "10612:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1036,
																	"src": "10604:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 987,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1001,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 989,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 966,
																		"src": "10616:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 990,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 932,
																		"src": "10626:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10616:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 996,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 958,
																		"src": "10658:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 999,
																	"indexExpression": {
																		"id": 998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10665:9:5",
																		"subExpression": {
																			"id": 997,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 970,
																			"src": "10665:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10658:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1000,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10616:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 992,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 926,
																		"src": "10638:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 995,
																	"indexExpression": {
																		"id": 994,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10645:9:5",
																		"subExpression": {
																			"id": 993,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 966,
																			"src": "10645:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10638:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10604:71:5"
														},
														{
															"assignments": [
																1003
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1003,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "10697:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1036,
																	"src": "10689:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1002,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10689:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1025,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1004,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 923,
																		"src": "10701:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1006,
																	"indexExpression": {
																		"id": 1005,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 978,
																		"src": "10712:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10701:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1020,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 920,
																		"src": "10813:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1023,
																	"indexExpression": {
																		"id": 1022,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10819:10:5",
																		"subExpression": {
																			"id": 1021,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 974,
																			"src": "10819:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10813:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10701:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1009,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1007,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 966,
																					"src": "10734:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1008,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 932,
																					"src": "10744:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10734:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1014,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 958,
																					"src": "10776:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1017,
																				"indexExpression": {
																					"id": 1016,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10783:9:5",
																					"subExpression": {
																						"id": 1015,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 970,
																						"src": "10783:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10776:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1018,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "10734:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1010,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 926,
																					"src": "10756:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1013,
																				"indexExpression": {
																					"id": 1012,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10763:9:5",
																					"subExpression": {
																						"id": 1011,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 966,
																						"src": "10763:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10756:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1019,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10733:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10689:141:5"
														},
														{
															"expression": {
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1026,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 958,
																		"src": "10844:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1028,
																	"indexExpression": {
																		"id": 1027,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 978,
																		"src": "10851:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "10844:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1031,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 988,
																			"src": "10884:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1032,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1003,
																			"src": "10887:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1029,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 594,
																			"src": "10856:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$594_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1030,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10863:20:5",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 581,
																		"src": "10856:27:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1033,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10856:33:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "10844:45:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1035,
															"nodeType": "ExpressionStatement",
															"src": "10844:45:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 981,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 978,
														"src": "10566:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 982,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "10570:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10566:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1037,
												"initializationExpression": {
													"assignments": [
														978
													],
													"declarations": [
														{
															"constant": false,
															"id": 978,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10559:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 1037,
															"src": "10551:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 977,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "10551:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 980,
													"initialValue": {
														"hexValue": "30",
														"id": 979,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10563:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10551:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 985,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10585:3:5",
														"subExpression": {
															"id": 984,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "10585:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 986,
													"nodeType": "ExpressionStatement",
													"src": "10585:3:5"
												},
												"nodeType": "ForStatement",
												"src": "10546:354:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1038,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "10914:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10930:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10914:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1060,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1058,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 932,
															"src": "11155:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11167:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11155:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1070,
														"nodeType": "Block",
														"src": "11217:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1066,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 920,
																		"src": "11238:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1068,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11244:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11238:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 930,
																"id": 1069,
																"nodeType": "Return",
																"src": "11231:15:5"
															}
														]
													},
													"id": 1071,
													"nodeType": "IfStatement",
													"src": "11151:106:5",
													"trueBody": {
														"id": 1065,
														"nodeType": "Block",
														"src": "11170:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1061,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 926,
																		"src": "11191:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1063,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1062,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11198:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11191:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 930,
																"id": 1064,
																"nodeType": "Return",
																"src": "11184:16:5"
															}
														]
													}
												},
												"id": 1072,
												"nodeType": "IfStatement",
												"src": "10910:347:5",
												"trueBody": {
													"id": 1057,
													"nodeType": "Block",
													"src": "10933:212:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1044,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1041,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 974,
																	"src": "10951:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1042,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 920,
																		"src": "10963:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10969:6:5",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "10963:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10951:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1049,
															"nodeType": "IfStatement",
															"src": "10947:100:5",
															"trueBody": {
																"id": 1048,
																"nodeType": "Block",
																"src": "10977:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1045,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 602,
																				"src": "11002:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1046,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11002:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1047,
																		"nodeType": "RevertStatement",
																		"src": "10995:37:5"
																	}
																]
															}
														},
														{
															"id": 1056,
															"nodeType": "UncheckedBlock",
															"src": "11060:75:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1050,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 958,
																			"src": "11095:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1054,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1053,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1051,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 937,
																				"src": "11102:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1052,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11118:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "11102:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "11095:25:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 930,
																	"id": 1055,
																	"nodeType": "Return",
																	"src": "11088:32:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "7879:1100:5",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1074,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "8993:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "9037:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "9020:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 918,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9020:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 919,
													"nodeType": "ArrayTypeName",
													"src": "9020:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "9066:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "9052:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 921,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "9052:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 922,
													"nodeType": "ArrayTypeName",
													"src": "9052:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "9103:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "9086:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 924,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9086:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 925,
													"nodeType": "ArrayTypeName",
													"src": "9086:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:105:5"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "9147:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "9139:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 928,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9139:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:20:5"
									},
									"scope": 1667,
									"src": "8984:2279:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1110,
										"nodeType": "Block",
										"src": "12112:84:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1102,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1078,
																"src": "12147:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1103,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1081,
																"src": "12154:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1104,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1086,
																"src": "12166:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1105,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "12174:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1101,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1074,
																1278
															],
															"referencedDeclaration": 1278,
															"src": "12129:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12129:52:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1107,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "12185:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "12129:60:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1100,
												"id": 1109,
												"nodeType": "Return",
												"src": "12122:67:5"
											}
										]
									},
									"documentation": {
										"id": 1075,
										"nodeType": "StructuredDocumentation",
										"src": "11269:590:5",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "11873:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "11916:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "11899:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1076,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11899:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1077,
													"nodeType": "ArrayTypeName",
													"src": "11899:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1081,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "11945:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "11931:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1079,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "11931:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1080,
													"nodeType": "ArrayTypeName",
													"src": "11931:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "11973:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "11965:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1082,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11965:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "12004:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "11987:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1084,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11987:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1085,
													"nodeType": "ArrayTypeName",
													"src": "11987:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "12070:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "12020:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1095,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1091,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1088,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1095,
																"src": "12029:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1087,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12029:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1090,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1095,
																"src": "12038:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1089,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12038:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12028:18:5"
													},
													"returnParameterTypes": {
														"id": 1094,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1093,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1095,
																"src": "12061:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1092,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12061:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12060:9:5"
													},
													"src": "12020:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "11889:193:5"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "12106:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1098,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12106:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12105:6:5"
									},
									"scope": 1667,
									"src": "11864:332:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1277,
										"nodeType": "Block",
										"src": "13545:2083:5",
										"statements": [
											{
												"assignments": [
													1137
												],
												"declarations": [
													{
														"constant": false,
														"id": 1137,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "13937:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "13929:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1136,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13929:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1140,
												"initialValue": {
													"expression": {
														"id": 1138,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "13949:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "13956:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13949:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13929:33:5"
											},
											{
												"assignments": [
													1142
												],
												"declarations": [
													{
														"constant": false,
														"id": 1142,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "13980:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "13972:21:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1141,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13972:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1145,
												"initialValue": {
													"expression": {
														"id": 1143,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1118,
														"src": "13996:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "14007:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13996:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13972:41:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1149,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1146,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "14061:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1147,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1115,
																"src": "14073:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14079:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "14073:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "14061:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1152,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1150,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "14089:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14105:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "14089:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14061:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1158,
												"nodeType": "IfStatement",
												"src": "14057:113:5",
												"trueBody": {
													"id": 1157,
													"nodeType": "Block",
													"src": "14108:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1154,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "14129:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14129:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1156,
															"nodeType": "RevertStatement",
															"src": "14122:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													1163
												],
												"declarations": [
													{
														"constant": false,
														"id": 1163,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "14431:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "14414:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1161,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14414:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1162,
															"nodeType": "ArrayTypeName",
															"src": "14414:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1169,
												"initialValue": {
													"arguments": [
														{
															"id": 1167,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "14454:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1166,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "14440:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1164,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14444:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1165,
															"nodeType": "ArrayTypeName",
															"src": "14444:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14440:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14414:54:5"
											},
											{
												"assignments": [
													1171
												],
												"declarations": [
													{
														"constant": false,
														"id": 1171,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "14486:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "14478:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1170,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14478:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1173,
												"initialValue": {
													"hexValue": "30",
													"id": 1172,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14496:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14478:19:5"
											},
											{
												"assignments": [
													1175
												],
												"declarations": [
													{
														"constant": false,
														"id": 1175,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "14515:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "14507:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1174,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14507:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1177,
												"initialValue": {
													"hexValue": "30",
													"id": 1176,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14525:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14507:19:5"
											},
											{
												"assignments": [
													1179
												],
												"declarations": [
													{
														"constant": false,
														"id": 1179,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "14544:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1277,
														"src": "14536:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1178,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14536:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1181,
												"initialValue": {
													"hexValue": "30",
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14555:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14536:20:5"
											},
											{
												"body": {
													"id": 1240,
													"nodeType": "Block",
													"src": "14976:289:5",
													"statements": [
														{
															"assignments": [
																1193
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1193,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "14998:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1240,
																	"src": "14990:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1192,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "14990:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1206,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1194,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1171,
																		"src": "15002:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1195,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1137,
																		"src": "15012:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15002:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1201,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1163,
																		"src": "15044:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1204,
																	"indexExpression": {
																		"id": 1203,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15051:9:5",
																		"subExpression": {
																			"id": 1202,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1175,
																			"src": "15051:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15044:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15002:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1197,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1121,
																		"src": "15024:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1200,
																	"indexExpression": {
																		"id": 1199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15031:9:5",
																		"subExpression": {
																			"id": 1198,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1171,
																			"src": "15031:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15024:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "14990:71:5"
														},
														{
															"assignments": [
																1208
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1208,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "15083:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1240,
																	"src": "15075:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1207,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "15075:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1230,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1209,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1118,
																		"src": "15087:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1211,
																	"indexExpression": {
																		"id": 1210,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1183,
																		"src": "15098:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15087:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1225,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1115,
																		"src": "15199:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1228,
																	"indexExpression": {
																		"id": 1227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15205:10:5",
																		"subExpression": {
																			"id": 1226,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1179,
																			"src": "15205:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15199:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1229,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15087:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1214,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1212,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1171,
																					"src": "15120:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1213,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1137,
																					"src": "15130:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15120:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1219,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1163,
																					"src": "15162:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1222,
																				"indexExpression": {
																					"id": 1221,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15169:9:5",
																					"subExpression": {
																						"id": 1220,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1175,
																						"src": "15169:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15162:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1223,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "15120:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1215,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1121,
																					"src": "15142:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1218,
																				"indexExpression": {
																					"id": 1217,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15149:9:5",
																					"subExpression": {
																						"id": 1216,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1171,
																						"src": "15149:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15142:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1224,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "15119:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "15075:141:5"
														},
														{
															"expression": {
																"id": 1238,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1231,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1163,
																		"src": "15230:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1233,
																	"indexExpression": {
																		"id": 1232,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1183,
																		"src": "15237:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "15230:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1235,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1193,
																			"src": "15249:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1236,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1208,
																			"src": "15252:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1234,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1131,
																		"src": "15242:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1237,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15242:12:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "15230:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1239,
															"nodeType": "ExpressionStatement",
															"src": "15230:24:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1186,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1183,
														"src": "14952:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1187,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1142,
														"src": "14956:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14952:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1241,
												"initializationExpression": {
													"assignments": [
														1183
													],
													"declarations": [
														{
															"constant": false,
															"id": 1183,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "14945:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 1241,
															"src": "14937:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1182,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "14937:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1185,
													"initialValue": {
														"hexValue": "30",
														"id": 1184,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14949:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14937:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1190,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14971:3:5",
														"subExpression": {
															"id": 1189,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "14971:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1191,
													"nodeType": "ExpressionStatement",
													"src": "14971:3:5"
												},
												"nodeType": "ForStatement",
												"src": "14932:333:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1242,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1142,
														"src": "15279:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1243,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15295:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15279:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1264,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1262,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "15520:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1263,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15532:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "15520:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1274,
														"nodeType": "Block",
														"src": "15582:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1270,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1115,
																		"src": "15603:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1272,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1271,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15609:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15603:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1135,
																"id": 1273,
																"nodeType": "Return",
																"src": "15596:15:5"
															}
														]
													},
													"id": 1275,
													"nodeType": "IfStatement",
													"src": "15516:106:5",
													"trueBody": {
														"id": 1269,
														"nodeType": "Block",
														"src": "15535:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1265,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1121,
																		"src": "15556:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1267,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15563:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15556:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1135,
																"id": 1268,
																"nodeType": "Return",
																"src": "15549:16:5"
															}
														]
													}
												},
												"id": 1276,
												"nodeType": "IfStatement",
												"src": "15275:347:5",
												"trueBody": {
													"id": 1261,
													"nodeType": "Block",
													"src": "15298:212:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1245,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1179,
																	"src": "15316:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1246,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1115,
																		"src": "15328:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1247,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15334:6:5",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "15328:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15316:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1253,
															"nodeType": "IfStatement",
															"src": "15312:100:5",
															"trueBody": {
																"id": 1252,
																"nodeType": "Block",
																"src": "15342:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1249,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 602,
																				"src": "15367:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15367:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1251,
																		"nodeType": "RevertStatement",
																		"src": "15360:37:5"
																	}
																]
															}
														},
														{
															"id": 1260,
															"nodeType": "UncheckedBlock",
															"src": "15425:75:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1254,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1163,
																			"src": "15460:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1258,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1257,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1255,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1142,
																				"src": "15467:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "15483:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "15467:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "15460:25:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1135,
																	"id": 1259,
																	"nodeType": "Return",
																	"src": "15453:32:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "12202:1097:5",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "13313:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "13357:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "13340:22:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1113,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13340:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1114,
													"nodeType": "ArrayTypeName",
													"src": "13340:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "13386:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "13372:24:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1116,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13372:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1117,
													"nodeType": "ArrayTypeName",
													"src": "13372:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "13423:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "13406:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1119,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13406:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1120,
													"nodeType": "ArrayTypeName",
													"src": "13406:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "13489:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "13439:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1130,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1126,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1123,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1130,
																"src": "13448:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1122,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13448:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1125,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1130,
																"src": "13457:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1124,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13457:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13447:18:5"
													},
													"returnParameterTypes": {
														"id": 1129,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1128,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1130,
																"src": "13480:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1127,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13480:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13479:9:5"
													},
													"src": "13439:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "13330:171:5"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "13533:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1278,
												"src": "13525:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1133,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13525:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13524:20:5"
									},
									"scope": 1667,
									"src": "13304:2324:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1303,
										"nodeType": "Block",
										"src": "16436:84:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1296,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "16479:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1297,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1285,
																"src": "16486:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1298,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1290,
																"src": "16498:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1295,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1462,
																1666
															],
															"referencedDeclaration": 1462,
															"src": "16453:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16453:52:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1300,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1287,
														"src": "16509:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "16453:60:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1294,
												"id": 1302,
												"nodeType": "Return",
												"src": "16446:67:5"
											}
										]
									},
									"documentation": {
										"id": 1279,
										"nodeType": "StructuredDocumentation",
										"src": "15634:603:5",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "16251:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "16304:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "16285:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1280,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16285:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1281,
													"nodeType": "ArrayTypeName",
													"src": "16285:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "16335:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "16319:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1283,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "16319:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1284,
													"nodeType": "ArrayTypeName",
													"src": "16319:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "16363:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "16355:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1286,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16355:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "16394:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "16377:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1288,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16377:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1289,
													"nodeType": "ArrayTypeName",
													"src": "16377:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:131:5"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "16430:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1292,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16430:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16429:6:5"
									},
									"scope": 1667,
									"src": "16242:278:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1461,
										"nodeType": "Block",
										"src": "17820:2104:5",
										"statements": [
											{
												"assignments": [
													1320
												],
												"declarations": [
													{
														"constant": false,
														"id": 1320,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "18212:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18204:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1319,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18204:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1323,
												"initialValue": {
													"expression": {
														"id": 1321,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "18224:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18231:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18224:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18204:33:5"
											},
											{
												"assignments": [
													1325
												],
												"declarations": [
													{
														"constant": false,
														"id": 1325,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "18255:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18247:21:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1324,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18247:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1328,
												"initialValue": {
													"expression": {
														"id": 1326,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "18271:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18282:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18271:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18247:41:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1329,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "18336:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1330,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "18348:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18354:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "18348:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "18336:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1333,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "18364:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18380:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "18364:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18336:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1341,
												"nodeType": "IfStatement",
												"src": "18332:113:5",
												"trueBody": {
													"id": 1340,
													"nodeType": "Block",
													"src": "18383:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1337,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "18404:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1338,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18404:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1339,
															"nodeType": "RevertStatement",
															"src": "18397:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													1346
												],
												"declarations": [
													{
														"constant": false,
														"id": 1346,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "18706:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18689:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1344,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18689:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1345,
															"nodeType": "ArrayTypeName",
															"src": "18689:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1352,
												"initialValue": {
													"arguments": [
														{
															"id": 1350,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "18729:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1349,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "18715:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1347,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18719:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1348,
															"nodeType": "ArrayTypeName",
															"src": "18719:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18715:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18689:54:5"
											},
											{
												"assignments": [
													1354
												],
												"declarations": [
													{
														"constant": false,
														"id": 1354,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "18761:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18753:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1353,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18753:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1356,
												"initialValue": {
													"hexValue": "30",
													"id": 1355,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18771:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18753:19:5"
											},
											{
												"assignments": [
													1358
												],
												"declarations": [
													{
														"constant": false,
														"id": 1358,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "18790:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18782:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1357,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18782:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1360,
												"initialValue": {
													"hexValue": "30",
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18800:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18782:19:5"
											},
											{
												"assignments": [
													1362
												],
												"declarations": [
													{
														"constant": false,
														"id": 1362,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "18819:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1461,
														"src": "18811:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1361,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18811:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1364,
												"initialValue": {
													"hexValue": "30",
													"id": 1363,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18830:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18811:20:5"
											},
											{
												"body": {
													"id": 1424,
													"nodeType": "Block",
													"src": "19251:310:5",
													"statements": [
														{
															"assignments": [
																1376
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1376,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "19273:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1424,
																	"src": "19265:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1375,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19265:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1389,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1377,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1354,
																		"src": "19277:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1378,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1320,
																		"src": "19287:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "19277:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1384,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1346,
																		"src": "19319:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1387,
																	"indexExpression": {
																		"id": 1386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19326:9:5",
																		"subExpression": {
																			"id": 1385,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1358,
																			"src": "19326:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19319:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19277:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1380,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1314,
																		"src": "19299:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1383,
																	"indexExpression": {
																		"id": 1382,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19306:9:5",
																		"subExpression": {
																			"id": 1381,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1354,
																			"src": "19306:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19299:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19265:71:5"
														},
														{
															"assignments": [
																1391
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1391,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "19358:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1424,
																	"src": "19350:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1390,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19350:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1413,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1392,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1311,
																		"src": "19362:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1394,
																	"indexExpression": {
																		"id": 1393,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1366,
																		"src": "19373:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19362:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1408,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1308,
																		"src": "19474:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1411,
																	"indexExpression": {
																		"id": 1410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19480:10:5",
																		"subExpression": {
																			"id": 1409,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1362,
																			"src": "19480:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19474:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1412,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19362:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1397,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1395,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1354,
																					"src": "19395:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1396,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1320,
																					"src": "19405:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "19395:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1402,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1346,
																					"src": "19437:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1405,
																				"indexExpression": {
																					"id": 1404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19444:9:5",
																					"subExpression": {
																						"id": 1403,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1358,
																						"src": "19444:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19437:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "19395:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1398,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1314,
																					"src": "19417:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1401,
																				"indexExpression": {
																					"id": 1400,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19424:9:5",
																					"subExpression": {
																						"id": 1399,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1354,
																						"src": "19424:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19417:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1407,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "19394:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19350:141:5"
														},
														{
															"expression": {
																"id": 1422,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1414,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1346,
																		"src": "19505:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1416,
																	"indexExpression": {
																		"id": 1415,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1366,
																		"src": "19512:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "19505:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1419,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1376,
																			"src": "19545:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1420,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1391,
																			"src": "19548:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1417,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 594,
																			"src": "19517:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$594_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1418,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "19524:20:5",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 581,
																		"src": "19517:27:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "19517:33:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "19505:45:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1423,
															"nodeType": "ExpressionStatement",
															"src": "19505:45:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1369,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1366,
														"src": "19227:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1370,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1325,
														"src": "19231:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19227:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1425,
												"initializationExpression": {
													"assignments": [
														1366
													],
													"declarations": [
														{
															"constant": false,
															"id": 1366,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "19220:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 1425,
															"src": "19212:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1365,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "19212:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1368,
													"initialValue": {
														"hexValue": "30",
														"id": 1367,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19224:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "19212:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1373,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "19246:3:5",
														"subExpression": {
															"id": 1372,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1366,
															"src": "19246:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1374,
													"nodeType": "ExpressionStatement",
													"src": "19246:3:5"
												},
												"nodeType": "ForStatement",
												"src": "19207:354:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1426,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1325,
														"src": "19575:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1427,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19591:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19575:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1446,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "19816:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19828:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "19816:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1458,
														"nodeType": "Block",
														"src": "19878:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1454,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1308,
																		"src": "19899:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1456,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19905:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19899:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1318,
																"id": 1457,
																"nodeType": "Return",
																"src": "19892:15:5"
															}
														]
													},
													"id": 1459,
													"nodeType": "IfStatement",
													"src": "19812:106:5",
													"trueBody": {
														"id": 1453,
														"nodeType": "Block",
														"src": "19831:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1449,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1314,
																		"src": "19852:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1451,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19859:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19852:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1318,
																"id": 1452,
																"nodeType": "Return",
																"src": "19845:16:5"
															}
														]
													}
												},
												"id": 1460,
												"nodeType": "IfStatement",
												"src": "19571:347:5",
												"trueBody": {
													"id": 1445,
													"nodeType": "Block",
													"src": "19594:212:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1429,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1362,
																	"src": "19612:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1430,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1308,
																		"src": "19624:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1431,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "19630:6:5",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "19624:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "19612:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1437,
															"nodeType": "IfStatement",
															"src": "19608:100:5",
															"trueBody": {
																"id": 1436,
																"nodeType": "Block",
																"src": "19638:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1433,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 602,
																				"src": "19663:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1434,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "19663:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1435,
																		"nodeType": "RevertStatement",
																		"src": "19656:37:5"
																	}
																]
															}
														},
														{
															"id": 1444,
															"nodeType": "UncheckedBlock",
															"src": "19721:75:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1438,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1346,
																			"src": "19756:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1442,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1441,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1439,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1325,
																				"src": "19763:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1440,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "19779:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "19763:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "19756:25:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1318,
																	"id": 1443,
																	"nodeType": "Return",
																	"src": "19749:32:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1305,
										"nodeType": "StructuredDocumentation",
										"src": "16526:1102:5",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "17642:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "17696:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "17677:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1306,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17677:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1307,
													"nodeType": "ArrayTypeName",
													"src": "17677:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "17727:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "17711:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1309,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "17711:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1310,
													"nodeType": "ArrayTypeName",
													"src": "17711:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "17764:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "17747:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1312,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17747:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1313,
													"nodeType": "ArrayTypeName",
													"src": "17747:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17667:109:5"
									},
									"returnParameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "17808:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "17800:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1316,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17800:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17799:20:5"
									},
									"scope": 1667,
									"src": "17633:2291:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1498,
										"nodeType": "Block",
										"src": "20795:92:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1490,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1466,
																"src": "20838:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1491,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1469,
																"src": "20845:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1492,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1474,
																"src": "20857:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1493,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1484,
																"src": "20865:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1489,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1462,
																1666
															],
															"referencedDeclaration": 1666,
															"src": "20812:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1494,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20812:60:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1495,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1471,
														"src": "20876:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "20812:68:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1488,
												"id": 1497,
												"nodeType": "Return",
												"src": "20805:75:5"
											}
										]
									},
									"documentation": {
										"id": 1463,
										"nodeType": "StructuredDocumentation",
										"src": "19930:600:5",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1499,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "20544:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "20597:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20578:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1464,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20578:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1465,
													"nodeType": "ArrayTypeName",
													"src": "20578:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "20628:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20612:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1467,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "20612:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1468,
													"nodeType": "ArrayTypeName",
													"src": "20612:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "20656:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20648:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1470,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20648:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "20687:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20670:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1472,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20670:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1473,
													"nodeType": "ArrayTypeName",
													"src": "20670:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1484,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "20753:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20703:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1483,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1479,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1476,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1483,
																"src": "20712:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1475,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20712:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1478,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1483,
																"src": "20721:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1477,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20721:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20711:18:5"
													},
													"returnParameterTypes": {
														"id": 1482,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1481,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1483,
																"src": "20744:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1480,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20744:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20743:9:5"
													},
													"src": "20703:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "20568:197:5"
									},
									"returnParameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "20789:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1486,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20789:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20788:6:5"
									},
									"scope": 1667,
									"src": "20535:352:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1665,
										"nodeType": "Block",
										"src": "22250:2083:5",
										"statements": [
											{
												"assignments": [
													1525
												],
												"declarations": [
													{
														"constant": false,
														"id": 1525,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "22642:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "22634:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1524,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22634:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1528,
												"initialValue": {
													"expression": {
														"id": 1526,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1509,
														"src": "22654:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22661:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22654:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22634:33:5"
											},
											{
												"assignments": [
													1530
												],
												"declarations": [
													{
														"constant": false,
														"id": 1530,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "22685:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "22677:21:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1529,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22677:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1533,
												"initialValue": {
													"expression": {
														"id": 1531,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1506,
														"src": "22701:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22712:6:5",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22701:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22677:41:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1534,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1525,
															"src": "22766:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1535,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1503,
																"src": "22778:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "22784:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "22778:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "22766:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1538,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "22794:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "22810:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "22794:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "22766:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1546,
												"nodeType": "IfStatement",
												"src": "22762:113:5",
												"trueBody": {
													"id": 1545,
													"nodeType": "Block",
													"src": "22813:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1542,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 602,
																	"src": "22834:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "22834:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1544,
															"nodeType": "RevertStatement",
															"src": "22827:37:5"
														}
													]
												}
											},
											{
												"assignments": [
													1551
												],
												"declarations": [
													{
														"constant": false,
														"id": 1551,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "23136:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "23119:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1549,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23119:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1550,
															"nodeType": "ArrayTypeName",
															"src": "23119:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1557,
												"initialValue": {
													"arguments": [
														{
															"id": 1555,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "23159:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1554,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "23145:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1552,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23149:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1553,
															"nodeType": "ArrayTypeName",
															"src": "23149:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23145:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23119:54:5"
											},
											{
												"assignments": [
													1559
												],
												"declarations": [
													{
														"constant": false,
														"id": 1559,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "23191:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "23183:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1558,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23183:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1561,
												"initialValue": {
													"hexValue": "30",
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23201:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23183:19:5"
											},
											{
												"assignments": [
													1563
												],
												"declarations": [
													{
														"constant": false,
														"id": 1563,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "23220:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "23212:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1562,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23212:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1565,
												"initialValue": {
													"hexValue": "30",
													"id": 1564,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23230:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23212:19:5"
											},
											{
												"assignments": [
													1567
												],
												"declarations": [
													{
														"constant": false,
														"id": 1567,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "23249:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 1665,
														"src": "23241:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1566,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23241:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1569,
												"initialValue": {
													"hexValue": "30",
													"id": 1568,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23260:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23241:20:5"
											},
											{
												"body": {
													"id": 1628,
													"nodeType": "Block",
													"src": "23681:289:5",
													"statements": [
														{
															"assignments": [
																1581
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1581,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "23703:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1628,
																	"src": "23695:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1580,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23695:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1594,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1584,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1582,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1559,
																		"src": "23707:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1583,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1525,
																		"src": "23717:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "23707:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1589,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1551,
																		"src": "23749:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1592,
																	"indexExpression": {
																		"id": 1591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23756:9:5",
																		"subExpression": {
																			"id": 1590,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1563,
																			"src": "23756:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23749:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23707:59:5",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1585,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "23729:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1588,
																	"indexExpression": {
																		"id": 1587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23736:9:5",
																		"subExpression": {
																			"id": 1586,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1559,
																			"src": "23736:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23729:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23695:71:5"
														},
														{
															"assignments": [
																1596
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1596,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "23788:1:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1628,
																	"src": "23780:9:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1595,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23780:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1618,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1597,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1506,
																		"src": "23792:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1599,
																	"indexExpression": {
																		"id": 1598,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1571,
																		"src": "23803:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23792:13:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1613,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "23904:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1616,
																	"indexExpression": {
																		"id": 1615,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23910:10:5",
																		"subExpression": {
																			"id": 1614,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1567,
																			"src": "23910:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23904:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1617,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23792:129:5",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1602,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1600,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1559,
																					"src": "23825:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1601,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1525,
																					"src": "23835:9:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "23825:19:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1607,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1551,
																					"src": "23867:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1610,
																				"indexExpression": {
																					"id": 1609,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23874:9:5",
																					"subExpression": {
																						"id": 1608,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1563,
																						"src": "23874:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23867:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "23825:59:5",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1603,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1509,
																					"src": "23847:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1606,
																				"indexExpression": {
																					"id": 1605,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23854:9:5",
																					"subExpression": {
																						"id": 1604,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1559,
																						"src": "23854:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23847:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1612,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "23824:61:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23780:141:5"
														},
														{
															"expression": {
																"id": 1626,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1619,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1551,
																		"src": "23935:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1621,
																	"indexExpression": {
																		"id": 1620,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1571,
																		"src": "23942:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "23935:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1623,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1581,
																			"src": "23954:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1624,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1596,
																			"src": "23957:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1622,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1519,
																		"src": "23947:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1625,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "23947:12:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "23935:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1627,
															"nodeType": "ExpressionStatement",
															"src": "23935:24:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1574,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1571,
														"src": "23657:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1575,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "23661:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "23657:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1629,
												"initializationExpression": {
													"assignments": [
														1571
													],
													"declarations": [
														{
															"constant": false,
															"id": 1571,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "23650:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 1629,
															"src": "23642:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1570,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "23642:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1573,
													"initialValue": {
														"hexValue": "30",
														"id": 1572,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23654:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "23642:13:5"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1578,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "23676:3:5",
														"subExpression": {
															"id": 1577,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1571,
															"src": "23676:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1579,
													"nodeType": "ExpressionStatement",
													"src": "23676:3:5"
												},
												"nodeType": "ForStatement",
												"src": "23637:333:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1630,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "23984:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1631,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "24000:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "23984:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1652,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1650,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1525,
															"src": "24225:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1651,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "24237:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "24225:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1662,
														"nodeType": "Block",
														"src": "24287:40:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1658,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "24308:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1660,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24314:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24308:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1523,
																"id": 1661,
																"nodeType": "Return",
																"src": "24301:15:5"
															}
														]
													},
													"id": 1663,
													"nodeType": "IfStatement",
													"src": "24221:106:5",
													"trueBody": {
														"id": 1657,
														"nodeType": "Block",
														"src": "24240:41:5",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1653,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "24261:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1655,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24268:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24261:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1523,
																"id": 1656,
																"nodeType": "Return",
																"src": "24254:16:5"
															}
														]
													}
												},
												"id": 1664,
												"nodeType": "IfStatement",
												"src": "23980:347:5",
												"trueBody": {
													"id": 1649,
													"nodeType": "Block",
													"src": "24003:212:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1636,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1633,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1567,
																	"src": "24021:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1634,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "24033:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1635,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "24039:6:5",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "24033:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "24021:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1641,
															"nodeType": "IfStatement",
															"src": "24017:100:5",
															"trueBody": {
																"id": 1640,
																"nodeType": "Block",
																"src": "24047:70:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1637,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 602,
																				"src": "24072:28:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1638,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "24072:30:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1639,
																		"nodeType": "RevertStatement",
																		"src": "24065:37:5"
																	}
																]
															}
														},
														{
															"id": 1648,
															"nodeType": "UncheckedBlock",
															"src": "24130:75:5",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1642,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1551,
																			"src": "24165:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1646,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1645,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1643,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "24172:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1644,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "24188:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "24172:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "24165:25:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1523,
																	"id": 1647,
																	"nodeType": "Return",
																	"src": "24158:32:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1500,
										"nodeType": "StructuredDocumentation",
										"src": "20893:1099:5",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "22006:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "22060:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "22041:24:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1501,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22041:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1502,
													"nodeType": "ArrayTypeName",
													"src": "22041:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "22091:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "22075:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1504,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "22075:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1505,
													"nodeType": "ArrayTypeName",
													"src": "22075:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "22128:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "22111:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1507,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22111:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1508,
													"nodeType": "ArrayTypeName",
													"src": "22111:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "22194:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "22144:56:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1518,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1514,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1511,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1518,
																"src": "22153:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1510,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22153:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1513,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1518,
																"src": "22162:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1512,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22162:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22152:18:5"
													},
													"returnParameterTypes": {
														"id": 1517,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1516,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1518,
																"src": "22185:7:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1515,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22185:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22184:9:5"
													},
													"src": "22144:56:5",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "22031:175:5"
									},
									"returnParameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "22238:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "22230:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1521,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22230:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22229:20:5"
									},
									"scope": 1667,
									"src": "21997:2336:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1668,
							"src": "1353:22982:5",
							"usedErrors": [
								602
							],
							"usedEvents": []
						}
					],
					"src": "206:24130:5"
				},
				"id": 5
			},
			"src/ScholarshipDispenser.sol": {
				"ast": {
					"absolutePath": "src/ScholarshipDispenser.sol",
					"exportedSymbols": {
						"AggregatorV3Interface": [
							45
						],
						"MerkleProof": [
							1667
						],
						"OwnableUpgradeable": [
							240
						],
						"ScholarshipDispenser": [
							1988
						]
					},
					"id": 1989,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1669,
							"literals": [
								"solidity",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:6"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1671,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1989,
							"sourceUnit": 241,
							"src": "64:101:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1670,
										"name": "OwnableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 240,
										"src": "72:18:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 1673,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1989,
							"sourceUnit": 1668,
							"src": "166:87:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1672,
										"name": "MerkleProof",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1667,
										"src": "174:11:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
							"file": "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol",
							"id": 1675,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1989,
							"sourceUnit": 46,
							"src": "254:112:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1674,
										"name": "AggregatorV3Interface",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 45,
										"src": "262:21:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1676,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"401:18:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 240,
										"src": "401:18:6"
									},
									"id": 1677,
									"nodeType": "InheritanceSpecifier",
									"src": "401:18:6"
								}
							],
							"canonicalName": "ScholarshipDispenser",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1988,
							"linearizedBaseContracts": [
								1988,
								240,
								554,
								508
							],
							"name": "ScholarshipDispenser",
							"nameLocation": "377:20:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "e65bf545",
									"id": 1679,
									"mutability": "mutable",
									"name": "usdStipendAmount",
									"nameLocation": "441:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 1988,
									"src": "426:31:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1678,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "426:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "741bef1a",
									"id": 1682,
									"mutability": "mutable",
									"name": "priceFeed",
									"nameLocation": "526:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1988,
									"src": "497:38:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
										"typeString": "contract AggregatorV3Interface"
									},
									"typeName": {
										"id": 1681,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1680,
											"name": "AggregatorV3Interface",
											"nameLocations": [
												"497:21:6"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 45,
											"src": "497:21:6"
										},
										"referencedDeclaration": 45,
										"src": "497:21:6",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
											"typeString": "contract AggregatorV3Interface"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 1684,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "556:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1988,
									"src": "541:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1683,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "541:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "26317008",
									"id": 1688,
									"mutability": "mutable",
									"name": "claimedStipends",
									"nameLocation": "604:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 1988,
									"src": "572:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1687,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1685,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "580:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "572:24:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1686,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "591:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "4c153bd30bda7744842de8420e57ce83f3c500342b5e0363a5dad7a9132b864a",
									"id": 1696,
									"name": "StipendClaimed",
									"nameLocation": "632:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1690,
												"indexed": true,
												"mutability": "mutable",
												"name": "student",
												"nameLocation": "672:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "656:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1689,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "656:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1692,
												"indexed": false,
												"mutability": "mutable",
												"name": "usdAmount",
												"nameLocation": "697:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "689:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1694,
												"indexed": false,
												"mutability": "mutable",
												"name": "ethAmount",
												"nameLocation": "724:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "716:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "716:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "646:93:6"
									},
									"src": "626:114:6"
								},
								{
									"anonymous": false,
									"eventSelector": "9b4c4e3e326e807d75390cdfe8bcb2a5d0d15150dee428b4880742c26d28b842",
									"id": 1702,
									"name": "DirectorFundedStipendPayouts",
									"nameLocation": "751:28:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"indexed": true,
												"mutability": "mutable",
												"name": "director",
												"nameLocation": "805:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1702,
												"src": "789:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "789:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1700,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "831:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1702,
												"src": "823:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "779:64:6"
									},
									"src": "745:99:6"
								},
								{
									"anonymous": false,
									"eventSelector": "7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5",
									"id": 1708,
									"name": "Withdrawn",
									"nameLocation": "855:9:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"indexed": true,
												"mutability": "mutable",
												"name": "director",
												"nameLocation": "881:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "865:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "899:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "891:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:42:6"
									},
									"src": "849:58:6"
								},
								{
									"errorSelector": "3a78b358",
									"id": 1710,
									"name": "InvalidDirectorAddress",
									"nameLocation": "919:22:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "941:2:6"
									},
									"src": "913:31:6"
								},
								{
									"errorSelector": "e3588063",
									"id": 1712,
									"name": "InvalidPriceFeedAddress",
									"nameLocation": "955:23:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "978:2:6"
									},
									"src": "949:32:6"
								},
								{
									"errorSelector": "9dd854d3",
									"id": 1714,
									"name": "InvalidMerkleRoot",
									"nameLocation": "992:17:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1009:2:6"
									},
									"src": "986:26:6"
								},
								{
									"errorSelector": "0093f5a1",
									"id": 1716,
									"name": "StipendAlreadyClaimed",
									"nameLocation": "1023:21:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1044:2:6"
									},
									"src": "1017:30:6"
								},
								{
									"errorSelector": "b05e92fa",
									"id": 1718,
									"name": "InvalidMerkleProof",
									"nameLocation": "1058:18:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1076:2:6"
									},
									"src": "1052:27:6"
								},
								{
									"errorSelector": "439055cc",
									"id": 1720,
									"name": "StipendAmountMustBeGreaterThanZero",
									"nameLocation": "1090:34:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1124:2:6"
									},
									"src": "1084:43:6"
								},
								{
									"errorSelector": "96187bd5",
									"id": 1722,
									"name": "InvalidPriceFeedData",
									"nameLocation": "1138:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1158:2:6"
									},
									"src": "1132:29:6"
								},
								{
									"errorSelector": "786e0a99",
									"id": 1724,
									"name": "InsufficientContractBalance",
									"nameLocation": "1172:27:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1199:2:6"
									},
									"src": "1166:36:6"
								},
								{
									"errorSelector": "b12d13eb",
									"id": 1726,
									"name": "ETHTransferFailed",
									"nameLocation": "1213:17:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1230:2:6"
									},
									"src": "1207:26:6"
								},
								{
									"body": {
										"id": 1733,
										"nodeType": "Block",
										"src": "1306:39:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1730,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "1316:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1316:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1732,
												"nodeType": "ExpressionStatement",
												"src": "1316:22:6"
											}
										]
									},
									"documentation": {
										"id": 1727,
										"nodeType": "StructuredDocumentation",
										"src": "1239:48:6",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 1734,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1728,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1303:2:6"
									},
									"returnParameters": {
										"id": 1729,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1306:0:6"
									},
									"scope": 1988,
									"src": "1292:53:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1807,
										"nodeType": "Block",
										"src": "1567:460:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1749,
																"name": "_director",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1737,
																"src": "1585:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1606:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1598:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1750,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1598:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1753,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1598:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1585:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1755,
																"name": "InvalidDirectorAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1710,
																"src": "1610:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1756,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1610:24:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1748,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1577:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1577:58:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1758,
												"nodeType": "ExpressionStatement",
												"src": "1577:58:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1760,
																"name": "_usdStipendAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1739,
																"src": "1653:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1673:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1653:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1763,
																"name": "StipendAmountMustBeGreaterThanZero",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1720,
																"src": "1676:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1676:36:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1645:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1645:68:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1766,
												"nodeType": "ExpressionStatement",
												"src": "1645:68:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1773,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1768,
																"name": "_priceFeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1741,
																"src": "1731:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1771,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1753:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1745:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1769,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1745:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1772,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1745:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1731:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1774,
																"name": "InvalidPriceFeedAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1712,
																"src": "1757:23:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1757:25:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1767,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1723:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1723:60:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1777,
												"nodeType": "ExpressionStatement",
												"src": "1723:60:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1779,
																"name": "_merkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1743,
																"src": "1801:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1824:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1816:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1780,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1816:7:6",
																		"typeDescriptions": {}
																	}
																},
																"id": 1783,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1816:10:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "1801:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1785,
																"name": "InvalidMerkleRoot",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1714,
																"src": "1828:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1828:19:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1778,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1793:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1793:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1788,
												"nodeType": "ExpressionStatement",
												"src": "1793:55:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1790,
															"name": "_director",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1737,
															"src": "1874:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1789,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "1859:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1859:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1792,
												"nodeType": "ExpressionStatement",
												"src": "1859:25:6"
											},
											{
												"expression": {
													"id": 1795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1793,
														"name": "usdStipendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1679,
														"src": "1895:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1794,
														"name": "_usdStipendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1739,
														"src": "1914:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1895:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1796,
												"nodeType": "ExpressionStatement",
												"src": "1895:36:6"
											},
											{
												"expression": {
													"id": 1801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1797,
														"name": "priceFeed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1682,
														"src": "1941:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
															"typeString": "contract AggregatorV3Interface"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1799,
																"name": "_priceFeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1741,
																"src": "1975:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1798,
															"name": "AggregatorV3Interface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "1953:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$45_$",
																"typeString": "type(contract AggregatorV3Interface)"
															}
														},
														"id": 1800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1953:33:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
															"typeString": "contract AggregatorV3Interface"
														}
													},
													"src": "1941:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
														"typeString": "contract AggregatorV3Interface"
													}
												},
												"id": 1802,
												"nodeType": "ExpressionStatement",
												"src": "1941:45:6"
											},
											{
												"expression": {
													"id": 1805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1803,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1684,
														"src": "1996:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1804,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1743,
														"src": "2009:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1996:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1806,
												"nodeType": "ExpressionStatement",
												"src": "1996:24:6"
											}
										]
									},
									"documentation": {
										"id": 1735,
										"nodeType": "StructuredDocumentation",
										"src": "1351:47:6",
										"text": "@custom:oz-upgrades-validate-as-initializer"
									},
									"functionSelector": "5f761675",
									"id": 1808,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1746,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1745,
												"name": "initializer",
												"nameLocations": [
													"1555:11:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 348,
												"src": "1555:11:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1555:11:6"
										}
									],
									"name": "initialize",
									"nameLocation": "1412:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "_director",
												"nameLocation": "1440:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "1432:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1739,
												"mutability": "mutable",
												"name": "_usdStipendAmount",
												"nameLocation": "1467:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "1459:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "_priceFeed",
												"nameLocation": "1502:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "1494:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1530:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "1522:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1742,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1422:125:6"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1567:0:6"
									},
									"scope": 1988,
									"src": "1403:624:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1900,
										"nodeType": "Block",
										"src": "2303:949:6",
										"statements": [
											{
												"assignments": [
													1816
												],
												"declarations": [
													{
														"constant": false,
														"id": 1816,
														"mutability": "mutable",
														"name": "student",
														"nameLocation": "2321:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1900,
														"src": "2313:15:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1815,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2313:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1819,
												"initialValue": {
													"expression": {
														"id": 1817,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2331:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2335:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "2331:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2313:28:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1824,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2359:25:6",
															"subExpression": {
																"baseExpression": {
																	"id": 1821,
																	"name": "claimedStipends",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1688,
																	"src": "2360:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 1823,
																"indexExpression": {
																	"id": 1822,
																	"name": "student",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1816,
																	"src": "2376:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2360:24:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1825,
																"name": "StipendAlreadyClaimed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1716,
																"src": "2386:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2386:23:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1820,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2351:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2351:59:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1828,
												"nodeType": "ExpressionStatement",
												"src": "2351:59:6"
											},
											{
												"assignments": [
													1830
												],
												"declarations": [
													{
														"constant": false,
														"id": 1830,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "2429:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1900,
														"src": "2421:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1829,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2421:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1838,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1834,
																	"name": "student",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1816,
																	"src": "2457:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1835,
																	"name": "usdStipendAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1679,
																	"src": "2466:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1832,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2446:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1833,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2450:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2446:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2446:37:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1831,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2436:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2436:48:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2421:63:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1842,
																	"name": "merkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1812,
																	"src": "2551:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	}
																},
																{
																	"id": 1843,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1684,
																	"src": "2580:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1847,
																					"name": "leaf",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1830,
																					"src": "2635:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"expression": {
																					"id": 1845,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2618:3:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1846,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "2622:12:6",
																				"memberName": "encodePacked",
																				"nodeType": "MemberAccess",
																				"src": "2618:16:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 1848,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2618:22:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1844,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "2608:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2608:33:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																		"typeString": "bytes32[] calldata"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1840,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1667,
																	"src": "2515:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$1667_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 1841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2527:6:6",
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 623,
																"src": "2515:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 1850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2515:140:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1851,
																"name": "InvalidMerkleProof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1718,
																"src": "2669:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2669:20:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1839,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2494:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2494:205:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1854,
												"nodeType": "ExpressionStatement",
												"src": "2494:205:6"
											},
											{
												"assignments": [
													1856
												],
												"declarations": [
													{
														"constant": false,
														"id": 1856,
														"mutability": "mutable",
														"name": "ethAmount",
														"nameLocation": "2718:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1900,
														"src": "2710:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1855,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2710:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1860,
												"initialValue": {
													"arguments": [
														{
															"id": 1858,
															"name": "usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1679,
															"src": "2746:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1857,
														"name": "convertUsdToEth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "2730:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2730:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2710:53:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1864,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2802:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ScholarshipDispenser_$1988",
																				"typeString": "contract ScholarshipDispenser"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ScholarshipDispenser_$1988",
																				"typeString": "contract ScholarshipDispenser"
																			}
																		],
																		"id": 1863,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2794:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1862,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2794:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2794:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1866,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2808:7:6",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2794:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1867,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1856,
																"src": "2819:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2794:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1869,
																"name": "InsufficientContractBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1724,
																"src": "2842:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2842:29:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1861,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2773:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2773:108:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1872,
												"nodeType": "ExpressionStatement",
												"src": "2773:108:6"
											},
											{
												"expression": {
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1873,
															"name": "claimedStipends",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1688,
															"src": "3035:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1875,
														"indexExpression": {
															"id": 1874,
															"name": "student",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1816,
															"src": "3051:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3035:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1876,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3062:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3035:31:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1878,
												"nodeType": "ExpressionStatement",
												"src": "3035:31:6"
											},
											{
												"assignments": [
													1880,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1880,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3083:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1900,
														"src": "3078:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1879,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3078:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1887,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3127:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1881,
																"name": "student",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1816,
																"src": "3096:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3104:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3096:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1884,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1883,
																"name": "ethAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1856,
																"src": "3116:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3096:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3096:34:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3077:53:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1889,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1880,
															"src": "3148:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1890,
																"name": "ETHTransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1726,
																"src": "3157:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1891,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3157:19:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1888,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3140:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3140:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1893,
												"nodeType": "ExpressionStatement",
												"src": "3140:37:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1895,
															"name": "student",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1816,
															"src": "3208:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1896,
															"name": "usdStipendAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1679,
															"src": "3217:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1897,
															"name": "ethAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1856,
															"src": "3235:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1894,
														"name": "StipendClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1696,
														"src": "3193:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3193:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1899,
												"nodeType": "EmitStatement",
												"src": "3188:57:6"
											}
										]
									},
									"documentation": {
										"id": 1809,
										"nodeType": "StructuredDocumentation",
										"src": "2033:202:6",
										"text": " @notice This function allows students to claim their stipend if they are included in the Merkle tree\n @param merkleProof The Merkle proof that verifies the student's eligibility"
									},
									"functionSelector": "f32ae7dd",
									"id": 1901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimStipend",
									"nameLocation": "2249:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1812,
												"mutability": "mutable",
												"name": "merkleProof",
												"nameLocation": "2281:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1901,
												"src": "2262:30:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1810,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2262:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1811,
													"nodeType": "ArrayTypeName",
													"src": "2262:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:32:6"
									},
									"returnParameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2303:0:6"
									},
									"scope": 1988,
									"src": "2240:1012:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1937,
										"nodeType": "Block",
										"src": "3355:263:6",
										"statements": [
											{
												"assignments": [
													null,
													1909,
													null,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 1909,
														"mutability": "mutable",
														"name": "price",
														"nameLocation": "3375:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 1937,
														"src": "3368:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1908,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "3368:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null
												],
												"id": 1913,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1910,
															"name": "priceFeed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "3390:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_AggregatorV3Interface_$45",
																"typeString": "contract AggregatorV3Interface"
															}
														},
														"id": 1911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3400:15:6",
														"memberName": "latestRoundData",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 44,
														"src": "3390:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
															"typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
														}
													},
													"id": 1912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3390:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
														"typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3365:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1917,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1915,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1909,
																"src": "3435:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1916,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3443:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3435:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1918,
																"name": "InvalidPriceFeedData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1722,
																"src": "3446:20:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3446:22:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1914,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3427:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3427:42:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1921,
												"nodeType": "ExpressionStatement",
												"src": "3427:42:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "31",
																	"id": 1922,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3555:7:6",
																	"subdenomination": "ether",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1927,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1923,
																				"name": "usdAmountInCents",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1903,
																				"src": "3566:16:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_rational_1000000_by_1",
																					"typeString": "int_const 1000000"
																				},
																				"id": 1926,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"hexValue": "3130",
																					"id": 1924,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3585:2:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "**",
																				"rightExpression": {
																					"hexValue": "36",
																					"id": 1925,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3591:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_6_by_1",
																						"typeString": "int_const 6"
																					},
																					"value": "6"
																				},
																				"src": "3585:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000000_by_1",
																					"typeString": "int_const 1000000"
																				}
																			},
																			"src": "3566:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1928,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3565:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3555:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1930,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3554:40:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"arguments": [
															{
																"id": 1933,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1909,
																"src": "3605:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1932,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3597:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1931,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3597:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1934,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3597:14:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3554:57:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1907,
												"id": 1936,
												"nodeType": "Return",
												"src": "3547:64:6"
											}
										]
									},
									"id": 1938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertUsdToEth",
									"nameLocation": "3267:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "usdAmountInCents",
												"nameLocation": "3300:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 1938,
												"src": "3292:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3292:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3282:40:6"
									},
									"returnParameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1938,
												"src": "3346:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3346:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3345:9:6"
									},
									"scope": 1988,
									"src": "3258:360:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1950,
										"nodeType": "Block",
										"src": "3780:73:6",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1944,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3824:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1945,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3828:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3824:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1946,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3836:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3840:5:6",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "3836:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1943,
														"name": "DirectorFundedStipendPayouts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1702,
														"src": "3795:28:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3795:51:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1949,
												"nodeType": "EmitStatement",
												"src": "3790:56:6"
											}
										]
									},
									"id": 1951,
									"implemented": true,
									"kind": "receive",
									"modifiers": [
										{
											"id": 1941,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1940,
												"name": "onlyOwner",
												"nameLocations": [
													"3770:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3770:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3770:9:6"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3750:2:6"
									},
									"returnParameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3780:0:6"
									},
									"scope": 1988,
									"src": "3743:110:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1986,
										"nodeType": "Block",
										"src": "3953:237:6",
										"statements": [
											{
												"assignments": [
													1957
												],
												"declarations": [
													{
														"constant": false,
														"id": 1957,
														"mutability": "mutable",
														"name": "contractBalance",
														"nameLocation": "3971:15:6",
														"nodeType": "VariableDeclaration",
														"scope": 1986,
														"src": "3963:23:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1956,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3963:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1963,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 1960,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3997:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ScholarshipDispenser_$1988",
																	"typeString": "contract ScholarshipDispenser"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_ScholarshipDispenser_$1988",
																	"typeString": "contract ScholarshipDispenser"
																}
															],
															"id": 1959,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3989:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1958,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3989:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1961,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3989:13:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4003:7:6",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "3989:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3963:47:6"
											},
											{
												"assignments": [
													1965,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1965,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4026:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1986,
														"src": "4021:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1964,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4021:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1973,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1971,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4079:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"expression": {
																	"id": 1966,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4039:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4043:6:6",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4039:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4050:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4039:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1969,
																"name": "contractBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1957,
																"src": "4062:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4039:39:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4039:43:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4020:62:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1975,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1965,
															"src": "4100:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1976,
																"name": "ETHTransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1726,
																"src": "4109:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1977,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4109:19:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1974,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4092:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4092:37:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1979,
												"nodeType": "ExpressionStatement",
												"src": "4092:37:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1981,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4155:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4159:6:6",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4155:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1983,
															"name": "contractBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1957,
															"src": "4167:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1980,
														"name": "Withdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1708,
														"src": "4145:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4145:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1985,
												"nodeType": "EmitStatement",
												"src": "4140:43:6"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 1987,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1954,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1953,
												"name": "onlyOwner",
												"nameLocations": [
													"3943:9:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 135,
												"src": "3943:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3943:9:6"
										}
									],
									"name": "withdraw",
									"nameLocation": "3923:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3931:2:6"
									},
									"returnParameters": {
										"id": 1955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3953:0:6"
									},
									"scope": 1988,
									"src": "3914:276:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1989,
							"src": "368:3824:6",
							"usedErrors": [
								76,
								81,
								257,
								260,
								1710,
								1712,
								1714,
								1716,
								1718,
								1720,
								1722,
								1724,
								1726
							],
							"usedEvents": [
								87,
								265,
								1696,
								1702,
								1708
							]
						}
					],
					"src": "39:4154:6"
				},
				"id": 6
			}
		}
	}
}